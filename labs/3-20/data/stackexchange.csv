"","Id","Body","Tag"
"1",26739211,"<p>When I initialized my web client id and android client id variables in the python backend, I used backslashes for line continuation to conform with PEP8 (80 character line length) ie.</p>

<pre><code>WEB_CLIENT_ID = 'web-client-id'\
                '.apps.googleusercontent.com'
ANDROID_CLIENT_ID = 'android-client-id'\
                    '.apps.googleusercontent.com'
</code></pre>

<p>I am not sure why this was not read correctly, but when I used line continuation inside parenthesis it worked fine.</p>

<pre><code>WEB_CLIENT_ID = ('web-client-id'
                 '.apps.googleusercontent.com')
ANDROID_CLIENT_ID = ('android-client-id'
                     '.apps.googleusercontent.com')
</code></pre>
","android"
"2",23589964,"<p>I think you need XMPP messaging. It's support by App Engine but not in PHP : <a href=""https://developers.google.com/appengine/features/"" rel=""nofollow"">https://developers.google.com/appengine/features/</a></p>

<p>XMPP permit to send and receive chat messages.</p>
","android"
"3",28713425,"<p>found in <a href=""http://android-scripting.blogspot.fr/2010/11/first-android-experiment-smssenderpy.html"" rel=""nofollow"">In Love with a Droid</a>
need to wait via ttsIsSpeaking which returns a tuple, the boolean is the second element of the tuple is set false when the current speak has completed.</p>
","android"
"4",27410741,"<p>Did you try looking at the doc?</p>

<p><a href=""https://kivy.org/docs/api-kivy.uix.behaviors.focus.html#kivy.uix.behaviors.focus.FocusBehavior.input_type"" rel=""nofollow"">https://kivy.org/docs/api-kivy.uix.behaviors.focus.html#kivy.uix.behaviors.focus.FocusBehavior.input_type</a> ?</p>
","android"
"5",26013896,"<p>you can use <strong>adb shell logcat</strong> instead of abd logcat in</p>

<p>proc = subprocess.Popen(""adb shell logcat -v time"",stdout=subprocess.PIPE)</p>

<p>it will give all logs.</p>

<p>i hope it will work.</p>
","android"
"6",8798707,"<p>Use client authentication with SSL or just layer your own client authentication (username/password, token, etc) on top of server-authentication SSL. </p>

<p>(Edit: Moving the comment here, since it won't fit as a comment)</p>

<p>To elaborate a bit, any authentication info needs to be stored or entered in the app. If you have people enter the password each time, you don't need to save it, but that's clearly inconvenient. You can encrypt it with a device-specific key, so it's not visible on rooted devices. With a private key, you need to either protect it with a user entered password (see above) or have it protected by the system. That is only available since Android 4.0 (ICS) with the public API to the system keystore, the <code>KeyChain</code> class. In this case, the user needs to unlock (using pattern/password or PIN) the phone to access the keystore.</p>
","android"
"7",35492428,"<p>From what I gather you are try to run your tests concurrently, right?</p>

<p>If so, I haven't seen anything about threads in your post, and without threads your test will run serially.</p>

<p>The Selenium Grid doesn't round-robin connections for the same kind of resource. It simply allocates the first available machine. I.E. if test 'A' requests a specific browser/platform/device config, and runs to completion, then if test 'B' comes along and asks for the same config, it'll get the same machine that test A got. Make sense?</p>

<p>If you want to parallelize your tests, I would recommend checking out <a href=""http://pytest.org/latest/"" rel=""nofollow"">pytest</a> &amp; the <a href=""https://pypi.python.org/pypi/pytest-xdist"" rel=""nofollow"">xdist</a> plugin. This will handle all the threading/multiprocess stuff for you.</p>

<p>Fun fact, even if you wrote everything to use unittest, you don't have to rewrite everything to use pytest; just point pytest at your existing code.</p>
","android"
"8",11179014,"<p>If you dont explicitly want to use Sessions etc. you can simply use the Datastore. Try following this:</p>

<ol>
<li>Get a unique deviceID/email to identify each unique user.</li>
<li>On request from a specific user, generate a random authentication key, and store it attached to the user's email/deviceID and probably the current timestamp and a loggedIn flag.</li>
</ol>

<p>SO you have: </p>

<pre><code>User email/id: someone@example.com
password: xxxxxxxxxx
Key : 2131231312313123123213
Timestamp: 20:00 12-02-2013
loggedIn : boolean value
</code></pre>

<p>This can be database model. Now whenever the user logs in:</p>

<ul>
<li><strong>Check</strong> email, password combination.</li>
<li>If valid, <strong>generate random key</strong>, and <strong>update the datastore</strong> with the new key</li>
<li><strong>update timestamp with current time</strong>, and set <strong>loggedIn</strong> to <strong>True</strong></li>
<li>Now return the key back to the client (Android/iPhone) in a JSON object.</li>
</ul>

<p>Now on every request, Check the <strong>received key against the one in your datastore</strong>, and if <strong>loggedIn</strong> flag is set to true. If both OK, process the request.</p>

<p>Also, on Logout:</p>

<ul>
<li>Just set the <strong>loggedIn</strong> flag in the datastore to <strong>False.</strong></li>
</ul>

<p>Hope this helps :)</p>
","android"
"9",10091302,"<p>If you mean detecting which removable media is Android storage, you could scan all removable drives for the Android/ or .android_secure/ folders, which would suggest the device is Android. Documentation <a href=""http://docs.python.org/library/filesys.html"" rel=""nofollow"">here</a> may be useful.</p>
","android"
"10",26799084,"<p>Use 'Window', not 'Windows', and place in main.py:</p>

<pre><code>from kivy.core.window import Window
Window.softinput_mode = 'pan'
</code></pre>
","android"
"11",7860772,"<p>From the link you posted:</p>

<blockquote>
  <p>Scripts can be run interactively in a terminal, in the background, or via Locale.</p>
</blockquote>

<p>This already is a disadvantage, as you can't release your Apps to Android Market easily. This can however ostensibly be avoided by the build script of <a href=""http://pygame.renpy.org/"" rel=""nofollow"">Pygame Subset for Android,</a> but I am not sure about this. The Python interpreter will however need to be installed on the device, which will bloat the App's size by quite a bit.</p>

<p>The speed of execution of Python on an Android device of course is slower than Java, as Python doesn't magically accelerate just because it runs on a phone. The difference isn't that great in most situations, though.</p>
","android"
"12",32069867,"<p>Use any back-end, in which you feel comfortable, your just have to provide web services for Android. Google App Engine &amp; python is as good as any other. Only thing which matter is your comfort or experience (in a particular platform).</p>

<p>Some other options are:</p>

<ul>
<li>PHP, MySql</li>
<li>Java (see <a href=""http://sparkjava.com/"" rel=""nofollow"">Spark Framework</a>)</li>
<li>Scala/Java <a href=""https://www.playframework.com/"" rel=""nofollow"">Playframework</a></li>
<li>&amp; Many other</li>
</ul>
","android"
"13",25379098,"<p>Take a look at <a href=""https://github.com/dtmilano/AndroidViewClient"" rel=""nofollow"">AndroidViewclient/culebra</a>. It locates Views based on their attributes like id, text, content description, etc. </p>
","android"
"14",29742289,"<p>Try sudo apt-get install libatlas-base-dev it looks like you're missing some libraries</p>
","android"
"15",32070273,"<p>Thank you guys, I found the answer using  the below </p>

<p>rowcount = d(textStartsWith=""XXX"").count</p>

<p>print rowcount </p>

<p>This returns the exact number of rows starting with same letters/characters</p>
","android"
"16",37926346,"<p>You should use api for that however you can use webview in android dev.</p>
","android"
"17",18809214,"<p>For running Python CGI scripts in Android. Basically you needed a web server capable of running CGI scripts in Android platform but, I found none. You need toy CGI script to suit the <em>Cherrypy web server</em> and it could run on Android.</p>

<p><strong>Are steps are here :</strong></p>

<ol>
<li>First thing we need is to download the SL4A (r4) software in the
Android (2.3) emulator. It can be done from your Android browser by
going to the SL4A site. Now install the software in emulator.</li>
<li>Then install Python for Android from the same SL4A site. It'll
download an apk of version r4.</li>
<li>Launch SL4A application and check that HelloWorld python script is
running. It will make sure that your installation is fine.</li>
<li>Now is the time to install Cherrypy library module. It can be found
at <a href=""http://www.cherrypy.org/wiki/CherryPyDownload"" rel=""nofollow"">http://www.cherrypy.org/wiki/CherryPyDownload</a>. I have taken 3.2.0
version. Download the egg for python 2.6.</li>
<li>Now we need to transfer the egg file to Android emulator. Use adb
push command to transfer the egg file to /mnt/sdcard/Download.</li>
<li>Launch Python for Android from emulator and click on Import modules.
It will list the newly uploaded egg file. Select it and install.</li>
<li>Now we can write a Cherrypy script to be run as CGI. Below is a
HelloWorld example  taken from Cherrypy tutorial (modified a bit) </li>
</ol>

<blockquote>
<pre><code> # Import CherryPy global namespace
import cherrypy

class HelloWorld:
    """""" Sample request handler class. """"""

    def index(self, **params):
        # CherryPy will call this method for the root URI (""/"") and send
        # its return value to the client.
        for key in params:
            print key, '=', params[key]
        return ""Hello world!""

    # Expose the index method through the web. CherryPy will never
    # publish methods that don't have the exposed attribute set to True.
    index.exposed = True
</code></pre>
</blockquote>

<pre><code># CherryPy always starts with app.root when trying to map request URIs
# to objects, so we need to mount a request handler root. A request
# to '/' will be mapped to HelloWorld().index().
cherrypy.config.update({'server.socket_host': '127.0.0.1'})
cherrypy.config.update({'server.socket_port': 8080})
cherrypy.quickstart(HelloWorld(), '/')
</code></pre>

<p>8> The script needs to be transferred to /mnt/sdcard/sl4a/scripts    directory in emulator. Then you can launch SL4A and tap the script to    run. Debug outputs are visible if you run in SL4A console.</p>

<p>9> From the Android browser, check the URL <code>http://localhost:8080/</code>. It will say ""Hello world"".</p>

<p>This the web server set we can place python scripts to access Android phone data and other stuff which can be exposed to the outside clients.</p>

<p><strong>Credits to:</strong> <a href=""http://crazytechthoughts.blogspot.in/2011/08/run-cherrypy-web-server-in-andriod.html"" rel=""nofollow"">see the screen shots here</a></p>

<p><strong>Other Info:</strong></p>

<p><a href=""http://forum.xda-developers.com/showthread.php?t=1238569"" rel=""nofollow"">micro-httpd (GET / POST / CGI support) cross-compiled to Android</a></p>

<p><a href=""http://code.google.com/p/python-for-android/source/browse/python3-alpha/python3-src/Lib/cgi.py?r=b3c1049b5eadd74a307f917b3703ab6911165e4e"" rel=""nofollow"">python-for-android</a></p>

<p><a href=""http://www.lies.com/begperl/hello_cgi.html"" rel=""nofollow"">Running ""Hello, world!"" as a CGI Script</a></p>

<p><strong>What I recommend:</strong></p>

<p>I suggest to go for any lightweight web servers (like node.js) in raspberry pi </p>

<p><strong>Ref:</strong> </p>

<ul>
<li><a href=""http://raspberrywebserver.com/sql-databases/accessing-an-sqlite-database-with-python.html#.UjmCsUlIePs"" rel=""nofollow"">Raspberrry pi python</a></li>
<li><a href=""http://raspberrypi.stackexchange.com/questions/78/good-lightweight-web-server-framework"">lightweight web servers</a></li>
<li><a href=""http://expressjs.com/"" rel=""nofollow"">web application framework for Node.js  </a></li>
</ul>
","android"
"18",38260562,"<p>You can try to add the path to your module to the <a href=""https://docs.python.org/3/library/sys.html#sys.path"" rel=""nofollow"">sys.path</a>.</p>

<p>But maybe... there's no such thing as <code>app.ui.first_screen</code>. Try to make it only <code>ui.first_screen</code> or go for this:</p>

<pre><code>from .&lt;file/folder in your app folder&gt; import &lt;something&gt;
</code></pre>
","android"
"19",12565396,"<p>If you installed the py4a module, then add</p>

<pre><code>from py4a import patch_distutils
patch_distutils()
</code></pre>

<p>to <code>setup.py</code>, add the <code>setup.cfg</code> and now:</p>

<pre><code>python setup.py configure
python setup.py build
</code></pre>
","android"
"20",38776767,"<p>Use:</p>

<pre><code>from kivy.app import platform

if platform() == 'android':
    DATA_FOLDER = os.getenv('EXTERNAL_STORAGE') or os.path.expanduser(""~"")
#create your own sub folders and files...
</code></pre>

<p>to get to the root of the external drive.</p>
","android"
"21",11337091,"<p>Try:</p>

<pre><code>import subprocess
o = subprocess.Popen([""adb"", ""shell""],stdin=subprocess.PIPE, stdout=subprocess.PIPE)
o.stdin.write(""ls /"")
o.stdin.write(""\n"")
o.stdin.flush()
o.stdout.readline()
</code></pre>
","android"
"22",37661988,"<p>For the text of the stated element try the following code : </p>

<pre><code>el = driver.find_element_by_id('com.access_company.twine.android.dmc:id/btnVideos')
print el.text
</code></pre>

<p>Also <code>el.get_attribute(""resourceId"")</code> shall ideally return <em>""btnVideos""</em></p>
","android"
"23",21581720,"<p>Well i have solved it in the end! And the clue was here</p>

<pre><code>[aidl] /home/administrator/sdk/build-tools/19.0.1/aidl: error while loading shared libraries: libstdc++.so.6: cannot open shared object file: No such file or directory
</code></pre>

<p>Explained : the Linux distro that i am working on is on a 64 bit machine so some c++ libraries were necessary to be able to run 32 bit applications so what i did is the following:</p>

<pre><code>$ sudo apt-get install lib32stdc++6
</code></pre>

<p>and it was solved!</p>
","android"
"24",27898661,"<p>try this
        emailSign = self.driver.find_element_by_class_name(""UIATextField"")
        passSign = self.driver.find_element_by_class_name(""UIASecureTextField"")</p>

<pre><code>    passSign.click()

    emailSign.send_keys(username + carriage_return)
    passSign.send_keys(password + carriage_return)
</code></pre>
","android"
"25",35442275,"<p>Well i just restarted the computer and it starts working!</p>
","android"
"26",11770594,"<p>it seems that what you need is the bluetooth facade. Here are some commands pertaining to bluetooth that might be helpful to you:</p>

<pre><code>bluetoothAccept
bluetoothActiveConnections
bluetoothConnect
bluetoothDiscoveryCancel
bluetoothDiscoveryStart
bluetoothGetConnectedDeviceName
bluetoothGetLocalAddress
bluetoothGetLocalName
bluetoothGetRemoteDeviceName
bluetoothGetScanMode
bluetoothIsDiscovering
bluetoothMakeDiscoverable
bluetoothRead
bluetoothReadBinary
bluetoothReadLine
bluetoothReadReady
bluetoothSetLocalName
bluetoothStop
bluetoothWrite
bluetoothWriteBinary
checkBluetoothState
toggleBluetoothState
</code></pre>

<p><br>
To call any of these commands you would do something like</p>

<pre><code>import android
droid = android.Android()
#call your commands with droid.bluetoothcommand
droid.bluetoothDiscoveryStart()
#or
droid.toggleBluetoothState(True)
</code></pre>

<p><br>
Here is an example of some bluetooth functions, it is included with SL4A, but I added the comments for clarity:</p>

<pre><code>import android #for bluetooth functions
import time #for waiting

#get everything setup
droid = android.Android()

#turn on bluetooth
droid.toggleBluetoothState(True)

#ask user
droid.dialogCreateAlert('Be a server?')
droid.dialogSetPositiveButtonText('Yes')
droid.dialogSetNegativeButtonText('No')
droid.dialogShow()

#get user response to question
result = droid.dialogGetResponse()

#if the result is 'Yes' ('positive') then is_server is set to True
is_server = result.result['which'] == 'positive'

if is_server:
  #so if is_server is true make the device discoverable and accept the next connection
  droid.bluetoothMakeDiscoverable()
  droid.bluetoothAccept()
else:
  #attempts to connect to a device over bluetooth, the logic being that if the phone
  #is not receiving a connection then the user is attempting to connect to something
  droid.bluetoothConnect()


if is_server:
  result = droid.getInput('Chat', 'Enter a message').result #Gets a message to send 
  #via bluetooth
  if result is None:
    droid.exit() #exit if nothing is in the message
  droid.bluetoothWrite(result + '\n') #otherwise write the message

while True: #receives a message
  message = droid.bluetoothReadLine().result
  droid.dialogCreateAlert('Chat Received', message)
  droid.dialogSetPositiveButtonText('Ok')
  droid.dialogShow()
  droid.dialogGetResponse()
  result = droid.getInput('Chat', 'Enter a message').result
  if result is None:
    break
  droid.bluetoothWrite(result + '\n')

droid.exit()
</code></pre>

<p><br></p>

<p>Finally, for a full list of bluetooth commands, check out <a href=""http://code.google.com/p/android-scripting/wiki/ApiReference"">http://code.google.com/p/android-scripting/wiki/ApiReference</a> and scroll down to the bluetooth facade. Best of luck!</p>
","android"
"27",24476020,"<p>Try running</p>

<pre><code>    buildozer android update
</code></pre>

<p>I was having some issues with it building the apk, but after running the clean and then update it worked.</p>
","android"
"28",23589964,"<p>I think you need XMPP messaging. It's support by App Engine but not in PHP : <a href=""https://developers.google.com/appengine/features/"" rel=""nofollow"">https://developers.google.com/appengine/features/</a></p>

<p>XMPP permit to send and receive chat messages.</p>
","android"
"29",17363413,"<p>I'm not sure if that's your only problem, but you opened the wrong ports :</p>

<blockquote>
  <p>GCM Cloud Connection Server (CCS) is an XMPP endpoint, running on <a href=""http://gcm.googleapis.com"" rel=""nofollow"">http://gcm.googleapis.com</a> port <strong>5235</strong>.</p>
</blockquote>

<p>The ports that you opened are only required for your Android device to receive messages from the GCM server when your device is connected to the internet via WiFi :</p>

<blockquote>
  <p>Note: If your organization has a firewall that restricts the traffic to or from the Internet, you need to configure it to allow connectivity with GCM <strong>in order for your Android devices to receive messages</strong>. The ports to open are: 5228, 5229, and 5230. GCM typically only uses 5228, but it sometimes uses 5229 and 5230. GCM doesn't provide specific IPs, so you should allow your firewall to accept outgoing connections to all IP addresses contained in the IP blocks listed in Google's ASN of 15169.</p>
</blockquote>
","android"
"30",23443740,"<p>This was answered comprehensively by Ben Rousch at <a href=""https://groups.google.com/forum/#!topic/kivy-users/5-G7wkbHb_k"" rel=""nofollow"">https://groups.google.com/forum/#!topic/kivy-users/5-G7wkbHb_k</a></p>

<p>He said:</p>

<blockquote>
  <p>In general, the steps are:</p>

<pre><code>   1 Generate Keystore (once)
   2 Create Release APK
   3 Sign APK
   4 Zip-align APK
</code></pre>
</blockquote>

<p>Ben also posted example terminal commands for the workflow at the above link.</p>

<p>Hope that helps</p>
","android"
"31",19090488,"<blockquote>
  <p>Anything in android.* ?</p>
</blockquote>

<p>You can turn on and off flashlight in following manner in Android.</p>

<p>Turn on the flashlight.</p>

<pre><code>Camera cam = null;
public void turnOnFlashLight() {
    try {
        if (getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA_FLASH)) {
            cam = Camera.open();
            Parameters p = cam.getParameters();
            p.setFlashMode(Parameters.FLASH_MODE_TORCH);
            cam.setParameters(p);
            cam.startPreview();
        }
    } catch (Exception e) {
        e.printStackTrace();
        Toast.makeText(getBaseContext(), ""Exception throws in turning on flashlight."", Toast.LENGTH_SHORT).show();
    }
}
</code></pre>

<p>Turn off the flashlight.</p>

<pre><code>public void turnOffFlashLight() {
    try {
        if (getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA_FLASH)) {
            cam.stopPreview();
            cam.release();
            cam = null;
        }
    } catch (Exception e) {
        e.printStackTrace();
        Toast.makeText(getBaseContext(), ""Exception throws in turning off flashlight."", Toast.LENGTH_SHORT).show();
    }
}
</code></pre>

<p>Do not forgot to add permission in manifest.</p>

<pre><code>&lt;uses-permission android:name=""android.permission.CAMERA"" /&gt;
&lt;uses-permission android:name=""android.permission.FLASHLIGHT""/&gt;
</code></pre>

<p>For more reference: <a href=""http://acomputerengineer.wordpress.com/2013/09/12/turn-on-and-turn-off-flash-light-programmatically-in-android/"" rel=""nofollow"">Turn on and turn off flash light programmatically in Android</a></p>
","android"
"32",22177183,"<p>First of all, since you call <code>root.pop1()</code> and <code>root</code> in this case is a <code>BoxLayout</code> I assume that you defined your <code>pop1</code> function in a class you called <code>BoxLayout</code> inheriting from <code>BoxLayout</code>? If so, you're basically overwriting a kivy class, which will mess things up.</p>

<p>A second issue is that you call <code>Image('boy.png')</code> when it should be <code>Image(source='boy.png')</code>.</p>

<p>Finally, in the button, you forgot to set <code>text</code> to a value.</p>

<p>A better way of doing what you're trying to accomplish is with the following code:</p>

<pre><code>from kivy.app import runTouchApp
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.popup import Popup
from kivy.uix.image import Image
from kivy.lang import Builder


kv = '''
BoxLayoutWithPopup:
    orientation:'horizontal'
    spacing:10
    padding:5
    Button:
        text: 'Press me'
        size_hint:.3,.3
        on_press:
            root.pop1()
'''


class BoxLayoutWithPopup(BoxLayout):

    def pop1(self):
        pop = Popup(title='test', content=Image(source='boy.png'),
                    size_hint=(None, None), size=(400, 400))
        pop.open()


if __name__ == '__main__':
    runTouchApp(Builder.load_string(kv))
</code></pre>
","android"
"33",38776767,"<p>Use:</p>

<pre><code>from kivy.app import platform

if platform() == 'android':
    DATA_FOLDER = os.getenv('EXTERNAL_STORAGE') or os.path.expanduser(""~"")
#create your own sub folders and files...
</code></pre>

<p>to get to the root of the external drive.</p>
","android"
"34",14293049,"<p>If you are scraping a web page, you could use <a href=""https://scraperwiki.com/"" rel=""nofollow"">scraperwiki</a>. It allows you to run scraper code on their server for free. (<a href=""http://lxml.de/"" rel=""nofollow"">lxml</a> is importable there too!) You can set how frequently you want the script to run.</p>
","android"
"35",29622597,"<p>Bruno Parmentier's answer includes what Travis-CI is currently recommending, but I had issues with the VM running out of memory.  So instead of running the emulator while the build is running, I changed my config to run the build, then start the emulator, then run the tests.</p>

<pre><code>sudo: false

language: android

env:
  global:
    # switch glibc to a memory conserving mode
    - MALLOC_ARENA_MAX=2
    # wait up to 10 minutes for adb to connect to emulator
    - ADB_INSTALL_TIMEOUT=10

android:
  components:
    - platform-tools
    - extra-android-m2repository
    - build-tools-22.0.1
    - android-22
    - sys-img-armeabi-v7a-android-22

script:
  - ./gradlew assemble lint

after_script:
  # Emulator Management: Create, Start and Wait
  - echo no | android create avd --force -n test -t android-22 --abi armeabi-v7a
  - emulator -avd test -no-skin -no-audio -no-window &amp;
  - android-wait-for-emulator
  - adb shell input keyevent 82 &amp;
  # now run the tests
  - ./gradlew connectedCheck
</code></pre>
","android"
"36",14651925,"<p>You can't use Python, Android programming is done in Java.  You can get the text from the <code>EditText</code> as follows (in Java):</p>

<pre><code>EditText et = (EditText)findViewById( R.id.editText1 );
String s = et.getText().toString();
</code></pre>

<p>If you're asking how to send that text to a webserver that uses Python, that's quite a bit more complicated.</p>
","android"
"37",40092797,"<p>What you describe seems like an issue with <code>uiautomator dump</code> (probably your device implementation) which is what <strong>AndroidViewClient</strong> uses as the default backend for API >= 19.</p>

<p>However, to be absolutely sure you should remove AndroidViewClient from the picture and run the same command it is used as the backend.</p>

<p><strong>AndroidViewClient 12.0.2</strong> supports some debug options specified in the command line, one it's very useful to determine the command being run.</p>

<pre><code>$ dump --debug UI_AUTOMATOR:True &gt; /dev/null
</code></pre>

<p>this command will print something like</p>

<pre><code>executing 'uiautomator dump --compressed /dev/tty &gt;/dev/null'
</code></pre>

<p>then this is the command you can run repeatedly to determine if the problem is in your device.</p>

<p>For example, copying the command printed before you can use <code>bash</code> to run</p>

<pre><code>for n in {0..299}; do echo $n; adb shell uiautomator dump --compressed /dev/tty \&gt;/dev/null &gt;/dev/null; done
</code></pre>

<p>and check if there's a memory leak or something fails on the device.</p>

<p>Regarding your question and as you can see from the command, dump data is not stored anywhere and only copied to the socket.
There are versions that require the data to be stored locally on the device but in such case the file used is overwritten every time.</p>
","android"
"38",6258935,"<p>TLS could be used to securely transmit data in a compatible way.</p>

<p><a href=""http://docs.python.org/dev/library/ssl.html#server-side-operation"" rel=""nofollow"">Python ssl server-side</a></p>

<p>If additionally you use http protocol for the communication then there are already high-level libraries that might hide all gory details from you; just provide client/server certificates and make appropriate requests. </p>

<p><a href=""http://stackoverflow.com/questions/995514/https-connection-android"">Https Connection Android</a></p>

<p>It might save you from reimplementing poorly many security features such as <a href=""http://vincent.bernat.im/en/blog/2011-ssl-perfect-forward-secrecy.html"" rel=""nofollow"">forward secrecy</a>.</p>
","android"
"39",12930266,"<p>I am not sure which version of CTS you are using, so I assume the version is <code>4.0.3_r3</code>.</p>

<p>You could execute the command <code>./cts-tradefed run cts --plan CTS</code> in one line.
However, the prompt still exist after finish the command.</p>

<p>According to <a href=""http://code.google.com/p/android/issues/detail?id=24267"" rel=""nofollow"">this issue</a>,
I think there are no simple ways to solve it.</p>

<p>Therefore, I just apply the patch in the above link, and execute the following command: </p>

<blockquote>
  <p><code>echo | ./cts-tradefed run cts --plan CTS</code></p>
</blockquote>
","android"
"40",23511495,"<p>First of all, use</p>

<pre><code>adb logcat
</code></pre>

<p>to see the package and the starting Activity name..
if you find these two for example package='pck.package' and activity = '.Main'
then what you should write in your code, is:</p>

<pre><code>package = 'pck.package'
activity = '.Main'
runComponent = package+'/'+activity
device.startActivity(component=runComponent)
</code></pre>

<p>in other words, you must use the package name as well in your code</p>

<p>Hope it helps</p>
","android"
"41",31102475,"<p>I don't think that kv lang supports exceptions. Move your code to your Python class:</p>

<pre><code>from kivy.app import App
from kivy.uix.floatlayout import FloatLayout
from kivy.lang import Builder

Builder.load_string(""""""
&lt;Test&gt;:
    Button:
        text: ""...""
        on_press: root.react()
"""""")

class Test(FloatLayout):
    def react(self):
        try:
            print(""first action"")
            print(""second action"")
        except:
            print(""there was an error"")

class TabbedPanelApp(App):
    def build(self):
        return Test()

if __name__ == '__main__':
    TabbedPanelApp().run()
</code></pre>

<p>Simply printing several times is easy:</p>

<pre><code>Builder.load_string(""""""
&lt;Test&gt;:
    Button:
        text: ""...""
        on_press:
            print(""first action"")
            print(""second action"")            
"""""")
</code></pre>
","android"
"42",22034959,"<p>Thanks to the extract of your file , I guess your raw file is formated as
width x height then the whole set of RGBA pixels (32 bits) (width x height times)
Here I see you get a 720x1280 image captured..</p>

<p>May the ImageMagick toolset help you to view/convert it in a more appropriate file format.
Here below a sample that may help you
(ImageMagick convert command, for osx see <a href=""http://cactuslab.com/imagemagick/"" rel=""nofollow"">http://cactuslab.com/imagemagick/</a> )</p>

<pre><code># skip header info  
dd if=screenshot.raw of=screenshot.rgba skip=12 bs=1
# convert rgba to png
convert -size 720x1280 -depth 8 screenshot.rgba screenshot.png
</code></pre>

<p>If it doesn't work you may try changing skip=12 by skip=8 and/or 720x1280 by 1280x720 ..</p>

<p>Hope that help</p>
","android"
"43",37502655,"<p>Try to login to play.google site and open any application. 
Do you, by any chance, have ""You don't have any devices"" error message? Instead of ""This app is compatible with your device"".</p>
","android"
"44",8030965,"<p>The PyBluez module works well in general and I've used it with SL4A with no problems. You may have better luck just using that and skipping the Java altogether.</p>

<p>PyBluez is not a pure Python module, so it has to be compiled, but this has been done and a recent version is available from the <a href=""http://code.google.com/p/android-python27/"" rel=""nofollow"">downloads</a> section of the Py4A site. It's this copy that I use personally, without any issues.</p>

<p>Just download a copy to your droid, open the Python4Android app, hit Import Modules, and select the PyBluez egg.</p>
","android"
"45",26462677,"<p>I'll suggest you to use the Android functions to iterate the directories and files. For example you create a new file, of course if you are making it in Java (and might be easier):</p>

<pre><code>File currentDir = new File(""/""); // ""/"" stands for root directory
File[] files = currentDir.listFiles(); // lists all files in the current directory, store them in the *files* array 
//you can supply as an argument a String[] array, with the file extensions if needed 
//(to show only .jpeg, .png, or only documents like .docx, .pdf)
//you can use Collections and Comparator classes to sort them
if(files != null &amp;&amp; files.length &gt; 0) { //check if it holds any files
        for(File f : files) {
            if(f.isHidden()) { 
                // don't add the hidden file to the list, or at your choice
                continue;
            } else {
            // add the file to the list
            fileList.add(f);
            }
        }
        Collections.sort(fileList, new FileComparator()); //
}
//you can also check if a specific *file* is file or directory with
file.isFile();
file.isDirectory();
</code></pre>

<p>You can use all this info about files to show them in a ListView or GridView, on a click on a specific item, you can update the <em>currentDir</em> and refresh the contents or open the file, etc.</p>

<p>Here is an example of a file chooser <a href=""http://www.dreamincode.net/forums/topic/190013-creating-simple-file-chooser/"" rel=""nofollow"">http://www.dreamincode.net/forums/topic/190013-creating-simple-file-chooser/</a></p>
","android"
"46",21483459,"<p>You're missing some steps in your view to fully enable CSRF. I'm assuming CSRF is the problem, as it throws 403s if not enabled correctly.</p>

<p><a href=""https://docs.djangoproject.com/en/dev/ref/contrib/csrf/"" rel=""nofollow"">https://docs.djangoproject.com/en/dev/ref/contrib/csrf/</a></p>
","android"
"47",4184792,"<pre><code>final MessageDigest mDigest = MessageDigest.getInstance(""SHA-224"");
byte[] messageDigest = mDigest.digest(toEncrypt.getBytes());
final BigInteger number = new BigInteger(1, messageDigest);
final String sha = number.toString(16);
final int diff = 32 - sha.length();
final StringBuilder finalSHA = new StringBuilder(32);
for (int i=0;i&lt;diff;i++) {
 finalSHA.append(""0"");
}
finalSHA.append(sha);
return finalSHA.toString();
</code></pre>
","android"
"48",13444534,"<p>Well if your end goal is to develop Web applications and host host them on your Android and since you had flask there why not give bottle.py a shot.  It's just one file that you copy into your sl4a scripts folder and voila. Bottle is minimalist and near similar to flask. No rooting or Unix environments required. </p>
","android"
"49",16867749,"<p>poof's answer is a good overview, but here are some notes on the various options:</p>

<p>Option 1: Have your Android get the picture and do a HTTP POST to a Python application running a framework such as Django.  It should be 1 line of code on Android, and only a few lines of code on Python (around your existing code).</p>

<p>The upside is that the low-level ""Glue"" is written for you, and it scales easily. The downside is that HTTP has some overhead.</p>

<p>Option 2: Have your Android talk a custom TCP protocol to a custom TCP application.</p>

<p>This is more work, so you should avoid it unless you need it. It will be more efficient and have lower latency, especially if you're sending multiple pictures. The response can also be much smaller without HTTP headers.</p>

<p>In either option, you don't have to send a JPEG, you could send any custom format you want (there is a trade-off between compression on Android and size of file).</p>

<blockquote>
  <p>I thought of using TCP Server, but I am new to socket programming and don't know how and where to start.</p>
</blockquote>

<p>Start where everyone else started - by reading a lot and playing a lot. You can find plenty of introductions to Socket programming in Python on the web. Go thru the tutorials, and start modifying them to see how they work.  Read up on TCP/IP itself -- there are a lot of dark corners (Nagel, fragmentation, slow start) that can affect how you write the app when you get to a low level.</p>
","android"
"50",32670001,"<p>The problem is that the android project and django project might be on seperate servers. So, the request fails due to CORS. For example, if you're using tastypie for django apis, then you've to set the CORS like this:</p>

<pre><code>class CORSResource(object):
""""""
Adds CORS headers to resources that subclass this.
""""""
def create_response(self, *args, **kwargs):
    response = super(CORSResource, self).create_response(*args, **kwargs)
    response['Access-Control-Allow-Origin'] = '*'
    response['Access-Control-Allow-Headers'] = 'Content-Type'
    return response

def method_check(self, request, allowed=None):
    if allowed is None:
        allowed = []

    request_method = request.method.lower()
    allows = ','.join(map(str.upper, allowed))

    if request_method == 'options':
        response = HttpResponse(allows)
        response['Access-Control-Allow-Origin'] = '*'
        response['Access-Control-Allow-Headers'] = 'Content-Type'
        response['Allow'] = allows
        raise ImmediateHttpResponse(response=response)

    if not request_method in allowed:
        response = http.HttpMethodNotAllowed(allows)
        response['Allow'] = allows
        raise ImmediateHttpResponse(response=response)
</code></pre>

<p>You've to add CORS headers as such to any thing that's cross domain. You can customize this depending on the framework and the methods you want to allow.</p>
","android"
"51",33944684,"<p>The error seems fairly explicit - install javac.</p>

<p>This is probably in a java related package of your distro's package manager. It probably has search functionality to find the one you want.</p>
","android"
"52",26559660,"<p>If your are building your HttpPostRequest well, and you only want to know how to attach JSON, here you are a possible solution for it:</p>

<pre><code>  StringEntity formEntity = new StringEntity(yourJsonObject.toString());
  yourPostRequest.setEntity(formEntity);
</code></pre>

<p>I hope this helps!</p>

<p>PS:In addition, let me recommend you the use of this component: </p>

<p><a href=""https://github.com/matessoftwaresolutions/AndroidHttpRestService"" rel=""nofollow"">https://github.com/matessoftwaresolutions/AndroidHttpRestService</a></p>

<p>I've used it in an Android app that is connecting to a python server API and it makes http request easier for your Android client.</p>
","android"
"53",19887836,"<p>Use 10.0.2.2:8080</p>

<p>because If you are running both server and emulator in you computer 127.0.0.1:(port) the local IP will refer to the emulator then you need another local IP for the server which will be automatically The 10.0.2.2</p>

<p>hope i clearified it well, glad i helped</p>
","android"
"54",31102475,"<p>I don't think that kv lang supports exceptions. Move your code to your Python class:</p>

<pre><code>from kivy.app import App
from kivy.uix.floatlayout import FloatLayout
from kivy.lang import Builder

Builder.load_string(""""""
&lt;Test&gt;:
    Button:
        text: ""...""
        on_press: root.react()
"""""")

class Test(FloatLayout):
    def react(self):
        try:
            print(""first action"")
            print(""second action"")
        except:
            print(""there was an error"")

class TabbedPanelApp(App):
    def build(self):
        return Test()

if __name__ == '__main__':
    TabbedPanelApp().run()
</code></pre>

<p>Simply printing several times is easy:</p>

<pre><code>Builder.load_string(""""""
&lt;Test&gt;:
    Button:
        text: ""...""
        on_press:
            print(""first action"")
            print(""second action"")            
"""""")
</code></pre>
","android"
"55",9045201,"<p>Run the script on your remote computer, and expose the list of installed software on HTTP, a good way to write this simple web app is to use flask and its development server to serve the list of installed software, then write a python script which uses the native android web interface to fetch the list and display it.</p>
","android"
"56",22624987,"<p>Android SDK are released more often that NDK. It happened more than once that if you use a too recent SDK, the NDK will not have the .h for it. Now i'm not sure this would be related to your issue at all.</p>
","android"
"57",31032186,"<p>Got it myself.
At the point, where the update should take place I splittet my function. To show you what I mean:</p>

<p><strong>Before</strong></p>

<pre><code>function():
    widget.text = ""new text""
    #update?!
    widget.text = ""old text again""
</code></pre>

<p><strong>After</strong></p>

<pre><code>function():
    widget.text = ""new text""
    Clock.schedule_once(functionend)

functionend():
    widget.text = ""old text again""
</code></pre>

<p>In case you don't understand my process, feel free to ask, and I'll explain.</p>
","android"
"58",29909600,"<p>readLine read IO need data end with \r\n , bluetooth send data need to add end tag with \r\n</p>
","android"
"59",32018291,"<p>Twilio Developer Evangelist here. You seem to be on the right path, and have it almost right.</p>

<p>All you need to do is change the following code snippet from:</p>

<pre><code>from_number = request.values.get('From', None)
if from_number in callers:
    message = callers[from_number] + "", follow these directions to get to your destination: ""
else:
    message = ""User, thanks for the message!""
</code></pre>

<p>To:</p>

<pre><code>from_number = request.values.get('From', None)
if from_number in callers:
    message = callers[from_number] + "", follow these directions to get to your destination: "" + request.values.get('Body', None)
else:
    message = ""User, thanks for the message!""
</code></pre>

<p>Notice how I've added <code>request.values.get('Body', None)</code> to it, so it picks up that variable and uses it when generating the TwiML. Let me know if that solves your problem.</p>
","android"
"60",16596653,"<p>The solution of this problem (and the problem itself explained) can be found at <a href=""http://dtmilano.blogspot.ca/2013/05/monkeyrunner-importerror-no-module.html"" rel=""nofollow"">http://dtmilano.blogspot.ca/2013/05/monkeyrunner-importerror-no-module.html</a>.</p>

<p>Basically, you have to replace <code>jython-2.5.3.jar</code> by <code>jython-standalone-2.5.3.jar</code>, at least until <strong>Android SDK Tools Rev. 22.0.1</strong> is out.</p>
","android"
"61",26016966,"<p>Regarding your list generation problem</p>

<pre><code>&gt;&gt;&gt; k = 3
&gt;&gt;&gt; p = 1
&gt;&gt;&gt; n = 2
&gt;&gt;&gt; roles = ['mafia']*k + ['detective']*p + ['innocent']*n
&gt;&gt;&gt; roles
['mafia', 'mafia', 'mafia', 'detective', 'innocent', 'innocent']
</code></pre>

<p>One method to randomly assign roles</p>

<pre><code>from random import shuffle
shuffle(roles)
names = ['bob', 'steve', 'tom', 'jon', 'alex', 'mike']
players = dict(zip(names,roles))

&gt;&gt;&gt; players
{'mike': 'innocent',
 'alex': 'mafia',
 'steve': 'mafia',
 'tom': 'mafia',
 'bob': 'detective',
 'jon': 'innocent'}
</code></pre>
","android"
"62",25896284,"<p>I'm using Fluidsynth to give me cross-platform MIDI output. It plays MIDI files with a SoundFont module for high quality audio. If you're happy with the LGPL licence, you can get Python bindings for it from pyFluidSynth (<a href=""https://code.google.com/p/pyfluidsynth"" rel=""nofollow"">https://code.google.com/p/pyfluidsynth</a>), but it's pretty straightforward to write your own bindings module using the standard Python ctypes module.</p>

<p>Normally, you would be expected to compile (and thus cross-compile) Fluidsynth from the supplied sources, however you can just take a pre-compiled version from another project, for instance MuseScore. This is what I'm doing for the moment, I'll switch to compiling Fluidsynth once (and if) the project I'm working on gets close to completion.</p>

<p>If you want to process MIDI files, e.g. to extract the lyrics, take a look at Mido (<a href=""https://mido.readthedocs.org/en/latest"" rel=""nofollow"">https://mido.readthedocs.org/en/latest</a>). I've found it very useful for reading/writing MIDI files.</p>
","android"
"63",31146021,"<p>I figured it out by myself. This answer is for future references.
What I did was, saved all the data that I got from that API(<em>which was already in JSON format</em>) into a <code>json</code> file.</p>

<p>To write in file <code>weather.json</code></p>

<pre><code>import json
from urllib import urlopen

url = urlopen('http://api.openweathermap.org/data/2.5/forecast/daily?q={}&amp;mode=json&amp;units={}'.format(getname,temp_type)).read()
#where getname is the name of city.
#and temp_type is either C(Celsius) or F(Fahrenheit)
result = json.loads(url)
out_file = open(""weather.json"",""w"")
json.dump(result,self.out_file, indent=4)
#indent = 4, just to make it easy to read.
out_file.close()
</code></pre>

<p>And to read from file <code>weather.json</code></p>

<pre><code>in_file = open(""weather.json"", ""r"")
result = json.load(self.in_file)
in_file.close()
</code></pre>

<p>And for the icons I used <code>requests</code> module and saved each icon with a unique name, then everytime the user did a new search or refresh the application then automatically the file would be updated and new icons would be downloaded and replaced with the existing ones.</p>

<pre><code>import requests
conditions_image1 = ""http://openweathermap.org/img/w/{}.png"".format(result['list'][1]['weather'][0]['icon'])
#or whatever be the name of your image
response1 = requests.get(conditions_image1)
if response1.status_code == 200:
    f = open(""./icons/wc1.png"", 'wb')
    f.write(response1.content)
    f.close()
</code></pre>

<p>And also as I am using <code>kivy</code>, So I would like to mention that you need to add <code>json</code> in <code>buildozer.spec</code> file (As you might have tried it in your PC first)</p>

<pre><code>source.include_exts = py,png,jpg,kv,atlas,json 
</code></pre>
","android"
"64",37193926,"<p>Well, I don't see <code>ScreenManager</code> which is basically what you get with <code>self.manager</code>(object), so...</p>

<p>No <code>ScreenManager</code> with Screens added either in python or kv like widgets(<code>add_widget()</code>), no <code>self.manager</code> inside any of the <code>Screens</code> - you can't access something that isn't there.</p>

<p>Add some class which will be a root for your Screens and make it <code>ScreenManager</code> + add Screens as children.</p>

<p><strong>Edit:</strong>
I was blind probably, but I didn't see <code>on_press=..</code> stuff. There is the problem, because you didn't assign the function to an event, rather <em>called</em> the function right when you put <code>('search')</code> at the end. (try do <code>self.parent</code> and you'll see)</p>

<p>Kivy events(at least ""on_"") catch the function, but not the parameters, not directly. That's why you need to use <code>partial</code></p>

<pre><code>from functools import partial
new_s.bind(on_press = partial(self.change_screen,'search'))
</code></pre>

<p>With this the error is gone, but some adapter binding jumps out which I really don't have a clue how to fix as I don't use it that much.</p>
","android"
"65",15527631,"<p>You are wanting to acquire a rather sensitive combination of information - user email (as identity), phone number, and location.</p>

<p>So firstly, you'll have to be <em>very</em> considerate about privacy issues for users, having a policy on how this information is stored and distributed and make it clear to users what they are allowing. I would suggest not storing any aggregate of this type of dataset in the client, in as much as possible.</p>

<p>For this purpose I would recommend using GAE storage as much as possible.</p>

<p>Your app querying a user's location shouldn't be too worrying, provided things are done over secure channels kept well.</p>

<p>What is worrysome is that that information only reaches an allowed source. i.e that only a mutual contact can request this information.</p>

<p>I'd suggest that for each user, a whitelist of allowed contacts would be best. For each user, have a secret random uuid associated (that never goes out to any client) on GAE. A user registering for your service would create this ID. The whitelist would then consist of a list of secret IDs.</p>

<p>A process could then be-</p>

<ol>
<li>A makes request for B's location</li>
<li>request is forwarded to GAE app.</li>
<li>GAE app verifies that A's secret ID is on B's whitelist</li>
<li>The app then queries for B's location</li>
<li>Once the app retrieves this information, it then verifies that it is only sending this information to the user identified by A's secret ID</li>
<li>The info is then sent securely to A's client</li>
</ol>
","android"
"66",26967574,"<p>I would prefer to make this a comment but that requires just more rep than I currently have.</p>

<p>Do you mean which one of the available slides is frontmost? Carousel has an index property for that: <a href=""http://kivy.org/docs/api-kivy.uix.carousel.html#kivy.uix.carousel.Carousel.index"" rel=""nofollow"">Kivy Carousel Docs — </a><a href=""http://kivy.org/docs/api-kivy.uix.carousel.html#kivy.uix.carousel.Carousel.index"" rel=""nofollow"">http://kivy.org/docs/api-kivy.uix.carousel.html#kivy.uix.carousel.Carousel.index</a></p>

<p>If you mean how much the current frontmost slide is offset while animating I don't think there's a way to do that easily but it could probably be faked using min_move, scroll_distance, and the touch event leading to the Carousel change.</p>
","android"
"67",22940968,"<p>You may want to check out <a href=""http://www.ttmsolutions.com/restjee"" rel=""nofollow"">restjee</a>. It allows you to define and implement RESTful data access APIs without having to write any server side code. Works with just about any database. </p>
","android"
"68",10938261,"<p>Download the tweepy .egg for Python 2.6 here : <a href=""https://pypi.python.org/pypi/tweepy/1.7.1"" rel=""nofollow"">https://pypi.python.org/pypi/tweepy/1.7.1</a> Make sure it is in the Downloads folder in your SD card. Launch the Python for Android app and select the ""import module"" option. Select the tweepy .egg file you just downloaded. It should work fine.</p>
","android"
"69",19310554,"<p>I just tried making something similar in SDK and I found out that you should pass in the bundle an integer too, key is ""org.zooper.zw.tasker.var.extra.INT_VERSION_CODE"" with value ""1"".</p>

<p>Don't know how to do this in Python, but this is my snippet in Java (it works, I tested it)</p>

<pre><code>public static final String INTENT_ACTION = ""org.zooper.zw.action.TASKERVAR"";
public static final String BUNDLE_STRING_NAME =  ""org.zooper.zw.tasker.var.extra.STRING_VAR"";
public static final String BUNDLE_STRING_VALUE = ""org.zooper.zw.tasker.var.extra.STRING_TEXT"";
public static final String BUNDLE_VERSION_CODE = ""org.zooper.zw.tasker.var.extra.INT_VERSION_CODE"";
public static final String BUNDLE_NAME = ""org.zooper.zw.tasker.var.extra.BUNDLE"";
public static final String VARIABLE_NAME = ""test"";

public void sendUpdate() {
   Intent in = new Intent(INTENT_ACTION);
   Bundle b = new Bundle();
   String value = ""Final variable value"";
   b.putInt(BUNDLE_VERSION_CODE, 1);
   b.putString(BUNDLE_STRING_NAME, VARIABLE_NAME);
   b.putString(BUNDLE_STRING_VALUE, value);
   in.putExtra(BUNDLE_NAME, b);
   sendBroadcast(in);
}
</code></pre>

<p>This works for me. Without the <code>b.putInt(BUNDLE_VERSION_CODE, 1)</code> it didn't work. I know it's a old question, but I hope to help.</p>
","android"
"70",26462677,"<p>I'll suggest you to use the Android functions to iterate the directories and files. For example you create a new file, of course if you are making it in Java (and might be easier):</p>

<pre><code>File currentDir = new File(""/""); // ""/"" stands for root directory
File[] files = currentDir.listFiles(); // lists all files in the current directory, store them in the *files* array 
//you can supply as an argument a String[] array, with the file extensions if needed 
//(to show only .jpeg, .png, or only documents like .docx, .pdf)
//you can use Collections and Comparator classes to sort them
if(files != null &amp;&amp; files.length &gt; 0) { //check if it holds any files
        for(File f : files) {
            if(f.isHidden()) { 
                // don't add the hidden file to the list, or at your choice
                continue;
            } else {
            // add the file to the list
            fileList.add(f);
            }
        }
        Collections.sort(fileList, new FileComparator()); //
}
//you can also check if a specific *file* is file or directory with
file.isFile();
file.isDirectory();
</code></pre>

<p>You can use all this info about files to show them in a ListView or GridView, on a click on a specific item, you can update the <em>currentDir</em> and refresh the contents or open the file, etc.</p>

<p>Here is an example of a file chooser <a href=""http://www.dreamincode.net/forums/topic/190013-creating-simple-file-chooser/"" rel=""nofollow"">http://www.dreamincode.net/forums/topic/190013-creating-simple-file-chooser/</a></p>
","android"
"71",9958033,"<p>I had been on the lookut for Python on iOS for sometime. About 2-months ago, one one released to the iTunes app store -- <a href=""http://pythonforios.com/"" rel=""nofollow"">http://pythonforios.com/</a> and it is fantastic!  It includes the complete set of Python 2.7.2 documentation -- which alone is worth the $3 price.</p>

<p>It's a bit of a challenge to code any serious apps (which I suspect is the result of the developer having to comply w/ Apple's app guidelines), but it is a perfect place to test ideas from a train or airport (when you are without a laptop).</p>

<p>1 caveat -- I've only tried it on an iPad. It could be a bit cramped screen real-estate on an iphone.</p>
","android"
"72",21057647,"<p>This screen is part of the python-for-android process, not something you can directly modify in your kivy app.</p>

<p>As you commented, you can change what image is displayed with the <code>--presplash</code> option for build.py. If using buildozer, you would instead set the <code>presplash.filename</code> token in your buildozer.spec file.</p>

<p>It might be possible to modify the process somehow by delving into python-for-android, but I've never seen this discussed and I have very little idea of whether there are any real changes you can make. The problem is that some loading period is essential in between the java app initialising and the python/kivy app being ready do display anything. As far as I know, the best you can do in your python file is to perform as little computation as possible in your <code>build</code> method.</p>
","android"
"73",17159057,"<pre><code>cts_tradefed_script = ""./android-cts/tools/cts-tradefed""
process = subprocess.Popen([cts_tradefed_script + "" "" + serialno], shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
</code></pre>

<p>Edit: script was not necessary.  Just enter everything as a concatenated String.</p>
","android"
"74",15622779,"<p>First.  Once you have your projects setup correctly then the same wizard that generated your client library will copy it to your Android project and extra the source files.  then you will find the packages you need in the endpoint-libs folders in your project explorer.  Take a look at <a href=""http://stackoverflow.com/a/15442841/150016"">this post</a> for tips on getting that working.</p>

<p>Then you invoke an endpoint using Android code like this:</p>

<pre><code>final HttpTransport transport = AndroidHttp.newCompatibleTransport();
JsonFactory jsonFactory = new JacksonFactory();

endpointname.Builder builder = new endpointname.Builder( transport, jsonFactory, null );    
builder.setApplicationName( appName );

endpointname service = builder.build();

try {
   response = service.methodName( parameters ).execute();
} catch (IOException e) {
   Log.e(...);
}
</code></pre>
","android"
"75",9451214,"<p>PhoneGap: Simply put your HTML(5), JavaScript and CSS code. You can use 3rd party JavaScript libraries like jQuery, MooTools, etc. You need to code or use libraries to get native feel/UI look. Nothing much different than straight way. PhoneGap just gives you additional mobile features and events which you can bring native features which you can use in your JavaScript code, like accelerometer orientation, contact list, camera, etc.</p>

<p>Titanium Mobile: It has custom JavaScript API which your code is compiled to ""native"" code. You can also use WebView UI component to include your HTML(5), JavaScript and CSS code into application. You can bridge native API to your JavaScript code running in WebView with firing custom events (see Titanium.App.fireEvent and Titanium.UI.WebView.evalJS methods in documents).</p>
","android"
"76",31029641,"<p>In case you need to schedule a repeated activity in a loop, you can use <code>Clock.schedule_interval()</code> to call a function on a regular schedule:</p>

<pre><code>def my_repeated_function(data):
    print (""My function called."")

Clock.schedule_interval(my_repeated_function, 1.0 / 30) # no brackets on function reference 
                                                       # call it 30 times per second
</code></pre>

<p>There is a lot more information on how to schedule events on a regular, conditional or one-time basis with Kivy's event loop <a href=""http://kivy.org/docs/guide/events.html"" rel=""nofollow"">here</a>.</p>
","android"
"77",7657296,"<p>You could try using Sockets to communicate. <a href=""http://download.oracle.com/javase/tutorial/networking/sockets/clientServer.html"" rel=""nofollow"">http://download.oracle.com/javase/tutorial/networking/sockets/clientServer.html</a></p>
","android"
"78",36001080,"<p>if you want to set relative path that work on all other fellow system without changing again and again then set ndk root path in such a way.</p>

<p>NDK_ROOT=""$APP_ROOT/../your ndk name""</p>

<p>your ndk is placed one directory behind the proj.android file.</p>
","android"
"79",26098928,"<p>Try using xpath like this:</p>

<pre><code>//android.widget.DatePicker[@index='0']//android.widget.LinearLayout[@index='1']/android.widget.EditText[@text='example']
</code></pre>

<p>If you add proper indexes or other properties, it should work.</p>
","android"
"80",35417392,"<p>Or You can also try to do</p>

<pre><code>from appium.webdriver.common.touch_action import TouchAction
...
action = TouchAction(self.driver)
action.press(start_element).move_to(end_element).release().perform()
</code></pre>

<p>Actually, that's how scroll() function works. Once, I had an issue with self.driver.scroll(), so this can also be a workaround.</p>
","android"
"81",11823007,"<p>it looks like the script assumes adb is in your path. add the platform-tools sdk dir to your path and it should work.</p>
","android"
"82",26906764,"<p>I saw a link in the doc <a href=""http://I%20saw%20a%20link%20in%20the%20doc%20http://www.mithril.com.au/android/doc/UiFacade.html#dialogCreateInput"">dialogCreateInput</a> that points to the possible values of inputType <a href=""http://developer.android.com/reference/android/R.styleable.html#TextView_inputType"" rel=""nofollow"">TextView_inputType</a>. Did you try the value ""numberSigned"" ?</p>
","android"
"83",28742716,"<p>Yes, you can use an android device to request information from your web service(which can access the data) and send in xml or json format for your device.</p>
","android"
"84",30801879,"<p>Yes,try the 'driver.back()', it simulates the system 'back' function.</p>
","android"
"85",37490599,"<p>On Windows, you need to call Python explicitly.  Change</p>

<pre><code>android.py installsdk
</code></pre>

<p>to</p>

<pre><code>python android.py installsdk
</code></pre>
","android"
"86",20770035,"<p>Probably you need to install 32 bit libraries.
For example, I needed to install <code>lib32-glibc</code>,<code>lib32-libstdc++5</code> and <code>lib32-zlib</code> from <code>[multilib]</code> on Arch Linux.</p>
","android"
"87",19735768,"<blockquote>
  <p>I'm using windows right now and I want to ask is there any good tools to package a kivy app for android in windows or I have t use Linux distributions?</p>
</blockquote>

<p>Unfortunately the build tools don't work on windows right now. I think there are technical barriers to do with cross compilation.</p>

<p>Have you seen the kivy virtual machine, available at <a href=""http://kivy.org/#download"">http://kivy.org/#download</a> ? This is an Ubuntu linux image that already has the tools installed and set up. You should be able to run it in virtualbox on any recentish machine.</p>

<p>There's also an online interface to the android component of the <a href=""https://github.com/kivy/buildozer"">buildozer</a> tool (which can manage the entire android or ios build process, but I think doesn't work on windows at the moment), available at <a href=""http://android.kivy.org/"">http://android.kivy.org/</a> . You can upload your project there to have the apk built. I haven't tried this service, but it should work.</p>

<blockquote>
  <p>And also is there anyway to use kivy for python 3.3.2?</p>
</blockquote>

<p>The next release of kivy will support python 3, and the github master branch at <a href=""https://github.com/kivy/kivy"">https://github.com/kivy/kivy</a> should be mostly (if not all) working.</p>
","android"
"88",6596568,"<p>I recommend putting the NLP code into web services on a Linux server and calling those from android.</p>

<p>This is quite straight forward in a framework like django.</p>
","android"
"89",22530489,"<p>I am in the same boat as you,  we are developing embedded system on ARM CPU.  Currently the system is written in Python on custom built linux distro from hardware vendor.</p>

<p>We have been looking at Android and Ubuntu Touch for a few months.  So far we didn't get any decision yet.  But here what we found out from our incomplete analysis:</p>

<ol>
<li><p>Android is quite heavy system, that also brings JVM into the mix.  So you HW and memory requirements will significantly increase.  </p></li>
<li><p>Android likes to take over the entire system,  so sometimes you might be fighting with Android.</p></li>
<li><p>Android has very good IPC mechanisms,  not available on mainstream linux kernel,  such as Binder.  Of course you can port it to another system. But this would be considerable effort.</p></li>
<li><p>Android has very rich GUI interface, also with things like NDK view you are not confined into the JDK box.</p></li>
<li><p>Android doesn't use standard GNU C library,  it uses something called BioniC which is a port of C library from BSD.  Usually it is not a problem for most software, but if you are using some linux specific low level features, like working with serial ports you will need to tweak your code.  See what I had to do to port Java RXTX library to android <a href=""https://github.com/vladistan/gnu.io.android"" rel=""nofollow"">https://github.com/vladistan/gnu.io.android</a></p></li>
<li><p>You can find a lot of Android developers out there who will do basic GUI programming for you, while you are concentrating on your app specific stuff.  Interfacing between GUI and low level things is quite easy using binder.  And of course you can bring in whatever mecahnism you want via NDK.</p></li>
</ol>

<p>We have considered Ubuntu Touch.  But so far it doesn't seem to be mature enough.</p>
","android"
"90",10839879,"<h1>1. Start Server</h1>

<h2>On Device</h2>

<p>First, connect your device with USB. Then for remote debugging, you need to start a server on your device:</p>

<pre><code>SL4A -&gt; Interpreters -&gt; Menu -&gt; Start Server
</code></pre>

<p>The <em>private</em> one is preferable.</p>

<p>Then you can look up the port for the server in the Android notification area (with SL4A r5 you can specify a fixed port in settings).</p>

<h2>From PC</h2>

<p>Alternatively, you can start a server from the PC with <code>adb</code> using a specific port (r5 required for setting the port):</p>

<pre><code>$ adb shell am start -a com.googlecode.android_scripting.action.LAUNCH_SERVER \
  -n com.googlecode.android_scripting/.activity.ScriptingLayerServiceLauncher \
  --ei com.googlecode.android_scripting.extra.USE_SERVICE_PORT 51943
</code></pre>

<p><br/></p>

<h1>2. Specify connection</h1>

<p>Now you need to forward your port with adb (assuming the looked up value is 51943):</p>

<pre><code>$ adb forward tcp:51943 tcp:51943
$ export AP_PORT=51943
</code></pre>

<p><br/></p>

<h1>3. Start script</h1>

<p>Afterwards you should be able to run your script locally:</p>

<pre><code>$ python my_script.py
</code></pre>

<p><br/></p>

<h1>Wifi connection</h1>

<p>If you want to go via wifi, you don't need to forward your port with <code>adb</code>. Instead you have to use a <em>public</em> server and specify your host additionally:</p>

<pre><code>$ export AP_HOST=192.168.0.100 
</code></pre>

<p><br/></p>

<h1>References</h1>

<p>For more help see the <a href=""http://code.google.com/p/android-scripting/wiki/RemoteControl"">Wiki page addressing this topic</a>.</p>
","android"
"91",12281134,"<p>I couldn't reproduce your error while debugging your code in PyDev. However, I found a whole host of errors I had to fix because the code would even execute. After fixing them the code ran fine.</p>

<p>First, your error states that the ""handler"" in your <code>self.Bind(wx.EVT_TASKBAR_LEFT_DOWN, self.on_left_down)</code> call is <code>None</code>. In this case, it means <code>self.on_left_down</code> is <code>None</code>. However, we can see that there is a function <code>on_left_down(self, event)</code>, so that was my first hint that something was wrong with your code. The second hint was that the stack trace seemed to include that <code>Bind()</code> call as part of the line <code>self.SetIcon(self.off)</code>, which made no sense.</p>

<p>And that's when I noticed that your indentation was horrible. In languages like Java, everything between the <code>{}</code> is part of a function and thus indentation is just to make your code easier to read. In Python indentation <strong>much more important</strong>. It is how you denote something as being part of a function or not. How do you tell if a line of code is still part of a loop? You check the indentation. <code>__init__()</code>, <code>mount()</code>, and <code>unmount()</code> all contain lines that are indented too far left, thus are running even before <code>__init__()</code> has run, possibly leading to these <code>None</code> values.</p>

<p>Second, you must be using an old tutorial as <code>wx.PySimpleApp</code> is deprecated. I had to write my own simple <code>wx.App</code> before the code would execute (my entire <code>wx.App</code> was only 4 lines long including declarations. I'm sure you can find a simple example of how to do this yourself).</p>

<p>Finally, a plea: Please never ever <strong>ever</strong> blindly use code you found in a tutorial, especially if you aren't familiar in the language. You said you aren't a python programmer, so why did you choose wxPython? Do you know C? wxPython is based on wxWidgets, a GUI toolkit for C. Do you know Java? There are many GUI toolkits for Java. I'm sure you can find something that does what you need in a language you understand. By putting code that you do not understand into your application you are really just putting in a new piece that might fail and if it does then you have no way of fixing it.</p>

<p>I don't know you and I don't know your expertise so I'm giving you benefit of the doubt <em>this time</em> but I will need to see a lot more effort on your part next time or I won't post an answer.</p>

<p>Best of luck.</p>
","android"
"92",6430703,"<p>The easiest way to do this would be to cut out your custom socket solution and replace it with a tiny web server. Obviously the task isn't going to have serious latency if the user is going to be seeing the result on a map in the near future, so HTTP is fine. Just make an http post request to the server, with longitude and latitude as input values in the post body. The response from the HTTP server should be another longitude and latitude, I am guessing. So you can receive those in the response, in JSON, would be nice: </p>

<pre><code>{ ""longitude"" : 40.0, ""latitude"" : 31 }
</code></pre>

<p>Would be your response. You can parse that with JSONObject and you can use the Apache libraries to make your server requests. Once it is requested and parsed, you can pack the data into the extras of an Intent, and fire it off to the Activity.</p>
","android"
"93",29825999,"<p>If it works by using <code>click()</code> then use it. i don't see any reason to use action class for just <code>click()</code>.</p>
","android"
"94",33427374,"<p>Because you opened <code>f</code> in read mode(<code>r</code>). If you don't select the mode, the default mode is <code>r</code> mode.</p>

<p>To write to the file you should use <code>w</code> mode like this:</p>

<pre><code>f = open(""/Users/log.txt"", 'w')
subprocess.call([""adb logcat""], stdout=f)
f.close()

f = open(""/Users/log.txt"")
f_read = f.read()
print f_read
f.close()
</code></pre>

<p>And use <code>with</code> to auto close the file would be more simple:</p>

<pre><code>with open(""/Users/log.txt"", 'w') as f:
    subprocess.call([""adb logcat""], stdout=f)

with open(""/Users/log.txt"") as f:
    f_read = f.read()

print f_read
</code></pre>
","android"
"95",29334342,"<p>This is probably possible, you will need to look up the normal android api way to do it then access it directly with <a href=""https://pyjnius.readthedocs.org/en/latest/"" rel=""nofollow"">pyjnius</a>.</p>
","android"
"96",31743261,"<p>Thank you very much, I did it!
I did it like this:</p>

<ol>
<li><p>I generated an release apk with </p>

<p>buildozer android release</p></li>
</ol>

<p>2.Than I created a keystore </p>

<ol start=""3"">
<li>Than I found out my alias name with: <code>keytool -keystore My1Key.keystore -list -v</code></li>
</ol>

<p>The output should look like this:</p>

<pre><code>Keystore-Typ: JKS
Keystore-Provider: SUN

Keystore enthält 1 Eintrag

Aliasname: m1k
Erstellungsdatum: 31.07.2015
Eintragstyp: PrivateKeyEntry
Zertifikatskettenlänge: 1
Zertifikat[1]:
</code></pre>

<p>In my case, the aliasname was m1k</p>

<ol start=""4"">
<li>Than I generated signt my apk file with:</li>
</ol>

<p><code>jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore ./keystores/My1Key.keystore ./keystores/LieDedector-1.2.0-release-unsigned.apk m1k</code></p>

<p>(I had both my apk and my keystore in the <code>keystores</code> direktory, my apk was called <code>LieDedector-1.2.0-release-unsigned.apk</code> my keystore <code>My1Key.keystore</code> and the aliasname was <code>m1k</code>)</p>

<p>I hope this helps someone :)</p>
","android"
"97",17109575,"<p>You need to use the UIFacade to add items to menus, which will allow you to set up the events. You use the Events Facade to handle them.</p>
","android"
"98",24259692,"<p>By default, <code>oscApi.listen</code> listen only on <code>127.0.0.1</code>. If you want to receive message from everyone, you need to listen to <code>0.0.0.0</code>:</p>

<pre><code>oscid = oscAPI.listen(ipAddr='0.0.0.0', port=8889)
</code></pre>
","android"
"99",25895714,"<p>I think there is a problem with your project import. Import your whole <code>TestGame</code> project, not just <code>pro.android</code>.</p>
","android"
"100",18987255,"<p>this problem is causing by PATH. adb path should put the end of the other path.</p>

<p>for example:</p>

<blockquote>
  <p>$ sudo gedit /etc/environment;</p>
  
  <p>PATH=""...:~/softAddr/adt-bundle-linux-x86_64-20140624/sdk/platform-tools:~/softAddr/adt-bundle-linux-x86_64-20140624/sdk/tools""</p>
</blockquote>

<p>not:</p>

<blockquote>
  <p>PATH=""~/softAddr/adt-bundle-linux-x86_64-20140624/sdk/platform-tools:~/softAddr/adt-bundle-linux-x86_64-20140624/sdk/tools:...""</p>
</blockquote>
","android"
"101",4396408,"<p><a href=""http://android.git.kernel.org/?p=platform/sdk.git;a=blob;f=monkeyrunner/scripts/help.py;h=ebc6c10e2881f1f7ad661aa26a3f54e39cce7422;hb=HEAD"" rel=""nofollow"">http://android.git.kernel.org/?p=platform/sdk.git;a=blob;f=monkeyrunner/scripts/help.py;h=ebc6c10e2881f1f7ad661aa26a3f54e39cce7422;hb=HEAD</a></p>

<p>I believe the documentation on the website starts from that script, but I'm pretty sure somebody edits it a bit afterwards as well.</p>
","android"
"102",27450322,"<p>After putting bottle.py in the root directory and deploying it to GAE, the following code should work (template, static_file etc. will be probably useful for further development of the app so I am leaving them):</p>

<pre><code>from bottle import route,run,template, view, request,response
from bottle import static_file
from bottle import Bottle
from bottle import default_app
from bottle import url

@route('/login')
def getHandlerLogin():
    return ""&lt;h1&gt;Hello world&lt;/h1&gt;""    

app=default_app()
</code></pre>

<p>Using bottle with GAE is not at all difficult, but in the long run it might be easier to use webapp2.</p>
","android"
"103",39903258,"<p>You have a problem with your while loop in your python code</p>

<pre><code>i = True
while(i):
    print ""Listening...\n""
    packet, client = server.recvfrom(buffer_size)

    #Convert packet to numpy array
    signal = np.fromstring(packet, dtype=np.int16)    

    i=False
server.close()
</code></pre>

<p>This will enter the loop, since <code>i == True</code>, then go through one iteration, and set <code>i = False</code> at the end of the first iteration, which will cause the loop to finish.</p>
","android"
"104",12102719,"<p>I don't think it matters where you unpack it to.
The point is that I launch the avd:</p>

<pre><code>D:\Temp\1Mobile\Installs\adt-bundle-windows-x86-20130219\sdk\tools&gt;emulator -avd
 AVD_for_Nexus_S1 -no-audio -no-boot-anim -scale .8
</code></pre>

<p>Then I run the following commands (one at a time) to get the AVD's name, and register webdriver to it...</p>

<pre><code>cd D:\Temp\1Mobile\Installs\adt-bundle-windows-x86-20130219\sdk\platform-tools
adb devices
adb -s (AVD_NAME) -e install -r android-server.apk
adb -s (AVD_NAME) shell am start -a android.intent.action.MAIN -n org.openqa.selenium.android.app/.MainActivity
adb -s (AVD_NAME) forward tcp:8080 tcp:8080
</code></pre>

<p>Then in your test.py file you want something like this (so it knows where to send commands to):</p>

<pre><code> def setUp(self):
        #self.driver = webdriver.Firefox()
        self.driver = webdriver.Remote(""http://127.0.0.1:8080/wd/hub"",desired_capabilities={""browserName"": ""android""})
</code></pre>

<p>HTH,
Sam</p>
","android"
"105",9365390,"<p>Ok I solved the problem, It seems my android default mail app writes content disposition for everything.</p>

<p>And the file name was all wicked as well. </p>

<p>So I solved the problem with (Since I'm only interested in media attachments):</p>

<pre><code>from email.header import decode_header
    def get_attachments(email_message_instance):
        attachments = []
        for part in email_message_instance.walk():

            if part.get_content_maintype() not in ['image', 'video', 'audio']:
                continue

            if part.get('Content-Disposition') is None:
                continue

            data = part.get_payload(decode=True)
            if not data:
                continue

            filename = part.get_filename()      
            filename =  u' '.join(w.decode(e or 'ascii') for w,e in decode_header(filename))        
            attachments.append((filename, data))

        return attachments
</code></pre>
","android"
"106",24219287,"<p>Don't write file name in destination path.</p>

<p>write in specific command like this:</p>

<p>adb pull    </p>

<p>for example :</p>

<p><strong>adb pull /sdcard/pictures c:/users/intel1/desktop/newfolder</strong></p>
","android"
"107",10026036,"<p>You need to set the environment variable in vim's environment. Use:</p>

<pre><code>:let $AP_PORT=9999
</code></pre>

<p>to set it - this will be inherited by the python sub-process you're spawning.</p>
","android"
"108",29208984,"<p><strong>I have Modified code here take a look</strong>   </p>

<pre><code>public class test extends Activity {
private WebView wv;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.test);
    wv = (WebView) findViewById(R.id.wv);
    String s = ""&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt; &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Saulify&amp;lt;/title&amp;gt; &amp;lt;!-- All the Favicons... --&amp;gt; &amp;lt;link rel=&amp;quot;shortcut icon&amp;quot; href=&amp;quot;/static/favicon/favicon.ico&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;apple-touch-icon&amp;quot; sizes=&amp;quot;57x57&amp;quot; href=&amp;quot;/static/favicon/apple-touch-icon-57x57.png&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;apple-touch-icon&amp;quot; sizes=&amp;quot;114x114&amp;quot; href=&amp;quot;/static/favicon/apple-touch-icon-114x114.png&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;apple-touch-icon&amp;quot; sizes=&amp;quot;72x72&amp;quot; href=&amp;quot;/static/favicon/apple-touch-icon-72x72.png&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;apple-touch-icon&amp;quot; sizes=&amp;quot;144x144&amp;quot; href=&amp;quot;/static/favicon/apple-touch-icon-144x144.png&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;apple-touch-icon&amp;quot; sizes=&amp;quot;60x60&amp;quot; href=&amp;quot;/static/favicon/apple-touch-icon-60x60.png&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;apple-touch-icon&amp;quot; sizes=&amp;quot;120x120&amp;quot; href=&amp;quot;/static/favicon/apple-touch-icon-120x120.png&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;apple-touch-icon&amp;quot; sizes=&amp;quot;76x76&amp;quot; href=&amp;quot;/static/favicon/apple-touch-icon-76x76.png&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;apple-touch-icon&amp;quot; sizes=&amp;quot;152x152&amp;quot; href=&amp;quot;/static/favicon/apple-touch-icon-152x152.png&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;apple-touch-icon&amp;quot; sizes=&amp;quot;180x180&amp;quot; href=&amp;quot;/static/favicon/apple-touch-icon-180x180.png&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;icon&amp;quot; type=&amp;quot;image/png&amp;quot; href=&amp;quot;/static/favicon/favicon-192x192.png&amp;quot; sizes=&amp;quot;192x192&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;icon&amp;quot; type=&amp;quot;image/png&amp;quot; href=&amp;quot;/static/favicon/favicon-160x160.png&amp;quot; sizes=&amp;quot;160x160&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;icon&amp;quot; type=&amp;quot;image/png&amp;quot; href=&amp;quot;/static/favicon/favicon-96x96.png&amp;quot; sizes=&amp;quot;96x96&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;icon&amp;quot; type=&amp;quot;image/png&amp;quot; href=&amp;quot;/static/favicon/favicon-16x16.png&amp;quot; sizes=&amp;quot;16x16&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;icon&amp;quot; type=&amp;quot;image/png&amp;quot; href=&amp;quot;/static/favicon/favicon-32x32.png&amp;quot; sizes=&amp;quot;32x32&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;msapplication-TileColor&amp;quot; content=&amp;quot;#da532c&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;msapplication-TileImage&amp;quot; content=&amp;quot;/static/favicon/mstile-144x144.png&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;msapplication-config&amp;quot; content=&amp;quot;/static/favicon/browserconfig.xml&amp;quot;&amp;gt; &amp;lt;!-- External CSS --&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css&amp;quot;&amp;gt; &amp;lt;!-- External Fonts --&amp;gt; &amp;lt;link href=&amp;quot;//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt; &amp;lt;link href=&amp;#x27;//fonts.googleapis.com/css?family=Open+Sans:300,600&amp;#x27; rel=&amp;#x27;stylesheet&amp;#x27; type=&amp;#x27;text/css&amp;#x27;&amp;gt; &amp;lt;link href=&amp;#x27;//fonts.googleapis.com/css?family=Lora:400,700&amp;#x27; rel=&amp;#x27;stylesheet&amp;#x27; type=&amp;#x27;text/css&amp;#x27;&amp;gt; &amp;lt;!--[if lt IE 9]&amp;gt; &amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.2/html5shiv.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/respond.js/1.4.2/respond.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;![endif]--&amp;gt; &amp;lt;!-- Site CSS --&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;/static/css/style.css&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;/static/css/glyphicon.css&amp;quot;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;quot;container article-page&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;col-md-8 col-md-offset-2&amp;quot;&amp;gt; &amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;http://www.huffingtonpost.com/2015/03/22/ted-cruz-climate-change_n_6919002.html&amp;quot;&amp;gt;Gov. Jerry Brown Says Ted Cruz Is &amp;amp;#39;Absolutely Unfit&amp;amp;#39; To Run For Office Because Of Climate Change Views&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt; &amp;lt;h4&amp;gt;Sam Levine&amp;lt;/h4&amp;gt; &amp;lt;div class=&amp;quot;article&amp;quot;&amp;gt; &amp;lt;p&amp;gt;California Gov. Jerry Brown (D) said on Sunday that Texas Sen. Ted Cruz (R-Texas) is &amp;quot;absolutely unfit to be running for office&amp;quot; because of his position on climate change.&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;&amp;quot;I just came back from New Hampshire, where there&amp;#x27;s snow and ice everywhere. My view on this is simple: Debates on this should follow science and should follow data, and many of the alarmists on global warming, they have a problem because the science doesn&amp;#x27;t back them up,&amp;quot; Cruz &amp;lt;a href=&amp;quot;https://www.youtube.com/watch?v=m0UJ_Sc0Udk&amp;quot;&amp;gt;said&amp;lt;/a&amp;gt; on &amp;quot;Late Night with Seth Meyers&amp;quot; last week.&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;To back up his claim, Cruz cited satellite data that has shown a lack of significant warming over the last 17 years. But Cruz&amp;#x27;s reasoning &amp;lt;a href=&amp;quot;http://www.politifact.com/truth-o-meter/statements/2015/mar/20 /ted-cruz/ted-cruzs-worlds-fire-not-last-17-years/&amp;quot;&amp;gt;has been debunked by Politifact&amp;lt;/a&amp;gt;, which has shown that scientists have ample evidence to believe that the climate will continue to warm.&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;&amp;quot;What he said is absolutely false,” Brown said on &amp;lt;a href=&amp;quot;http://www.nbcnews.com/meet-the-press/california-governor-ted-cruz- unfit-be-running-n328046&amp;quot;&amp;gt;NBC&amp;#x27;s &amp;quot;Meet the Press.&amp;quot;&amp;lt;/a&amp;gt; He added that &amp;lt;a href=&amp;quot;http://climate.nasa.gov/scientific-consensus/&amp;quot;&amp;gt;over 90 percent&amp;lt;/a&amp;gt; of scientists who study the climate agree that climate change is caused by human activity. &amp;quot;That man betokens such a level of ignorance and a direct falsification of existing scientific data. It&amp;#x27;s shocking, and I think that man has rendered himself absolutely unfit to be running for office,&amp;quot; Brown said.&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;Brown added that climate change has &amp;lt;a href=&amp;quot;http://www.huffingtonpost.com/2015/03/06/california-drought-february- record_n_6820704.html?utm_hp_ref=california-drought&amp;quot;&amp;gt;caused droughts in his state&amp;lt;/a&amp;gt;, as well as severe cold and storms on the east coast.&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;While Cruz may have seen snow and ice everywhere in New Hampshire, data shows that the country is actually experiencing a &amp;lt;a href=&amp;quot;http://www.huffingtonpost.com/2015/02/19/cold-weather- winter_n_6713104.html&amp;quot;&amp;gt;warmer than average&amp;lt;/a&amp;gt; winter.&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;Brown’s criticism of Cruz comes one day before the Texas senator is set to announce a &amp;lt;a href=&amp;quot;http://www.huffingtonpost.com/2015/03/22 /ted-cruz-2016_n_6917824.html&amp;quot;&amp;gt;presidential campaign&amp;lt;/a&amp;gt;. &amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;original&amp;quot;&amp;gt; &amp;lt;a href=&amp;quot;http://www.huffingtonpost.com/2015/03/22/ted-cruz-climate-change_n_6919002.html&amp;quot;&amp;gt;VIEW ORIGINAL&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script src=&amp;quot;//code.jquery.com/jquery-latest.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;/static/js/modal.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;/static/js/bootbox.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;/static/js/site.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; (function(i,s,o,g,r,a,m){i[&amp;#x27;GoogleAnalyticsObject&amp;#x27;]=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,&amp;#x27;script&amp;#x27;,&amp;#x27;//www.google-analytics.com/analytics.js&amp;#x27;,&amp;#x27;ga&amp;#x27;); ga(&amp;#x27;create&amp;#x27;, &amp;#x27;UA-56257533-1&amp;#x27;, &amp;#x27;auto&amp;#x27;); ga(&amp;#x27;send&amp;#x27;, &amp;#x27;pageview&amp;#x27;); &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;"";


    wv.loadData(stripHtml(s), ""text/html"", ""UTF-8"");

}

public String stripHtml(String html) {
    return Html.fromHtml(html).toString();
}
</code></pre>

<p>}</p>

<p><img src=""http://i.stack.imgur.com/jt8Mr.png"" alt=""enter image description here""></p>
","android"
"109",9365390,"<p>Ok I solved the problem, It seems my android default mail app writes content disposition for everything.</p>

<p>And the file name was all wicked as well. </p>

<p>So I solved the problem with (Since I'm only interested in media attachments):</p>

<pre><code>from email.header import decode_header
    def get_attachments(email_message_instance):
        attachments = []
        for part in email_message_instance.walk():

            if part.get_content_maintype() not in ['image', 'video', 'audio']:
                continue

            if part.get('Content-Disposition') is None:
                continue

            data = part.get_payload(decode=True)
            if not data:
                continue

            filename = part.get_filename()      
            filename =  u' '.join(w.decode(e or 'ascii') for w,e in decode_header(filename))        
            attachments.append((filename, data))

        return attachments
</code></pre>
","android"
"110",11455951,"<p>The print function needs to convert the string to a printable form, since a unicode string is not automatically printable. Wrapping with repr <code>print repr(i)</code> will allow you to print, but you might want to specify the encode instead.</p>
","android"
"111",18662437,"<p>You can alter padding inside your code using <a href=""http://kivy.org/docs/api-kivy.properties.html#kivy.properties.VariableListProperty"" rel=""nofollow"">VariableListPropery</a>. Example:</p>

<pre><code>from kivy.app import App
from kivy.uix.widget import Widget
from kivy.uix.textinput import TextInput
from kivy.properties import  VariableListProperty

class MyTextInput(TextInput):
    padding =  VariableListProperty(['24dp', '48dp'])

class MyApp(App):
    def build(self):
        return MyTextInput(text='This is an example text', multiline=False)

if __name__ == '__main__':
    MyApp().run()
</code></pre>

<p>This code requires 1.7 version, as noted in <a href=""http://kivy.org/docs/api-kivy.uix.textinput.html"" rel=""nofollow"">documentation of the widget</a>. I recommend uprgrading as I don't even see any API archive anywhere to check how it was setted before.</p>
","android"
"112",31540452,"<p>I had a similar problem, and simply setting the ANDROIDSDK environment variable didn't sort it, but the following did.</p>

<p>Try the following and then run the <code>./distribute.sh -m ""pil ffmpeg kivy""</code> command from the same terminal(as the environment vars will only have been set for that terminal and any child processes), or alternatively, add these lines to your <code>~/.bashrc</code> file for them to be permanent:</p>

<pre><code>export ANDROIDSDK=/path/to/android-sdk
export ANDROIDNDK=/path/to/android-ndk
export ANDROIDNDKVER=rX
export ANDROIDAPI=X

# example
export ANDROIDSDK=""/home/tito/code/android/android-sdk-linux_86""
export ANDROIDNDK=""/home/tito/code/android/android-ndk-r7""
export ANDROIDNDKVER=r7
export ANDROIDAPI=14
</code></pre>

<p>Examples taken from <a href=""https://python-for-android.readthedocs.org/en/latest/prerequisites/"" rel=""nofollow"">here</a>. I recommend having a look.</p>
","android"
"113",10775007,"<p>Use a <code>monkeyrunner</code> tool for that. From it's <a href=""http://developer.android.com/guide/developing/tools/monkeyrunner_concepts.html"" rel=""nofollow"">documentation</a>:</p>

<blockquote>
  <p>Besides using the monkeyrunner API itself, you can use the standard Python os and subprocess modules to call Android tools such as Android Debug Bridge.</p>
</blockquote>
","android"
"114",31574105,"<p>do you have a file named kivy.py in the same folder as main.py?</p>

<p>try </p>

<pre><code>#!/usr/bin/kivy
import kivy
print kivy.__file__
</code></pre>
","android"
"115",30097936,"<p>RNCryptor in this case is not a good choice because it imposes a format and method for encryption that does not match the method being used to encrypt.</p>

<p>You state that there is no padding but the Python code does pad the message with zero bytes, this is both non-standard, insecure and assumes that the data being encrypted does not end with a null byte. You will have to handle stripping the null padding after decryption. The usual padding is <a href=""http://en.wikipedia.org/wiki/Padding_(cryptography)#PKCS7"" rel=""nofollow"">PKCS#7</a>.</p>

<p>The iv for CBC mode is prepended to the encrypted data, this is a good scheme. You will need to separate the iv from the encryption data and apply it to the decryption function call.</p>

<p>It is not clear that the encryption key is exactly the correct length or what AES key size is being used. Presumably the Python method is using the length of the key to determine the AES key size, it can be 128, 192 or 256 bits and if not one of these padding the key to length. You will need to determine this and handle it in your code. The AES key size should really be specified and the key should be exactly the matching length.</p>

<p>With the above you can use the Apple supplied Common Crypto, specifically <code>CCCrypt</code> function.</p>

<p>It is potentially possible to modify the received data to match the requirements of RNCryptor and handle the padding after the decryption.</p>
","android"
"116",35788298,"<p>The immediate possibility is that you're just seeing the android processor be slower than the desktop one. I'm not sure what the benchmark comparisons are nowadays, but I've seen this be a problem in the past. That said, I'd have guessed the same as you that the difference shouldn't be that big.</p>

<p>I don't know if it would make a difference, but one general thing to try might be to compile for armeabi-v7a (rather than the default armeabi). This enables hardware floating point calculation, amongst other things. I don't know if it makes a difference in generic apps, but it certainly could. You can target this using the python-for-android master branch with <code>--arch=armeabi-v7a</code>, or the <code>android_new</code> target in the buildozer master branch (the rest of buildozer operation is the same, and it automatically uses v7a).</p>

<p>Another question would be, do you have access to a more efficient xml parser? If you can find one in e.g. cython rather than python (I don't know what you're using right now), this could make a difference. I see the other alternative of using a more efficient data structure has already been raised in a comment.</p>

<p>Sorry that neither of these suggestions are very specific. If you ask on the kivy support channels you may find someone who's found and resolved similar issues.</p>
","android"
"117",25705110,"<p>Unfortunately not all the methods have been ported to <code>AdbClient</code> yet. 
In the meantime you can use
<code>device.shell('pm uninstall your.package.name')</code></p>
","android"
"118",23012442,"<p>The problem was the Arduino code - I fixed it by reading incoming data with an iteration:</p>

<pre><code>void loop() {
    char rxdata[14];
    if (Serial2.available() &gt; 0){
          Serial2.readBytes(rxdata, 14);
          Serial3.write(rxdata);
   }
}
</code></pre>

<p>I can now see the full string I expected.</p>
","android"
"119",22271207,"<p>You have to input ip adress and port number in your code there is not ip adress and port number where is it ?? just see below example:</p>

<pre><code>public void connect() {
      new Thread(new Runnable(){

        @Override
        public void run() {
            try {

                client = new Socket(ipadres, portnumber);

                printwriter = new PrintWriter(client.getOutputStream(), true);
                printwriter.write(""HI ""); // write the message to output stream
                printwriter.flush();
                printwriter.close();
                connection = true;
                Log.d(""socket"", ""connected "" + connection);

                // Toast in background becauase Toast cannnot be in main thread you have to create runOnuithread.
                // this is run on ui thread where dialogs and all other GUI will run.
                if (client.isConnected()) {
                    MainActivity.this.runOnUiThread(new Runnable() {
                        public void run() {
                            //Do your UI operations like dialog opening or Toast here
                         connect.setText(""Connected"");
                            Toast.makeText(getApplicationContext(), ""Messege send"", Toast.LENGTH_SHORT).show();
                        }
                    });
                                        }
            }
            catch (UnknownHostException e2){
                   MainActivity.this.runOnUiThread(new Runnable() {
                    public void run() {
                        //Do your UI operations like dialog opening or Toast here
                        Toast.makeText(getApplicationContext(), ""Unknown host please make sure IP address"", Toast.LENGTH_SHORT).show();
                    }
                });

            }
            catch (IOException e1) {
                Log.d(""socket"", ""IOException"");
                MainActivity.this.runOnUiThread(new Runnable() {
                    public void run() {
                        //Do your UI operations like dialog opening or Toast here
                        Toast.makeText(getApplicationContext(), ""Error Occured""+ ""  "" +to, Toast.LENGTH_SHORT).show();
                    }
                });
            }

        }
    }).start();
}
</code></pre>

<p>just get input from user of ipadress and port number using 
edittext and you have to just copy and paste the code</p>

<p>Enjoy!
if did not work post again here. </p>
","android"
"120",9365390,"<p>Ok I solved the problem, It seems my android default mail app writes content disposition for everything.</p>

<p>And the file name was all wicked as well. </p>

<p>So I solved the problem with (Since I'm only interested in media attachments):</p>

<pre><code>from email.header import decode_header
    def get_attachments(email_message_instance):
        attachments = []
        for part in email_message_instance.walk():

            if part.get_content_maintype() not in ['image', 'video', 'audio']:
                continue

            if part.get('Content-Disposition') is None:
                continue

            data = part.get_payload(decode=True)
            if not data:
                continue

            filename = part.get_filename()      
            filename =  u' '.join(w.decode(e or 'ascii') for w,e in decode_header(filename))        
            attachments.append((filename, data))

        return attachments
</code></pre>
","android"
"121",35433696,"<p>You're not posting JSON, you're passing two parameters in the query string.  Those are accessed with <code>request.args</code>.</p>

<pre><code>distance = request.args['distance']
</code></pre>
","android"
"122",39520456,"<p>The correct transcription for masoud is ""M AH S UW D"". </p>

<p>There is no phone MA in acoustic model. The error says about that.</p>
","android"
"123",10026036,"<p>You need to set the environment variable in vim's environment. Use:</p>

<pre><code>:let $AP_PORT=9999
</code></pre>

<p>to set it - this will be inherited by the python sub-process you're spawning.</p>
","android"
"124",29451236,"<p>I test cocos2dx 3.6, 3.5, 3.4 . A all of them are failed.
Especially when I try version 3.5, I got same error to yours.</p>

<p>Now I success build my project. Belows are my method.</p>

<p>First, I change tools version to below things. And change environment variables to fit them.</p>

<pre><code>cocos2dx 3.4
NDK r9d
</code></pre>

<p>But I had got errors too.
So,</p>

<p>Second, I remove cocos2dx sdk 3.4 folder and re-unzipped.
At this time, Environment variables have been already made. So I didn't run <code>setup.py</code> and <code>download-deps.py</code>.
I think that when first cocos project build, cocos's references to environment variables is fixed. So If you change 'env var' after first build, it wouldn't refreshed automatically.</p>

<p>Third, Remake cocos project and import to eclipse and build.</p>

<p>Finally, My projects are working now well.</p>

<p>I suggest you to delete and re-install coco2dx framework.
If it don't work, Change cocos2dx version or ndk version. And delete and re-install coco2dx framework. It demand much time. But in some try, you will succeed.</p>

<p>Sorry for my poor english. But I really want share test-case that work fine for me. Good luck!</p>
","android"
"125",20528389,"<p>Half a year ago I did a small app with PY4A and I had trouble with connecting to my Bluetooth heart rate monitor from a galaxy S2. To solve the connection issue's I switched to pybluez. Using the Bluetooth device worked from there. See the working example that helped me here. </p>

<p><a href=""http://cuu508.wordpress.com/2011/02/21/hxm-t-display-heart-rate-from-zephyrs-hxm/"" rel=""nofollow"">http://cuu508.wordpress.com/2011/02/21/hxm-t-display-heart-rate-from-zephyrs-hxm/</a></p>

<p>I hope this helps.</p>

<p>Regards.</p>
","android"
"126",18584359,"<p>It is possible to develop Android apps in Python using <a href=""https://code.google.com/p/android-scripting/"" rel=""nofollow"">SL4A</a> (Scripting Layer for Android) and other complementing frameworks.</p>

<p>Refer to <a href=""https://ep2013.europython.eu/conference/talks/developing-android-apps-completely-in-python"" rel=""nofollow"">this</a> Euro Python tutorial that provides an introduction to developing Android Apps using Python.</p>
","android"
"127",38454505,"<p>Ok, I'm not sure whether this is the best solution, or clean enough, but the only one I know that works. While it works and seems stable, it needs further testing by someone with better knowledge of Kivy and Android API itself.</p>

<pre><code>if platform == 'android':
    from jnius import autoclass
    from android.runnable import run_on_ui_thread
    WebView = autoclass('android.webkit.WebView')
    WebViewClient = autoclass('android.webkit.WebViewClient')
    activity = autoclass('org.renpy.android.PythonActivity').mActivity
else:
    import webbrowser
    def run_on_ui_thread(func):
        ''' just for desktop compatibility '''
        return func


class MyScreen(Screen):
    view_cached = None  # make these object properties?
    webview     = None
    wvc         = None  # not even needed probably
    code        = StringProperty() # this property triggers webview to close
    url_to_load = None

    def on_enter(self):
        if platform == 'android':
            Clock.schedule_once(self.create_webview, 0) # probably doesn't need clocked call (because decorators will make sure
                                                        # function runs on correct thread), but leaving it until tested properly
        else:           
            webbrowser.open_new(self.url_to_load)       # on desktop just run the webbrowser

    @run_on_ui_thread
    def on_code(self, *args):
        ''' runs when you are ready to detach WebView '''
        self.detach_webview()

    @run_on_ui_thread
    def create_webview(self, *args):
        ''' attaching webview to app '''
        if self.view_cached is None:
            self.view_cached = activity.currentFocus # caches current view (the one with kivy) as a view we want to go back to; currentFocus or getCurrentFocus() works
        self.webview = WebView(activity)
        settings = self.webview.getSettings()
        settings.setJavaScriptEnabled(True)         # enables js
        settings.setUseWideViewPort(True)           # enables viewport html meta tags
        settings.setLoadWithOverviewMode(True)      # uses viewport
        settings.setSupportZoom(True)               # enables zoom
        settings.setBuiltInZoomControls(True)       # enables zoom controls
        self.wvc = WebViewClient()
        self.webview.setWebViewClient(self.wvc)
        activity.setContentView(self.webview)
        self.webview.loadUrl(self.url_to_load)  

    @run_on_ui_thread
    def key_back_handler(self, *args):
        ''' sketch for captured ""key back"" event (in App), not tested properly '''
        if self.webview:
            if self.webview.canGoBack() == True:
                self.webview.goBack()
            else:
                self.detach_webview()
                Clock.schedule_once(self.quit_screen, 0)
        else:
            App.get_running_app().root.current = 'some_other_screen_to_switch_to'

    @run_on_ui_thread
    def detach_webview(self, *args):
        if self.webview:
            self.webview.clearHistory()
            self.webview.clearCache(True)
            self.webview.loadUrl(""about:blank"")
            self.webview.freeMemory()                   # probably not needed anymore
            self.webview.pauseTimers()                  # this should stop any playing content like videos etc. in the background; probably not needed because of 'about:blank' above
            activity.setContentView(self.view_cached)   # sets cached view as an active view
            #self.webview = None # still needs testing;
            #self.wvc = None            

    @mainthread
    def quit_screen(self, *args):
        ''' if not called on @mainthread, it will be freezed '''
        app = App.get_running_app()
        app.root.current = 'some_other_screen_to_switch_to'
</code></pre>

<p>I'm creating WebView when entering MyScreen(Screen), and when detaching WebView, switching back to some other Screen.</p>

<p>The view before WebView gets cached (is this efficient? probably would be better to access it some other way) and used again when WebView is destroyed.
The quit_screen() calls maybe should be moved to detach_webview(), but the code as a whole probably needs better organization, so leaving it as it is, since this is tested sample.</p>
","android"
"128",27996133,"<p><a href=""http://answers.opencv.org/question/24188/opencv-android-with-python/"" rel=""nofollow"">According to here:</a></p>

<blockquote>
  <p>there is sl4a / PythonForAndroid, unfortunately, it uses hardcoded java rmi invocations for anything os related. so - no opencv bindings there ;(
  i guess, you'll have to learn java.<br>
  <code>-berak (Nov 20 '13)</code></p>
</blockquote>

<p>Also, although further dated, this <a href=""https://github.com/kivy/python-for-android/issues/75"" rel=""nofollow"">still open issue on github</a> leads me to believe that there is still no Python-Android OpenCV implementation.</p>

<blockquote>
  <p>There is no camera implementation in Kivy right now. And we never said than opencv was available on python-for-android too.</p>
</blockquote>

<p>But there is hope for the future:</p>

<blockquote>
  <p>I have a plan of writing a recipe for it, not now, currently I am
  quite overwhelmed by others ;-)<br>
  <code>- ParokshaX (Jul 25, 2014)</code></p>
</blockquote>

<p><strong>QUIK EDIT:</strong></p>

<p>Lol, there is a working implementation on the open issue, it just doesn't have a nice recipe:</p>

<blockquote>
  <p>Here I attach the Eclipse project I have made to build libcv2.so for
  Python on Android. It is a little bit messy because I really had a
  headache working it out, and I'm short on time right now. Just import
  it into Eclipse (I use ADT 22.0 and NDK r9c) and it should compile. I
  took libopencv_java.so into the project so it shall be a dependency.
  Also libpython2.7.so is a dependency too.  If anyone can make this
  into a Python for Android recipe then that would be awesome.</p>
</blockquote>
","android"
"129",21483459,"<p>You're missing some steps in your view to fully enable CSRF. I'm assuming CSRF is the problem, as it throws 403s if not enabled correctly.</p>

<p><a href=""https://docs.djangoproject.com/en/dev/ref/contrib/csrf/"" rel=""nofollow"">https://docs.djangoproject.com/en/dev/ref/contrib/csrf/</a></p>
","android"
"130",39925847,"<p>You should update to kivy 1.9.2-dev, the problem is fixed there. In <code>buildozer.spec</code> file, write requirement <code>kivy==master</code>.</p>
","android"
"131",15301778,"<p>All you need to do is to add the directory to the <code>PATH</code>, using <code>sys.path</code>. So for your case, it'd look like</p>

<pre><code>import sys.path
sys.path.append(r'/data/local/lib/python27/')
</code></pre>
","android"
"132",35839356,"<p>The problem I have successfully gotten the answer, I have to make my patch file with the zip file target_files.zip, not the general zip file, then the python is able to create the patch file.
However, I still have a problem that after I finish creating the patch file, and trying to flash it via adb sideload command, 
After finish flashing this procedure, the result after I flashing the zip didn’t work, and a message shown as the following, “system/bin/filename” has unexpected contents, that filename stands for the file I tuned it in the patch file,as the figure shown <a href=""http://i.stack.imgur.com/3vhLY.jpg"" rel=""nofollow"">enter image description here</a> 
If my method is wrong, does anybody know how to apply the patch I created with sideload flashing? Thank you in advanced. </p>
","android"
"133",21252729,"<p>Those files may be editor backups which kivy doesn't recognize. </p>

<p>You can edit the build.py and add some patterns to BLACKLIST_PATTERNS. For your issue, you should add '*~' to the black list.</p>
","android"
"134",33814581,"<blockquote>
  <p>self.add_widget(MyPaintWidget)</p>
</blockquote>

<p>This should be <code>self.add_widget(MyPaintWidget())</code> - you need an <em>instance</em> of the class, not the class declaration itself.</p>
","android"
"135",11179014,"<p>There are many ways to do this. </p>

<p>1) When you check the users login details if it checks out you can then create a random UUID or string and store the User object in memcache with the random string as the Key and the User Object as the value. Then return the random string along with your response headers. On the mobile when you are parsing the response, get this header and store it in the local cache. On all further requests keep sending this key back in the request header and in your controller get the User object from memcache using this key and proceed. If the object is not in memcache you can send back a response which prompts the user to log in.</p>

<p>2) If you dont want to use memcache you can store the User object in the session and on the client side while parsing the response get the session id from the response. Its usually JSESSIONID. Then store that and resend it with further requests. In the controller you can check if the current session has the user object else force login.</p>

<p>1) Another way to go would be to return the appengine key for the user along with the response and resend it.</p>

<p>Just google get response header from response. Then get the SESSIONID/JSESSIONID header, store and add the field with the same name and value to all further request headers. Thats the easiest way.</p>

<p>My first answer on stackoverflow and no code exapmles, dangit if only i knew python.</p>
","android"
"136",8022970,"<p>Environment: Eclipse with the pydev plugin and Android developement in Linux.</p>

<p>If the same problem arises even after doing George Goh's solution, then pass the environment variable with the value as <code>AP_PORT=9999</code> using the interpreter setting of Eclipse.</p>
","android"
"137",23055696,"<p>Use adb <a href=""http://developer.android.com/tools/help/logcat.html"" rel=""nofollow"">logcat</a> to get the output of your application, or use one of the apps available on-line that help display your logs and grep for 'Python'.</p>

<p>Detailed steps for above::</p>

<p><strong>Enable developer options on your device</strong>(google is your friend).
Then enable <strong>usb debugging</strong>.</p>

<p><img src=""http://i.stack.imgur.com/oVEeF.gif"" alt=""enter image description here"">
Image taken from <a href=""http://androidfannetwork.com/"" rel=""nofollow"">http://androidfannetwork.com/</a></p>

<p>Then connect your device to your pc using usb cable then type <code>adb devices</code> in your console.
It should show your device (there might be a prompt asking you for permissions to connect to the computer).</p>

<p>One simpler way be to use visual indication on a widget instead of printing on the console.
you could create a functions for your app <code>bubprint</code></p>

<pre><code>from kivy.core.window import Window
from kivy.clock import Clock
from kivy.factory import Factory
from kivy.lang import Builder

Builder.load_string('''
&lt;InfoBubble@Bubble&gt;
    # declare our message StringProperty
    message: 'empty message'
    # let the bubble be of 200 device pixels
    # and expand as necessary on the height
    # depending on the message + 20 dp of padding.
    size_hint: None, None
    show_arrow: False
    pos_hint: {'top': 1, 'right': 1}
    size: dp(200), lbl.texture_size[1] + dp(20)
    Label:
        id: lbl
        text: root.message
        # constraint the text to be displayed within
        # the bubble width and have it be unrestricted
        # on the height.
        text_size: root.width - dp(20), None
''')

def bubbprint(self, message):
    message = repr(message)
    if not self.info_bubble:
        self.info_bubble = Factory.InfoBubble()
    self.info_bubble.message = message

    # Check if bubble is not already on screen
    if not self.info_bubble.parent:
        Window.add_widget(self.info_bubble)

    # Remove bubble after 2 secs
    Clock.schedule_once(lambda dt:
        Window.remove_widget(self.info_bubble), 2)
</code></pre>
","android"
"138",39417505,"<p>You are just killing the adb shell session, which won't kill the running application. If you would like to kill the running Android application, you have to stop the app over the adb shell. For details have a look at this <a href=""https://stackoverflow.com/questions/17829606/android-adb-stop-application-command-like-force-stop-for-non-rooted-device#17829677"">stackoverflow answer</a>.</p>
","android"
"139",33979255,"<p>Your code includes no audio safety buffer to handle jitter in the UDP network transmission rate.  UDP over WiFi is neither a media synchronous nor a reliable transport, so some fraction of a second of pre-filled safety buffer, plus something to handle dropouts smoothly, may be required.</p>
","android"
"140",8673070,"<p>What you need is to write a SSH client or server in native python. </p>

<p>This can be done with <a href=""http://twistedmatrix.com/trac/"" rel=""nofollow"">Twisted</a>, for example. I know of <a href=""http://code.google.com/p/python-for-android/source/browse/python-modules/twisted?name=1b1ea8ea0cd318fd08c0889e0cbebc09d64d09c9&amp;r=8bd1254c181b9a2caba52a9e1b34074b93c77d37"" rel=""nofollow"">this</a> implementation of Twisted for Android, but I have never tried it myself. If you get those two things working, you have a solution.</p>
","android"
"141",15994243,"<p>I solved my own question. I ended up finding <a href=""https://code.google.com/p/android-scripting/issues/detail?id=184"" rel=""nofollow"">https://code.google.com/p/android-scripting/issues/detail?id=184</a> and using the <code>suu</code> and <code>sush</code> binaries given in the answers. Worked perfectly!</p>
","android"
"142",27488825,"<p>It looks like a plugin made for Jetbrain  Pycharm IDE, not for android studio, you need to check more details about it. </p>
","android"
"143",29851825,"<p>You need to have
<code>#qpy:kivy</code>
part in the first line.
At least that was what happened to me.
I suppose that is because QPython is finding what type of app is it.</p>
","android"
"144",31741019,"<p>Please use following code</p>

<pre><code>from uiautomator import Device, Selector, AutomatorDeviceUiObject
</code></pre>

<p>If these modules not exactly what you need, then use </p>

<pre><code>import uiautomator as ui
dir(ui)
</code></pre>

<p>to select required modules</p>
","android"
"145",26897224,"<p>Use the screenmanager class from the kivy developers:<a href=""http://kivy.org/docs/api-kivy.uix.screenmanager.html"" rel=""nofollow"">http://kivy.org/docs/api-kivy.uix.screenmanager.html</a> </p>

<p>Not only can you then access the sub-widgets on various screens but you can also make use of the various complex behaviours that are already built-in such as the animated transitions between screens.</p>

<p>There's a great tutorial available here: <a href=""https://www.youtube.com/watch?v=xx-NLOg6x8o"" rel=""nofollow"">https://www.youtube.com/watch?v=xx-NLOg6x8o</a> (""Kivy crash course 14: Using a ScreenManager "")</p>

<p>The screenmanager has a <code>get_screen(name)</code> method that can be used to access the screens and you can use the <a href=""http://kivy.org/docs/api-kivy.uix.widget.html?highlight=ids#kivy.uix.widget.Widget.ids"" rel=""nofollow"">ids</a> to reference the sub-widgets.</p>

<p>This allows access but it's generally better practice to use custom properties to the base widgets (in this case, the screenmanager) to allow direct access without ids. In the case of the textinput you could create an ObjectProperty and assign it to the id of the target textinput in the kv file or you could create a StringProperty/NumericProperty and bind it to the text property of the textinput. </p>

<ul>
<li>Using ObjectProperty:
<a href=""http://stackoverflow.com/questions/18580794/usage-of-objectproperty-class"">Usage of ObjectProperty class</a></li>
<li>Using StringProperty:
<a href=""http://kivy.org/docs/guide/lang.html#re-using-styles-in-multiple-widgets"" rel=""nofollow"">http://kivy.org/docs/guide/lang.html#re-using-styles-in-multiple-widgets</a></li>
</ul>
","android"
"146",6258935,"<p>Python Code:</p>

<pre><code>def encrypt_file(key, in_filename, out_filename=None, chunksize=64*1024):
    if not out_filename:
        out_filename = in_filename + '.enc'

    iv = ''.join(chr(random.randint(0, 0xFF)) for i in range(16))
    encryptor = AES.new(key, AES.MODE_CBC, iv)
    filesize = os.path.getsize(in_filename)

    with open(in_filename, 'rb') as infile:
        with open(out_filename, 'wb') as outfile:
            outfile.write(struct.pack('&lt;Q', filesize))
            outfile.write(iv)

            while True:
                chunk = infile.read(chunksize)
                if len(chunk) == 0:
                    break
                elif len(chunk) % 16 != 0:
                    chunk += ' ' * (16 - len(chunk) % 16)

                outfile.write(encryptor.encrypt(chunk))

def decrypt_file(key, in_filename, out_filename=None, chunksize=24*1024):
    if not out_filename:
        out_filename = os.path.splitext(in_filename)[0]

    with open(in_filename, 'rb') as infile:
        origsize = struct.unpack('&lt;Q', infile.read(struct.calcsize('Q')))[0]
        iv = infile.read(16)
        decryptor = AES.new(key, AES.MODE_CBC, iv)

        with open(out_filename, 'wb') as outfile:
            while True:
                chunk = infile.read(chunksize)
                if len(chunk) == 0:
                    break
                outfile.write(decryptor.decrypt(chunk))

            outfile.truncate(origsize)
</code></pre>
","android"
"147",6258935,"<p>TLS could be used to securely transmit data in a compatible way.</p>

<p><a href=""http://docs.python.org/dev/library/ssl.html#server-side-operation"" rel=""nofollow"">Python ssl server-side</a></p>

<p>If additionally you use http protocol for the communication then there are already high-level libraries that might hide all gory details from you; just provide client/server certificates and make appropriate requests. </p>

<p><a href=""http://stackoverflow.com/questions/995514/https-connection-android"">Https Connection Android</a></p>

<p>It might save you from reimplementing poorly many security features such as <a href=""http://vincent.bernat.im/en/blog/2011-ssl-perfect-forward-secrecy.html"" rel=""nofollow"">forward secrecy</a>.</p>
","android"
"148",15078361,"<p>There is an awesome <a href=""http://qpython.com/"" rel=""nofollow"">QPython</a> project here. You may just install <a href=""https://play.google.com/store/apps/details?id=com.hipipal.qpyplus&amp;hl=en"" rel=""nofollow"">the application</a> from play market and enjoy Python coding everywhere.</p>
","android"
"149",9365390,"<p>Ok I solved the problem, It seems my android default mail app writes content disposition for everything.</p>

<p>And the file name was all wicked as well. </p>

<p>So I solved the problem with (Since I'm only interested in media attachments):</p>

<pre><code>from email.header import decode_header
    def get_attachments(email_message_instance):
        attachments = []
        for part in email_message_instance.walk():

            if part.get_content_maintype() not in ['image', 'video', 'audio']:
                continue

            if part.get('Content-Disposition') is None:
                continue

            data = part.get_payload(decode=True)
            if not data:
                continue

            filename = part.get_filename()      
            filename =  u' '.join(w.decode(e or 'ascii') for w,e in decode_header(filename))        
            attachments.append((filename, data))

        return attachments
</code></pre>
","android"
"150",33996304,"<p>The translation will only work for the browsable API and might for error response messages.</p>

<p>You probably need to double check your client side encoding. <a href=""http://stackoverflow.com/questions/19341986/conversion-error-between-json-for-chinese-characters"">conversion error between JSON for Chinese characters</a> has a good explanation about this.</p>
","android"
"151",33323796,"<p>You can resolve your problem using <code>adb</code> and <code>wpa_cli</code>, but your device must be rooted.</p>

<pre><code>adb root
adb shell

svc wifi enable

wpa_cli -p /data/misc/wifi/sockets/ -i wlan0

add_network
set_network 0 auth_alg OPEN
set_network 0 key_mgmt WPA-PSK
set_network 0 psk ""12345678""
set_network 0 proto RSN
set_network 0 mode 0
set_network 0 ssid ""Qwerty""

select_network 0
enable_network 0
reassociate

status
</code></pre>

<p>For more information and examples refer <a href=""http://processors.wiki.ti.com/index.php/Connect_to_Secure_AP_using_WPA_Supplicant#Connect_to_secured_network_-_WPA2"" rel=""nofollow"">Connect to Secure AP using WPA Supplicant</a></p>
","android"
"152",6760557,"<p>Assuming that you ran the code as it appears here, you did not <code>import android</code> and so on.</p>

<p>In any case, the sl4a  api does not support nfc yet.</p>
","android"
"153",27601784,"<p>On the OnReceive method of the BroadcastReceiver you can use the below piece of code to find the sender.</p>

<pre><code>public void onReceive(Context context, Intent intent) {
    //---get the SMS message passed in---
        Bundle bundle = intent.getExtras();
        SmsMessage[] msgs = null;
        Object[] pdus = (Object[]) bundle.get(""pdus"");
        msgs = new SmsMessage[pdus.length];
        for (int i = 0; i &lt; msgs.length; i++) {
            msgs[i] = SmsMessage.createFromPdu((byte[]) pdus[i]);
            String sender = msgs[i].getOriginatingAddress();
            // Your logic here to find the match
        }
}
</code></pre>
","android"
"154",35839356,"<p>The problem I have successfully gotten the answer, I have to make my patch file with the zip file target_files.zip, not the general zip file, then the python is able to create the patch file.
However, I still have a problem that after I finish creating the patch file, and trying to flash it via adb sideload command, 
After finish flashing this procedure, the result after I flashing the zip didn’t work, and a message shown as the following, “system/bin/filename” has unexpected contents, that filename stands for the file I tuned it in the patch file,as the figure shown <a href=""http://i.stack.imgur.com/3vhLY.jpg"" rel=""nofollow"">enter image description here</a> 
If my method is wrong, does anybody know how to apply the patch I created with sideload flashing? Thank you in advanced. </p>
","android"
"155",31649322,"<p>The <code>below_target</code> option was added more recently than the last stable release, which is Kivy 1.9. If you're running this version, you don't have it available yet.</p>

<p>You can use the master branch on android by just changing <code>kivy</code> to <code>kivy==master</code> in the buildozer requirements line.</p>
","android"
"156",18710318,"<p>I got it working finally! <a href=""http://stackoverflow.com/a/13780483/2763420"">From this Stackoverflow answer</a></p>

<pre><code>import android

droid = android.Android()

activity = 'com.twofortyfouram.locale.intent.action.FIRE_SETTING'
extras = {}
extras['de.devmil.minimaltext.locale.extras.VAR_NAME'] = 'test'
extras['de.devmil.minimaltext.locale.extras.VAR_TEXT'] = 'Passed'

packagename =  'de.devmil.minimaltext'
classname = 'de.devmil.minimaltext.locale.LocaleFireReceiver'

intent = droid.makeIntent(activity, None, None, extras, None, packagename, classname).result

droid.sendBroadcastIntent(intent)
</code></pre>

<p>That said I am unsure as to where I have gone wrong in my initial code. If anyone would care to chime in and point out where the hell I have gone wrong</p>
","android"
"157",18115318,"<p>You need to add the module to the search path (you are cwd is not in the same dir?)</p>

<p><a href=""http://docs.python.org/2/tutorial/modules.html"" rel=""nofollow"">http://docs.python.org/2/tutorial/modules.html</a></p>

<p>import sys
sys.path.append('/path/to/your/module')</p>
","android"
"158",34042813,"<p>You actually don't need a sdk manager as buildozer will download that itself.
For a clean install try </p>

<pre><code>buildozer -v android clean 
</code></pre>

<p>after deleting .buildozer folder from your /home/ and then try</p>

<pre><code>buildozer -v android debug
</code></pre>

<p>Also set the log level as 2 in buildozer.spec and if you are using any python library add that in buildozer.spec requirement section with comma after kivy.For example if you are using numpy include that in following way</p>

<pre><code>requirements = kivy,numpy
</code></pre>

<p>Let me know if these fix work.</p>
","android"
"159",30786979,"<p>I believe the simplest way is using Django Rest Framework.</p>

<p>In this scenario, the steps are:</p>

<ol>
<li><a href=""https://docs.djangoproject.com/en/1.8/topics/install/"" rel=""nofollow"">Install Django</a>.</li>
<li><a href=""https://docs.djangoproject.com/en/1.8/intro/tutorial01/"" rel=""nofollow"">Create the the Django App and the Model for the data you want to store and access through the API</a>.</li>
<li>Setup Django Rest Framework. There are many tutorials that can help you here, for example <a href=""http://axiacore.com/blog/getting-started-django-rest-framework/"" rel=""nofollow"">Getting Started with Django Rest Framework and AngularJS</a> .</li>
<li>Access your new API from a browser and your Django App. Here is going to be very useful the <a href=""http://www.django-rest-framework.org/topics/browsable-api/"" rel=""nofollow"">browser</a> Django Rest Frameworks will automagically create for your API.</li>
</ol>

<p>Unless you need to do something 'special', Django Rest Framework will help you a lot, generating views, dealing with JSon serialization and so on. Basically, the only thing you will need to care is the model definition.</p>

<p>From the Android side, you will need:</p>

<ol>
<li><p>Access your API using HttpClient. However, HttpClient library it is not recommended anymore to use it, as Google is focusing their efforts on improving the HttpURLConnection implementation.</p></li>
<li><p>Parser the data you got, in this in JSon format. To do this, you can use <a href=""http://developer.android.com/reference/android/util/JsonReader.html"" rel=""nofollow"">JsonReader</a>.</p></li>
</ol>

<p>Another alternative is using <a href=""http://square.github.io/retrofit/"" rel=""nofollow"">Retrofit</a>, a very popular REST client for Android and Java, which solves the two problems very easily.</p>
","android"
"160",6882218,"<p>I would suggest modifying the script to call  getDialogInput. </p>

<pre><code>import android
app = android.Android()
response = app.dialogGetInput(Title, Message, Default_Values).result
</code></pre>

<p>Then set whatever variable the script expects the parameters to be in to response.</p>

<p>Ive done this and also modified a script to get the android clipboard instead of taking input directly. You could always make several versions of the script with hard coded parameters.</p>

<p>Hope this helps as im pretty new to python and sl4a.</p>
","android"
"161",29909600,"<p>readLine read IO need data end with \r\n , bluetooth send data need to add end tag with \r\n</p>
","android"
"162",24476020,"<p>Hey I have two solutions for your problem:</p>

<ol>
<li>Just remove the <strong>.buildozer/</strong> folder in your project and try again</li>
<li>Run the command: buildozer clean</li>
</ol>
","android"
"163",26259990,"<p>You can implement a <code>pytest_runtest_logreport</code> hook in your <code>conftest.py</code> like this:</p>

<pre><code>def pytest_runtest_logreport(report):
    if report.when == 'call' and report.failed:
        # save bug report
</code></pre>

<p>For more information, see <a href=""http://pytest.org/latest/plugins.html"" rel=""nofollow"">Woking with plugins and conftest files</a>.</p>
","android"
"164",24968193,"<p>Run python program in android with Qpython:</p>

<blockquote>
  <p>Create program and run it:</p>
</blockquote>

<ul>
<li>Go to Editor.</li>
<li>Write Your Script.</li>
<li>Tap Save icon. ('4th icon' at bottom)</li>
<li>Tap Run. ('Arrow icon' in middle at bottom)</li>
</ul>

<p>Script will run and output/errors will be shown in logfile in notification bar.</p>

<blockquote>
  <p>Run existing script:</p>
</blockquote>

<ul>
<li>Tap on big button with python logo in center of screen.</li>
<li>Tap run local script.</li>
<li>Tap on script you want to run.</li>
</ul>

<p><a href=""http://wiki.qpython.org/doc/how-to-start/"" rel=""nofollow"">http://wiki.qpython.org/doc/how-to-start/</a></p>

<p>edit: There is another app from same developers called Qpython3 in which you can run python3 applications including scripts and projects.In Qpython3 after running script it will take you to console for output instead of showing logfile in notification bar.</p>
","android"
"165",12493101,"<p>This worked for me, though haven't tried setting a Exchange account:</p>

<pre><code>  fieldLength = 50
  # select all the chars
  self.device.press('KEYCODE_SHIFT_LEFT', MonkeyDevice.DOWN)
  for i in range(fieldLength):
     self.device.press('KEYCODE_DPAD_LEFT', MonkeyDevice.DOWN_AND_UP)
     MonkeyRunner.sleep(1)
  self.device.press('KEYCODE_SHIFT_LEFT', MonkeyDevice.UP)

  # delete them
  self.device.press('KEYCODE_DEL', MonkeyDevice.DOWN_AND_UP)
</code></pre>
","android"
"166",13324439,"<p>Here's some code that I have working to stream from my phone running Android IP Camera, using Andrea Diaz's idea and python with opencv2...</p>

<pre><code>import cv2
import urllib

while True:
    urllib.urlretrieve(""http://192.168.0.10:8080/shot.jpg"", ""foto.jpg"")
    src_image = cv2.imread('foto.jpg', 0)
    cv2.imshow('Viewer',src_image)
    # read user keyboard for 5ms, and break on any keypress.    
    if (cv2.waitKey (5) != -1):
        break;
</code></pre>
","android"
"167",14636382,"<p>You can use <a href=""http://wiki.xbmc.org/?title=InfoLabels"" rel=""nofollow"">XBMC InfoLabels</a></p>

<pre><code>if xbmc.getInfoLabel('Network.MacAddress') != None:
    mac_address = xbmc.getInfoLabel('Network.MacAddress')
else:
    mac_address = None
</code></pre>
","android"
"168",22910351,"<p>From what I understand you use a thread in order to call the server but in the same thread you try to post back results to the UI. </p>

<p>final TextView receivedMsg = (TextView) findViewById(R.id.textView2);
receivedMsg.setText(br.toString());</p>

<p>If you use your own Java thread you have to handle the following requirements in your own code:
Synchronization with the main thread if you post back results to the user interface.
I dont see that you are doing this.You either have to use a Handler or maybe you should consider using the Asynctask of android. With the AsyncTAsk you can write in the UI after this method is triggered.
onPostExecute(Result)
Invoked on the UI thread after the background computation finishes.</p>

<p>So inside this method you can write in the UI.
have a look at these links
<a href=""http://learningdot.diandian.com/post/2014-01-02/40060635109"" rel=""nofollow"">http://learningdot.diandian.com/post/2014-01-02/40060635109</a>
<a href=""http://stackoverflow.com/questions/18480206/asynctask-vs-thread-in-android"">Asynctask vs Thread in android</a></p>
","android"
"169",20650104,"<p>Only install gcc package is not enough, providing package gcc-4 has been installed, check if /usr/bin/gcc exists, usually it is a link file pointing to /usr/bin/gcc-4.4 for example. similarly, a link file /usr/bin/g++ pointing to g++-4.4 is needed too</p>
","android"
"170",9746099,"<ol>
<li><p>Check to make sure you've added Python to your path. At the C:> prompt type </p>

<p><code>python</code></p>

<p>and see what happens. If you get the Python shell, great. Else <a href=""http://docs.python.org/faq/windows.html"" rel=""nofollow"">do what the faq says.</a></p></li>
<li><p><strong>edit</strong>: just fired up a windows box to check, and the D: shouldn't be a problem, never mind the thought that was previously occupying this space.</p></li>
<li><p>It seems likely that ignacio is right in his answer: you're typing a command-prompt command into the python shell. Your cursor should be flashing after something that looks like this</p>

<p><code>C:\&gt;</code></p>

<p>if it looks like this</p>

<p><code>&gt;&gt;&gt;</code></p>

<p>type <code>exit()</code> to get out of the python shell and try again.</p></li>
</ol>
","android"
"171",25147323,"<p>You could use the <a href=""http://kivy.org/docs/api-kivy.app.html#application-configuration"" rel=""nofollow"">application configuration</a> for that </p>

<p>edit for the comment:
basically, additionally to the normal <code>def build(self)</code>: method you also add:</p>

<pre><code>def build_config(self, config):
    config.setdefaults('login', {'username': '', 'password': ''})
</code></pre>

<p>then, in your build method you can do the following:</p>

<pre><code>def build(self):
    config = self.config
    self.username = config.get('login', 'username')
    self.password = config.get('login', 'password')
</code></pre>

<p>now, after the user logged in successfully you just need to write the new username/password to the config:</p>

<pre><code>self.config.set('login', 'username', input1)
self.config.set('login', 'password', input2)
</code></pre>

<p>Take in mind that this will save the password unencrypted. Perhaps you may want to add encryption for the password on your phone.
It will save the files to <code>/sdcard/&lt;appname&gt;.ini</code>. So you should really encrypt it because everyone with access to the sdcard will be able to read it!</p>
","android"
"172",15102778,"<p>If you want to parse XML with Python, just use <code>etree</code>:</p>

<pre><code>import xml.etree.ElementTree as etree

etree.register_namespace('android', 'http://schemas.android.com/apk/res/android')

with open('AndroidManifest.xml', 'r') as handle:
    root = etree.parse(handle)

root.find('application').set('android:allowBackup', 'false')
root.write('parsed.xml', encoding='utf-8', xml_declaration=True)
</code></pre>

<p>The syntax is understandable, it's included in the standard library, and it works.</p>
","android"
"173",6362990,"<p>No.</p>

<p>It's recommended to use a separate account for C2DM instead of using the account used for email and other services.</p>
","android"
"174",11823007,"<p>Try doing adb root before running the script.</p>
","android"
"175",25251584,"<p>The normal Android emulator works fine. Make sure it is using Android 4+ and has hardware GPU acceleration enabled.</p>
","android"
"176",26044286,"<p>See <a href=""https://cloud.google.com/appengine/docs/python/ndb/modelclass#Model_populate"" rel=""nofollow"">populate</a>.</p>

<p>Not really sure about the inheritance issues (you could provide a more specific example) but you would have something like this:</p>

<pre><code>def post(self):
    payload = json.loads(self.request.body)
    assert isinstance(payload, dict), 'Bad payload'

    myCustomClass = CustomClass()
    myCustomClass.populate(**payload)
    myCustomClass.put()
</code></pre>

<p>Also, note that you should probably validate user submitted data first instead of blindly storing everything right away.</p>
","android"
"177",34640333,"<p>Download to your pc and push through ADB. </p>
","android"
"178",13704350,"<pre><code>import Image
im = Image.load(""image.png"")
diff_colors = list(set(im.getdata()))
if len(diff_colors) == 1 and diff_colors[0] == (0, 0, 0):
    print ""all black""
</code></pre>

<p><strong>EDIT</strong> as @JonClements proposes, this will be faster and stop as soon as anything else than black is found:</p>

<pre><code>import Image
im = Image.load(""image.png"")
if all(rgb == (0,0,0) for rgb in im.getdata()):
    print ""all black""
</code></pre>
","android"
"179",19278242,"<p>There is no explicit function for accessing the CallLog.Calls object.</p>

<p>It may be possible in the ContactsFacade e.g. queryAttributes or queryContent but you would need to investigate further there.</p>
","android"
"180",9394041,"<p>Call eventWaitFor(""location"") before you call readLocation. You might also want to use eventPoll, eventClearBuffer or eventWait as well.</p>

<p>The GPS sensor is very slow to start up, because it needs to acquire satellites, synchronize the time and then triangulate a position based on the timing of signals from the satellites. Also, because you have called startLocating without specifying an update frequency, you are getting the default frequency of 60,000ms or once per minute.</p>
","android"
"181",18987255,"<p>this problem is causing by PATH. adb path should put the end of the other path.</p>

<p>for example:</p>

<blockquote>
  <p>$ sudo gedit /etc/environment;</p>
  
  <p>PATH=""...:~/softAddr/adt-bundle-linux-x86_64-20140624/sdk/platform-tools:~/softAddr/adt-bundle-linux-x86_64-20140624/sdk/tools""</p>
</blockquote>

<p>not:</p>

<blockquote>
  <p>PATH=""~/softAddr/adt-bundle-linux-x86_64-20140624/sdk/platform-tools:~/softAddr/adt-bundle-linux-x86_64-20140624/sdk/tools:...""</p>
</blockquote>
","android"
"182",25447679,"<p>I am not sure how to write a service for Android in Python. But you can maybe start your service using a BroadcastReceiver at boot time.You could register your broadcast receiver to filter intents with  Intent.ACTION_BOOT_COMPLETED.</p>
","android"
"183",12025195,"<p>Shouldn't you use the <code>check_output</code> convenience function?</p>

<pre><code>#!/usr/bin/env python
import subprocess

cmd = 'adb shell ls'
s = subprocess.check_output(cmd.split())
print s.split('\r\n')
</code></pre>

<p>It works just fine here (Ubuntu box). Note that the newline separators are '\r\n' instead of just '\n'.</p>
","android"
"184",16730748,"<p>I found a project that uses SL4A:</p>

<p><a href=""http://code.google.com/p/android-python27/"" rel=""nofollow"">http://code.google.com/p/android-python27/</a></p>

<p>For whom that wants to try it, if error occurs using Eclipse, here is a link that could solve the compilation issue:</p>

<p><a href=""http://code.google.com/p/android-python27/issues/detail?id=1"" rel=""nofollow"">http://code.google.com/p/android-python27/issues/detail?id=1</a></p>

<p>I've just compiled this project:</p>

<p><a href=""http://code.google.com/p/android-python27/source/browse/#hg%2Fapk"" rel=""nofollow"">http://code.google.com/p/android-python27/source/browse/#hg%2Fapk</a></p>

<p>To download sources, download HG Tortoise from:</p>

<p><a href=""http://tortoisehg.bitbucket.org/download/"" rel=""nofollow"">http://tortoisehg.bitbucket.org/download/</a></p>

<p>Make a local copy of the repository with the command:</p>

<pre><code>hg clone https://code.google.com/p/android-python27/ 
</code></pre>

<p>Then import the APK project in Eclipse and compile it.</p>

<p>Just run it on my low cost China tablet and it seems to works fine. Initially the program make an installation:</p>

<pre><code>boolean installNeeded = isInstallNeeded();

if(installNeeded) {
  setContentView(R.layout.install); 
  new InstallAsyncTask().execute();
}
</code></pre>

<p>That make some installations on the external storage (fortunately no root privileges are needed).</p>
","android"
"185",26559660,"<p>Okay, so I'm now answering my own question :D</p>

<p>The issue was with the <code>path</code> variable in the <code>URL string</code>.<br>
This is the format of one of the URL constructors based on this <a href=""http://developer.android.com/reference/java/net/URL.html"" rel=""nofollow"">document</a>.<br>
<code>URL(String protocol, String host, int port, String file)</code></p>

<p>Since I am posting the <strong>JSON</strong> to the <code>/user</code> path, that's the one I insert into the constructor as the <code>directory.</code><br>
So, my URL was formed like so:<br>
<code>URL url= new URL(""http"",cons.SERVER,cons.PORT,""/user/"");</code></p>

<p>My mistake in the beginning was using <code>/user</code> instead of <code>/user/</code>
but other than that, the <strong>URL structure and connections</strong> are all alright.</p>
","android"
"186",8022970,"<p>Environment: Eclipse with the pydev plugin and Android developement in Linux.</p>

<p>If the same problem arises even after doing George Goh's solution, then pass the environment variable with the value as <code>AP_PORT=9999</code> using the interpreter setting of Eclipse.</p>
","android"
"187",28915195,"<p>Try to name your ScrollView so you can reference to it. For example if you called it 'scrollview' the code should look like this:</p>

<pre><code>def add_line(self):
    self.height += self.line_height
    scrollview.scroll_y=0
</code></pre>

<p>However you will see this is not working a 100% properly, the scroll_y attribute of ScrollView gives you the only control over scrolling. That's what the documentation says about it:</p>

<p>""Y scrolling value, between 0 and 1. If 0, the content’s bottom side will touch the bottom side of the ScrollView. If 1, the content’s top side will touch the top side.""</p>
","android"
"188",9326914,"<p>The first thing I would change is getting rid of the print statement in your loop.  IO is very slow.  This is, of course, assuming you're planning on doing something with these values besides display them to the screen ;)</p>
","android"
"189",20584889,"<p>It seems to be using <a href=""https://github.com/appcelerator/titanium_mobile/blob/master/support/win32/findpython.bat"" rel=""nofollow"">this script</a> to locate your system's Python.  The script seems to be picking up a Python installation in <code>C:\csvn\Python25</code> which apparently comes with Collabnet's SVN for Windows and is in all likelihood not a full Python installation.</p>

<p>You should just install a standard 64-bit Python from python.org.  That little batch script seems to suggest they support Python 2.5 and 2.6, though 2.7 would likely work too.  Maybe to be on the safe side start with 2.6: <a href=""http://www.python.org/download/releases/2.6.6/"" rel=""nofollow"">http://www.python.org/download/releases/2.6.6/</a></p>

<p>Just install to the normal default installation path of <code>C:\Python26</code> and make sure that path is early on your <code>%PATH%</code> environment variable.</p>
","android"
"190",18838838,"<p>The error message is telling you what's wrong: that path, <code>/data/app/com.example.deliveryupdater-1.apk(newline)</code>, does not exist. Probably there is not a filename ending with a newline in the directory. I assume you are iterating over lines from a file or something of that sort, which would explain why you have the newline. Why not just slice <code>[8:-1]</code> instead of <code>[8:]</code>, or perhaps, just <code>.rstrip()</code> on the line (this will work even if the line doesn't have a newline, as the last line in the file might not)?</p>

<pre><code>if line.startswith(""package:""):
   apkPath = line[8:].rstrip()
   print apkPath
pullCmd = './adb pull ' + apkPath
pullData = os.popen(pullCmd,""r"")
</code></pre>
","android"
"191",9440142,"<p>Turns out everything was working just fine. It was my desktop player VLC that wasn't decoding the file correctly. AMR/3GP audio is horrible.</p>
","android"
"192",39012177,"<p>add a new line character when writing the strings</p>

<p><code>file.write(perm1 + '\n')</code></p>
","android"
"193",26640619,"<p>It turns out my problem was that I was doing it all in my main Activity, while Android apps require that URLConnections be established in another thread. So I solved this by making a separate AsyncTask to handle the upload.</p>
","android"
"194",17116718,"<p>I've struggled with this problem myself, and I couldn't figure out what it was, since it worked perfectly on my iPhone, I decided to look into the problem and find a quick solution. 
My local machine is a Mac OSX 10.10+, one option would have been to start an Apache server, but that's super unhandy - changing the DocumentRoot every time you want to check something quickly on your Android device. Besides that, changing the DocumentRoot is a pain in the a** on Mac OSX 10.10. </p>

<p>If you want to use:</p>

<pre><code>python -m SimpleHTTPServer
</code></pre>

<p>on your Android, do this:</p>

<pre><code>sudo python -m SimpleHTTPServer [ANY PORT YOU WANT, BUT NOT 8000]
</code></pre>

<p>I hope this helps. </p>

<p>cheerz -Pit</p>
","android"
"195",36001080,"<p>if you want to set relative path that work on all other fellow system without changing again and again then set ndk root path in such a way.</p>

<p>NDK_ROOT=""$APP_ROOT/../your ndk name""</p>

<p>your ndk is placed one directory behind the proj.android file.</p>
","android"
"196",20726584,"<p>It means you didn't followed the requirements / python-for-android installation process. You get this issue because you didn't installed the Android API 8 on your computer.</p>
","android"
"197",22954270,"<p>There are ways to do this easily. Look what I foung on google:</p>

<ul>
<li>contacts : here is a guide on exporting yo</li>
<li>call logs : this <a href=""https://play.google.com/store/apps/details?id=com.dukemdev"" rel=""nofollow"">app</a> exports it as csv</li>
<li>sms : <a href=""https://play.google.com/store/apps/details?id=com.zegoggles.smssync&amp;hl=en"" rel=""nofollow"">app</a> for exporting those..</li>
</ul>

<p>This way you can save all the files you need on your computer andd access them at will.. </p>

<p>if you mean accessing internal android API from python/Perl for developing a python/perl based app - I dont know of any such bridge. But for VB you have <a href=""http://www.basic4ppc.com/"" rel=""nofollow"">Basic4Android</a> which works pretty well, check it out.</p>

<p>Good luck</p>

<p>Just found this - <a href=""https://code.google.com/p/python-for-android/"" rel=""nofollow"">https://code.google.com/p/python-for-android/</a> maybe this is what you need.</p>
","android"
"198",25313314,"<p>I've been working on a similar problem for a while, and I just found a solution. The issue is that App Engine uses ""US-ASCII"" as the default character set instead of the more useful ""UTF-8"". </p>

<p>Here are some related resources concerning this problem:</p>

<p><a href=""http://stackoverflow.com/questions/11907764/is-there-a-way-to-use-utf-8-with-app-engine"">Is there a way to use UTF-8 with app engine?</a></p>

<p><a href=""https://code.google.com/p/googleappengine/issues/detail?id=2219"" rel=""nofollow"">https://code.google.com/p/googleappengine/issues/detail?id=2219</a></p>

<p>For me though, I was never able to override the default charset of the JVM through any of the App Engine config settings. Therefore, the only solution that worked for me was explicitly stating the charset whenever you read (or write) data from your endpoints. </p>

<p>If you're using an InputStreamReader, you can do this:</p>

<pre><code>new InputStreamReader(mInputStream, ""UTF-8"")
</code></pre>

<p>Alternatively you can read the data as bytes, and then create a String from the bytes:</p>

<pre><code>ByteArrayOutputStream buffer = new ByteArrayOutputStream();
int nRead;
byte[] data = new byte[16384];
while ((nRead = mInputStream.read(data, 0, data.length)) != -1) {
    buffer.write(data, 0, nRead);
}
buffer.flush();
String response = new String(buffer.toByteArray(), ""UTF-8"");
</code></pre>

<p>Hope this helps! I can't believe this has been an App Engine problem since 2009...</p>
","android"
"199",36532125,"<p>Please take a look at this <a href=""https://tensorflow.github.io/serving/serving_basic#load-exported-tensorflow-model"" rel=""nofollow"">section</a> in the tutorial for how to load a <code>SessionBundle</code> in c++.</p>

<p>Once you have a SessionBundle you can use utilities in <a href=""https://github.com/tensorflow/serving/blob/master/tensorflow_serving/session_bundle/signature.h"" rel=""nofollow"">signature.h</a> to get a signature (e.g., <code>GetClassificationSignature</code>) then run an inference (e.g., <code>RunClassification</code>).</p>
","android"
"200",6357035,"<p>KML is Keyhole Markup Language (KML) is an XML notation for expressing geographic annotation 
Download sample project which can parse kml data from the following url. </p>

<p><a href=""http://www.warriorpoint.com/blog/downloads/"" rel=""nofollow"">http://www.warriorpoint.com/blog/downloads/</a></p>

<p>Thanks
Deepak</p>
","android"
"201",30953090,"<p>random and webbrowser are builtin modules, you should not include them in the requirements line. This line is only for external things that will be installed with pip, or internal/external things with a special recipe for their compiled components.</p>
","android"
"202",12162008,"<p>PyAudio wraps on the <a href=""http://portaudio.com/"" rel=""nofollow"">PortAudio</a> library.  So until PortAudio itself wraps Android's underlying audio system, PyAudio won't have a chance of working on Android.  In the meantime, there's a <a href=""https://www.assembla.com/spaces/portaudio/tickets/154"" rel=""nofollow"">ticket</a> filed on PortAudio for Android support, which you can track.</p>
","android"
"203",21254174,"<p>I am using Flask on the server side to implement webservices to communicate with the mobile. It is very easy to use. Here is the link for the library <a href=""http://flask.pocoo.org/"" rel=""nofollow"">http://flask.pocoo.org/</a></p>

<p>Hope that helps</p>
","android"
"204",21595558,"<p>The simplest case for handling a HTTP POST request is:</p>

<pre><code>from flask import Flask, request

app = Flask(__name__)

@app.route(""/data"", method=(""POST"",))
def handle_data():
    return ""Hello World - you sent me "" + str(request.values)

if __name__ == '__main__':
    app.run()
</code></pre>
","android"
"205",15102778,"<p>Looks like this is because the output is shorter than the input so it's not overwriting the whole thing.</p>

<p>Tried writing out to another file?</p>
","android"
"206",9384247,"<pre><code> import android, time
 droid = android.Android()
 droid.startLocating()
 time.sleep(15)
 loc = droid.readLocation().result
 if loc = {}:
   loc = getLastKnownLocation().result
 if loc != {}:
   try:
     n = loc['gps']
   except KeyError:
     n = loc['network'] 
   la = n['latitude'] 
   lo = n['longitude']
   address = droid.geocode(la, lo).result
 droid.stopLocating()
</code></pre>
","android"
"207",32002075,"<p>collapse_key only has an effect when the device is offline, for example if my device is in aeroplane mode, and it gets sent 5 messages with the same collapse_key, the device would only get the last one when aeroplane mode is turned off.</p>

<p>If a device is continuously connected to GCM, then each message will arrive on your device.</p>

<p>It sounds like you want to set a <a href=""http://developer.android.com/reference/android/app/NotificationManager.html#notify(java.lang.String,%20int,%20android.app.Notification)"" rel=""nofollow"">tag</a> on your notification, so that when a new message arrives it will replace the existing notification.</p>
","android"
"208",35188127,"<p>The suggested way for doing element linking goes something like this.</p>

<p>KV:</p>

<pre><code>&lt;MainScreen&gt;:
    widgetscreen: wdscreen
    FloatLayout:
        id : wdscreen
        ...
</code></pre>

<p>Python:</p>

<pre><code>from kivy.properties import ObjectProperty # don't forget to add the import

class MainScreen(Screen):

    widgetscreen = ObjectProperty(None)
    ....
</code></pre>

<p>Let's take a look at what's happening here. First, in the Python code, we create a class attribute of <code>MainScreen</code>, <code>widgetscreen</code>, which defaults to <code>None</code>. Then, in our KV file, we set that attribute of <code>MainScreen</code> to <code>wdscreen</code>. In KV lang, ids work like variables, so when we set <code>widgetscreen</code> to <code>wdscreen</code>, we're actually setting it to the FloatLayout we defined with id <code>wdscreen</code>. At  runtime, kivy will fill in our Python attribute with the appropriate widget.</p>

<p>With that, you should be able to access <code>widgetscreen</code> from within <code>MainScreen</code> as <code>self.widgetscreen</code>. You don't even need to use <code>ids</code>. </p>
","android"
"209",19652907,"<p>Turned out there was some server side image editing before generating the <code>sha1</code> sum that wasn't meant to be done in this scenario. They made changes on the server side and now this is working perfectly.</p>
","android"
"210",37753230,"<p>This is not a supported use of python-for-android. In order for your app to function, you need to interact with one of the available bootstraps - sdl2, pygame or webview. Kivy knows how to interact with the sdl2 and pygame bootstraps, and the webview bootstrap just uses an Android Webview to display content from a local web server (flask). If you want to use Tkinter, you would need to create a bootstrap for it (either a new bootstrap in p4a itself, or some python code to connect Tkinter to an existing bootstrap like sdl2).</p>
","android"
"211",36679086,"<p>You have installed kivy, but not properly. As it says, a DLL is missing - an important one and therefore it won't even run. Your code is ok, don't worry about that.</p>

<p>Kivy runs on each platform that Kivy supports, otherwise it'd be kind of... well, you know. Just don't install it with copy&amp;paste and install it the proper way as it's mentioned <a href=""https://kivy.org/docs/installation/installation-windows.html"" rel=""nofollow"">here</a> + don't forget to install libraries before you install kivy. For android you'd need to use <a href=""https://kivy.org/#download"" rel=""nofollow""><code>vdi</code></a> or it won't be releasable as APK(e.g. for google play).</p>

<p>QPython is a fantastic tool for a beginner, but the cons are that when you have large files, the editor has lags and also they don't use latest kivy afaik.</p>

<p>Also, use <code>pip</code> and spare yourself troubles with packages, because sometimes it can be painful. For this purpose I made <a href=""https://github.com/KeyWeeUsr/KivyInstaller"" rel=""nofollow"">KivyInstaller</a>, because beginners sometimes have problems on windows - or mostly people who decide to learn coding with python and kivy first. Not a bad idea though, but they're not reading docs and just skip to word ""install"" and... here you go.</p>

<p>Recommended packages are basically at <a href=""https://github.com/kivy"" rel=""nofollow"">kivy github</a> and are very useful if you are going to work on android. There are also <a href=""https://kivy.org/docs/api-kivy.modules.html?highlight=modules#module-kivy.modules"" rel=""nofollow"">modules</a> especially for kivy that'll help you with developing.</p>
","android"
"212",13444534,"<p>Yeah! its posible!, but you need install termux terminal on Android and later open the termux terminal and write:</p>

<pre><code>apt-update
apt-install python
pip install django
django-admin startproject demo
cd demo
python manage.py runserver 0.0.0.0:8000
</code></pre>

<p>and its all, open localhost:8000 on your browser, see the picture:</p>

<p><a href=""http://i.stack.imgur.com/89a7e.jpg"" rel=""nofollow""><img src=""http://i.stack.imgur.com/89a7e.jpg"" alt=""enter image description here""></a></p>
","android"
"213",38924498,"<p>You can try <a href=""https://github.com/dtmilano/AndroidViewClient"" rel=""nofollow"">AndroidViewClient/culebra</a> which is a drop-in replacement for <code>monkeyrunner</code> in 99% of the cases and because it's python you won't have to deal with those jython problems.</p>
","android"
"214",8030965,"<p>Switch RX-TX for the blueSMiRF when it shall talk with the arduino board.</p>

<p>If you are able to connect to the blueSMiRF through the PC it has RX-TX setup as the arduino-board.</p>

<p>PC to blueSMiRF setup:<br>
PC TX --> Arduino RX --> blueSMiRF RX<br>
PC RX &lt;-- Arduino TX &lt;-- blueSMiRF TX<br></p>

<p>Arduino to blueSMiRF setup:<br>
Arduino RX --> blueSMiRF <b>TX</b><br>
Arduino TX &lt;-- blueSMiRF <b>RX</b><br></p>
","android"
"215",11179014,"<p>There are many ways to do this. </p>

<p>1) When you check the users login details if it checks out you can then create a random UUID or string and store the User object in memcache with the random string as the Key and the User Object as the value. Then return the random string along with your response headers. On the mobile when you are parsing the response, get this header and store it in the local cache. On all further requests keep sending this key back in the request header and in your controller get the User object from memcache using this key and proceed. If the object is not in memcache you can send back a response which prompts the user to log in.</p>

<p>2) If you dont want to use memcache you can store the User object in the session and on the client side while parsing the response get the session id from the response. Its usually JSESSIONID. Then store that and resend it with further requests. In the controller you can check if the current session has the user object else force login.</p>

<p>1) Another way to go would be to return the appengine key for the user along with the response and resend it.</p>

<p>Just google get response header from response. Then get the SESSIONID/JSESSIONID header, store and add the field with the same name and value to all further request headers. Thats the easiest way.</p>

<p>My first answer on stackoverflow and no code exapmles, dangit if only i knew python.</p>
","android"
"216",39405376,"<p>First You must init <code>django</code>:</p>

<pre><code>import os

import django

os.environ['DJANGO_SETTINGS_MODULE'] = 'testapp.settings'
if hasattr(django, 'setup'):
    django.setup()

from django.core.management import call_command
</code></pre>

<p>And run command:</p>

<pre><code>call_command('runserver')
</code></pre>
","android"
"217",38578280,"<p><a href=""https://kivy.org/docs/api-kivy.uix.behaviors.button.html#kivy.uix.behaviors.button.ButtonBehavior"" rel=""nofollow"">Here</a> is the button API in kivy. The two bindings that applicable to your problem are the <code>on_press</code> and <code>on_release</code> bindings. You would use these with the <code>Button.bind()</code> method. An example of binding a function to button binding is available <a href=""https://kivy.org/docs/api-kivy.uix.button.html#"" rel=""nofollow"">here</a>. </p>
","android"
"218",35342941,"<p>You need to pass the proper app activity in code, which will be launched when app launches and appium looks for that activity.</p>
","android"
"219",20280770,"<pre><code>if request.user.is_authenticated():
</code></pre>

<p>It mains: the request user is login success. For example, people's cookie not out date<U+3002></p>

<p>when<code>auth_login</code>execute success,django will help you save user cookie and sesion<U+3002></p>

<p>example:
in templates:</p>

<pre><code>{% if user.is_authenticated %}
    &lt;p&gt;Welcome, {{ user.username }}. Thanks for logging in.&lt;/p&gt;
{% else %}
    &lt;p&gt;Welcome, new user. Please &lt;a href={% url 'login_url' %}&gt;log in&lt;/a&gt;.&lt;/p&gt;
{% endif %}
</code></pre>

<p>in views:</p>

<pre><code>def my_view(request):
   if not request.user.is_authenticated():
        return redirect('/login/')
</code></pre>

<p>in your login view:</p>

<pre><code>def login_app(request):
    ...
    if request.user.is_authenticated():
        #tell user he has login successful,or redict other page
    else:
        username = request.POST.get('username', '')
        password = request.POST.get('password', '')
        user = authenticate(username=username, password=password)
        if user is not None and user.is_active:
            auth_login(request, user)
        #tell user he login successfull
</code></pre>

<p>more info <a href=""https://docs.djangoproject.com/en/dev/topics/auth/default/"" rel=""nofollow"">doc</a></p>

<p>your android app has reviced http response, it has cookie info, please save it and next request bring cookie.</p>

<p>django's doc is very ++ ,please read careful</p>

<p>Excuse for poor English.</p>
","android"
"220",14716569,"<p>In Ubuntu, <a href=""http://manpages.ubuntu.com/manpages/precise/en/man1/pip.1.html""><code>pip</code></a> is provided by the <a href=""https://apps.ubuntu.com/cat/applications/python-pip"">python-pip <img src=""http://hostmar.co/software-small"" alt=""Install python-pip""></a> package. You can install it in the Software Center, or, if you prefer to use the command line:</p>

<pre><code>sudo apt-get update &amp;&amp; sudo apt-get install python-pip
</code></pre>

<p>If you have not already installed <a href=""https://apps.ubuntu.com/cat/applications/python-dev"">python-dev <img src=""http://hostmar.co/software-small"" alt=""Install python-dev""></a> and <a href=""https://apps.ubuntu.com/cat/applications/build-essential"">build-essential <img src=""http://hostmar.co/software-small"" alt=""Install build-essential""></a>, you should install them too. (But it seems your <code>apt-get</code> command <em>might</em> have successfully installed them. If you're not sure, you can check by trying to install them again. Or with <code>apt-cache policy python-dev build-essential</code>.)</p>

<p>Once the necessary software is installed, if you wish to update it further, you can do so with <code>pip</code> itself, by running:</p>

<pre><code>sudo pip install --upgrade pip 
sudo pip install --upgrade virtualenv
</code></pre>

<p><em><strong>Source:</strong> <a href=""http://www.saltycrane.com/blog/2010/02/how-install-pip-ubuntu/"">How to install pip on Ubuntu</a> by <a href=""http://www.saltycrane.com/about/"">Eliot</a></em> (dated, but should still apply)</p>
","android"
"221",18724932,"<p>Theoretically (!) Kivy supports all python packages, so you can use <code>sqlite</code> + <code>sqlalchemy</code> to store it your data directly on the device or maybe even remote database with SSL tunnel for transporting SQL. More <a href=""http://cheparev.com/kivy-sqlite/"" rel=""nofollow"">here</a></p>
","android"
"222",8935896,"<p>I have tested your script just now on a real device and it works just fine. Make sure you have the lastest version of SL4A and your Python modules up to date.</p>

<p>There is no error in the syntax so that's ruled out.</p>
","android"
"223",23330413,"<p>There is QPython, which is a great concept, but on my particular device (Galaxy S4 with A 4.4 upgrade) SL4A is more stable than QPython...</p>

<p>If you wish to give QPy a try, download the QPython app from Play Store (I use the Python v. 2.X version), then in the app's settings download additional packages and one of them is a fully functional pyjnius, you can access ANYTHING you would from a java app, but inside the super convenient python environment, the guys behind QPy have done an incredible job, yet the interpreter often crashes, but this is not consistent across all of my devices and changes with QPy's updates.</p>

<p>To illustrate, I use pyjnius to access advanced TTS features of the OS not accessible to SL4A. There are a couple of good examples on QPy's site: <a href=""https://github.com/kivy/pyjnius/blob/master/docs/source/android.rst"" rel=""nofollow"">https://github.com/kivy/pyjnius/blob/master/docs/source/android.rst</a>, try <a href=""https://www.youtube.com/watch?v=8Jwp1PTvECI"" rel=""nofollow"">https://www.youtube.com/watch?v=8Jwp1PTvECI</a>, google for pyjnius android.</p>
","android"
"224",38405419,"<p>You need to manually obtain a registration token for a client (Android, iOS, web) before you can use pyfcm to send message to the client after obtaining the client's fcm registration token.</p>
","android"
"225",34829279,"<p>you need to use  WebSocketOptions like this:</p>

<pre><code>  WebSocketOptions options = new WebSocketOptions();
  options.setMaxMessagePayloadSize(1000000); //max size of message
  options.setMaxFramePayloadSize(1000000); //max size of frame
  mConnection.connect(wsuri, new WebSocketHandler() {},options);
</code></pre>
","android"
"226",10249765,"<p>Basically, as a linux noob I didn't know that I had to export the required variables to the root's .bashrc file, as I didn't know that there are different bash profiles for each user, and then run the command as a root. As I did that the build script worked as it should.</p>
","android"
"227",7949081,"<p>You asked a general question, so the best I can do is give you a general answer. On android, you can't execute python as far as I know. The only thing that comes close is <a href=""http://google-opensource.blogspot.com/2009/06/introducing-android-scripting.html"" rel=""nofollow"">Android Scripting Environment</a>.</p>
","android"
"228",30341689,"<p>From my personal experience, you should install AndroiviewClient with easy_install and pypi, that is the official site for python packages, AndroidViewClient is very often updated there too, you should only use the package from github for development only, for any further AndroidViewClient updates, just type easy_install --upgrade AndroidViewClient:<br>
1) Go to your Python folder and type: easy_install AndroiViewClient, it will automatically load AndroidViewClient from <a href=""http://pypi"" rel=""nofollow"">http://pypi</a>..., the package will be setup in the folder C:\Python27\Lib\site-packages\androidviewclient-10.4.0-py2.7.egg (that is my current version) <br>
2) Download the package from github, and set it anywhere you want, no easy_install or whatever, just unzip it. I just use this package to test python check-import.py as suggested in the wiki, the program check-import.py only exists in this package. <br>
3) If I remember well, I don't even need to setup any environment variables for AndroidViewClient, just add the Python folder into the environment variable path. <br>
4) Start Culebra to see how the generated script looks like, it will simplify your life in the beginning to understand the structure, if you use Culebra in the beginning you will not see errors like monkeyrunner, that is just an example.</p>
","android"
"229",33569469,"<p>Using Kivy's <a href=""https://github.com/kivy/python-for-android"" rel=""nofollow"">python-for-android project</a> would work as a starting point that can compile the python interpreter and bundle it in an android application, but you'd need to create a new frontend (in terms of the new toolchain, a bootstrap) to actually run the python code. You could check the kivy launcher stuff (built into the pygame bootstrap) to see how to call the python interpreter from java code.</p>
","android"
"230",31390634,"<p>The code does not run because of the method call bes gps plyer passing as parameters on_location = its function example:</p>

<pre><code>from plyer import gps
from kivy.app import App
from import kivy.uix.button Button

class mi_app(App):
    def buscar_coord (self, **kwargs):
        info = Kwargs.items()
        ## Decodificas the json
        print str(info)
    def gps_activar(self, ins):
        self.buscar_coord()
    def build(self):
        gps.configure (on_location = self.buscar_coord)
        ## we call start method
        gps.start ()
        return Button(text = ""TEST_GPS"" on_release = self.gps_activar)

mi_app().run()
</code></pre>
","android"
"231",33323796,"<p>Yes it is possible to automate.I'm using Appium, so that i can use ANDROID 5.0.2 version also. </p>

<p>You need following things in your system</p>

<pre><code>•   Android SDK
•   Java Development Kit 1.8
•   APPIUM for windows
•   Eclipse with ‘APPIUM-Web driver’ framework configured
•   Android device (&gt; 4.2 version) and its respective device manager should be installed in your system
</code></pre>

<p>Im using that with java so i mentioned JDK</p>
","android"
"232",35683016,"<pre><code>droid.recognizeSpeech(""foo"", None, None)
</code></pre>

<p>returns an Array with the recognized Speech in Index number 1. So if you want to access it, you have to type</p>

<pre><code>return droid.recognizeSpeech(""foo"", None, None)[1]
</code></pre>
","android"
"233",21663426,"<p>Wow, I fixed this one quite quickly. </p>

<p>As a last hope I tried entering a full url: <code>open('http://google.com')</code> and it worked like a charm. </p>

<p>So for anyone else wondering, a full url is required!</p>
","android"
"234",19901981,"<p>Here are some things I can say :</p>

<ol>
<li><p>Google APIs console doesn't show GCM statistics, show you shouldn't expect to see anything there.</p></li>
<li><p>Your server doesn't send a <code>message</code> key (it sends only <code>name</code> and <code>email</code>, so I don't know what's the <code>message</code> key that is null in the debugger screenshot.</p></li>
<li><p>I don't understand this line :</p></li>
</ol>

<p><code>private final BroadcastReceiver mHandleMessageReceiver = new BroadcastReceiver()</code></p>

<p>You don't have to instantiate the BroadcastReceiver that receives the messages from GCM. You should declare it in your manifest as shown on many tutorials (including the official GCM programming guide).</p>

<p>My guess is that you are invoking the BroadcastReceiver locally in your app, and the message you are sending from your server is not reaching the app. </p>

<p>You should include the response your server gets from Google in your question, so that we can be sure the problem is not on your server side. You should also include your manifest.</p>

<p>This is not exactly an answer, but it's too long for a comment, and I think it can point you in the direction of solving your problem. </p>
","android"
"235",17116718,"<p>need to know the ip address of your machine .. 
Make sure both of your machines (tablet and computer) connected to same network</p>

<p>192.168.0.22 - say your machine address</p>

<p>do this :</p>

<p>192.168.0.22:8000   -- from your tablet</p>

<p>this is it !!!</p>
","android"
"236",33162605,"<p>This is actually a trick of groovy.  <code>GString#execute()</code> is not blocking by default.  However we can make it blocking by waiting for the exitValue.</p>

<p>So your code would work if you changed</p>

<pre><code>task generateSources &lt;&lt; {
    def script = ""python downloadAPK.py"".execute()
}
</code></pre>

<p>to wait for the <code>Process</code> to end before letting the task complete</p>

<pre><code>task generateSources(dependsOn: assembleDebug) &lt;&lt; {
    def process = ""python downloadAPK.py"".execute()
    // Wait till the process completes before continuing
    int exitValue = process.waitFor()
    println ""Process exited with value $exitValue""
}
</code></pre>

<p>Then when you build just run <code>gradlew generateSources</code> and since that task depends on <code>assembleDebug</code> running first the apk will always be generated before the task runs.  This probably also means the <code>Process#waitFor</code> is pointless since it executes after the APK is generated</p>
","android"
"237",28643358,"<p>I had the same issue, follow <a href=""http://www.darpandodiya.com/code/setup-androidviewclient-windows/"" rel=""nofollow"">this tutorial</a>. For your case you need to start on the step [8.Download zip file from GitHub].</p>
","android"
"238",6447174,"<p>This usually takes place when your application is idling for too long and not communicating with MySQL. You can either:</p>

<ul>
<li>increase the mysql servers connection timeout (in your case the <code>wait_timeout</code>)</li>
<li>send out dummy MySQL queries from time to time <code>SELECT 1</code></li>
</ul>

<p>If you have access to MySQL's connections settings definitely go with the first one.</p>
","android"
"239",39939523,"<p>After dissembling my <code>apk</code> file, I figured out that <code>python-for-android</code> stores all of its stuff including the python installation and the project itself in a binary file named <code>private.mp3</code> so the source is not fully open and I might be good to go.</p>
","android"
"240",9365390,"<p>Ok I solved the problem, It seems my android default mail app writes content disposition for everything.</p>

<p>And the file name was all wicked as well. </p>

<p>So I solved the problem with (Since I'm only interested in media attachments):</p>

<pre><code>from email.header import decode_header
    def get_attachments(email_message_instance):
        attachments = []
        for part in email_message_instance.walk():

            if part.get_content_maintype() not in ['image', 'video', 'audio']:
                continue

            if part.get('Content-Disposition') is None:
                continue

            data = part.get_payload(decode=True)
            if not data:
                continue

            filename = part.get_filename()      
            filename =  u' '.join(w.decode(e or 'ascii') for w,e in decode_header(filename))        
            attachments.append((filename, data))

        return attachments
</code></pre>
","android"
"241",31574105,"<p>I tried just plain installing kivy as they say to on their website, and it worked.</p>

<pre><code>sudo add-apt-repository ppa:kivy-team/kivy
apt-get install python-kivy
</code></pre>
","android"
"242",24269952,"<p>Why create your own game engine when there are several really good, free and open source implementations of this on the web that work well on Android.  I highly recommend you take a good look at the jMonkeyEngine SDK or the LWJGL for Java or the PowerVR SDK or Assimp for C++.  I use the PowerVR plugin for Blender to export to their POD and Collada formats, which works really well.</p>

<p>Some of these open source solutions would probably give you an idea of what is missing in your code. There is a complete list of game engines for Android <a href=""https://software.intel.com/en-us/android/blogs/2012/03/13/game-engines-for-android"" rel=""nofollow"">here</a>.</p>
","android"
"243",18584359,"<p>It is possible to develop Android apps in Python using <a href=""https://code.google.com/p/android-scripting/"" rel=""nofollow"">SL4A</a> (Scripting Layer for Android) and other complementing frameworks.</p>

<p>Refer to <a href=""https://ep2013.europython.eu/conference/talks/developing-android-apps-completely-in-python"" rel=""nofollow"">this</a> Euro Python tutorial that provides an introduction to developing Android Apps using Python.</p>
","android"
"244",21006620,"<p>Python and perl are used internally by NDK tools to make the cross-compile environment more friendly. You only need them on the host. NDK can be built for Windows, Mac, or Linux. So the git repository contains all opensource that is required to compile NDK for any of these platforms.</p>
","android"
"245",32949502,"<p>Retrofit had few problems with handling files so i really recommend you to upgrade your library from beta1 to beta2 it works better.</p>

<p>In beta2 you make your api look like this - </p>

<pre><code>public interface ApiInterface {
        @Multipart
        @POST (""/api/Accounts/editaccount"")
        Call&lt;User&gt; editUser (@Header(""Authorization"") String authorization, @Part(""file\""; filename=\""pp.png\"" "") RequestBody file , @Part(""FirstName"") RequestBody fname);
    }
</code></pre>

<p>The 'file' in the part of 'RequestBody file' is the file entity name that you need to access on your server side. </p>

<p>This is how you call this request -</p>

<pre><code>File file = new File(imageUri.getPath());
        RequestBody fbody = RequestBody.create(MediaType.parse(""image/*""), file);
        RequestBody name = RequestBody.create(MediaType.parse(""text/plain""), firstNameField.getText().toString());
        Call&lt;User&gt; call = client.editUser(getToken(), fbody, name, id);
        call.enqueue(new Callback&lt;User&gt;() {
            @Override
            public void onResponse(retrofit.Response&lt;User&gt; response, Retrofit retrofit) {
            }

            @Override
            public void onFailure(Throwable t) {
            }
        });
</code></pre>

<p>This is a copy of code that <strong>ayon115</strong> wrote in the retrofit library discussion on this link - <a href=""https://github.com/square/retrofit/issues/1063"" rel=""nofollow"">https://github.com/square/retrofit/issues/1063</a></p>

<p>I used the same concept and it worked for me smoothly.</p>

<p>I really recommend you to go that link and read the discussion about the library and the difference between beta1 to beta2.</p>

<p>If You are having problem testing the server/client.</p>

<p>You can go to www.requestb.in and deploy a test server so you could test out your http requests from your client so you wouldn't need to run your server each time :)</p>

<p>And to test your client you can use the POSTMAN tool to make requests to your server.</p>

<p>Hope this helps.</p>
","android"
"246",28921997,"<p>I e-mailed PyTom, the creator of Ren'py, and he responded back instantly:</p>

<p>""Edit the rapt/blacklist.txt file, and delete the line that says **.py. ""</p>

<p>It worked! Thanks, PyTom.</p>
","android"
"247",33565774,"<p>For first: static files should be served by servers like nginx or lighttpd. About your question. I think you are taliking about controlled downloads. This feature calls X-Sendfile and implemented in nginx and other servers. You can read about it in Nginx documentation <a href=""https://www.nginx.com/resources/wiki/start/topics/examples/xsendfile/"" rel=""nofollow"">https://www.nginx.com/resources/wiki/start/topics/examples/xsendfile/</a></p>
","android"
"248",12036734,"<p>Everything seems to be set up correctly. It seems to me like that the message is never sent in the first place to your server. Since you can retrieve the from but not message, this is probably correct.</p>

<p>In the server, can you change the following line;</p>

<pre><code>values['data.message'] = message
</code></pre>

<p>to this;</p>

<pre><code>values['data.message'] = ""testMessage""
</code></pre>

<p>I think this will most likely lead to you getting the message in android.. Just temporarily change the message to see if the push is working to begin with..</p>
","android"
"249",17055496,"<p>Yes, the python <a href=""http://docs.python.org/2/library/zipfile"" rel=""nofollow"">zipfile</a> module lets you read files into memory. It reads file-like objects so the zipfile itself could be in memory also, if you find that useful.</p>
","android"
"250",16335796,"<p>I think its too big an answer and redundant as such. Will just point directly to the link :</p>

<p><a href=""http://qt-project.org/wiki/PySide_for_Android_guide"" rel=""nofollow"">http://qt-project.org/wiki/PySide_for_Android_guide</a></p>

<p>Also google for 'Necessitas' for further information.</p>
","android"
"251",29208984,"<p>Try this</p>

<pre><code>wv = (WebView) findViewById(R.id.wv);
String s = ""You HTML string"";
wv.loadData(stripHtml(s), ""text/html"", ""UTF-8"");
</code></pre>

<p>.</p>

<pre><code>public String stripHtml(String html) {
    return Html.fromHtml(html).toString();
}
</code></pre>
","android"
"252",18418746,"<p>I believe it should be <code>key=API-key</code>. I.e., the word <code>key</code> should be part of the value of the <code>Authorization</code> header.</p>
","android"
"253",18662437,"<p>You can alter padding inside your code using <a href=""http://kivy.org/docs/api-kivy.properties.html#kivy.properties.VariableListProperty"" rel=""nofollow"">VariableListPropery</a>. Example:</p>

<pre><code>from kivy.app import App
from kivy.uix.widget import Widget
from kivy.uix.textinput import TextInput
from kivy.properties import  VariableListProperty

class MyTextInput(TextInput):
    padding =  VariableListProperty(['24dp', '48dp'])

class MyApp(App):
    def build(self):
        return MyTextInput(text='This is an example text', multiline=False)

if __name__ == '__main__':
    MyApp().run()
</code></pre>

<p>This code requires 1.7 version, as noted in <a href=""http://kivy.org/docs/api-kivy.uix.textinput.html"" rel=""nofollow"">documentation of the widget</a>. I recommend uprgrading as I don't even see any API archive anywhere to check how it was setted before.</p>
","android"
"254",27996133,"<p><a href=""http://answers.opencv.org/question/24188/opencv-android-with-python/"" rel=""nofollow"">According to here:</a></p>

<blockquote>
  <p>there is sl4a / PythonForAndroid, unfortunately, it uses hardcoded java rmi invocations for anything os related. so - no opencv bindings there ;(
  i guess, you'll have to learn java.<br>
  <code>-berak (Nov 20 '13)</code></p>
</blockquote>

<p>Also, although further dated, this <a href=""https://github.com/kivy/python-for-android/issues/75"" rel=""nofollow"">still open issue on github</a> leads me to believe that there is still no Python-Android OpenCV implementation.</p>

<blockquote>
  <p>There is no camera implementation in Kivy right now. And we never said than opencv was available on python-for-android too.</p>
</blockquote>

<p>But there is hope for the future:</p>

<blockquote>
  <p>I have a plan of writing a recipe for it, not now, currently I am
  quite overwhelmed by others ;-)<br>
  <code>- ParokshaX (Jul 25, 2014)</code></p>
</blockquote>

<p><strong>QUIK EDIT:</strong></p>

<p>Lol, there is a working implementation on the open issue, it just doesn't have a nice recipe:</p>

<blockquote>
  <p>Here I attach the Eclipse project I have made to build libcv2.so for
  Python on Android. It is a little bit messy because I really had a
  headache working it out, and I'm short on time right now. Just import
  it into Eclipse (I use ADT 22.0 and NDK r9c) and it should compile. I
  took libopencv_java.so into the project so it shall be a dependency.
  Also libpython2.7.so is a dependency too.  If anyone can make this
  into a Python for Android recipe then that would be awesome.</p>
</blockquote>
","android"
"255",25113831,"<p>I had the exact same issue. As far as I can tell, this problem is caused by the version/build of Python installed on your phone. I assume you are using the Python 2 apk from the Py4a project. </p>

<p>To solve the problem, you can install <a href=""https://code.google.com/p/python-for-android/downloads/detail?name=Python3ForAndroid_r6.apk"" rel=""nofollow"">the Python 3 apk</a> which seems to better support SSL, but if you do so, you will need to port your scripts from Python 2 to Python 3.</p>
","android"
"256",7995202,"<p>I had a similar problem and finally solved it by writing a small singleton class in Java that runs the Python-4-Android binary from the SL4A installation in a subprocess created using java.lang.ProcessBuilder.  So I'm not using the SL4A mechanisms at all (triggers, upcalls, etc), just borrowing Python.</p>

<p>This seems cleaner than trying to start and connect to a Python process through SL4A.</p>

<p>This is Python 2.7.1, cross-compiling extensions from Mac OS X Snow Leopard. My Python modules are doing only text input and output, accepting socket connections, etc. No interaction with the Android API. It all works fine: writing a Java stream to Python input and reading a Java stream to get Python output. C extensions are build using the <a href=""http://code.google.com/p/python-for-android/wiki/BuildingModules"" rel=""nofollow"">P4A instructions</a> . (Android could not find .so dynalibs until I added</p>

<pre><code>[build_ext]
inplace=1
</code></pre>

<p>to setup.cfg during the build. I think this is because setup 'install' is never invoked on the Android. I'm just pushing with adb.</p>

<p>All the activity lifecycle states seem to be working, but I can't yet determine whether the sub-process is automatically suspended while the main process is in the stopped state.</p>

<p>I can post code in a couple of weeks if this is of interest.  (Just departing on vacation.)</p>

<p>My plan for packaging is to put a ZIP archive of the Python code in /assets and have the app unzip during the first onCreate.  I haven't implemented this yet, but I don't expect any problems.</p>
","android"
"257",36148417,"<p>Use the following lines:</p>

<pre><code>        String path = getFilesDir().getAbsolutePath() + File.separator + ""YourFileName"";

        File newFile = new File(path);
        if (newFile.exists()) {
            oldfile.renameTo(""newName"");
        }
</code></pre>

<p>Hope it helps!</p>
","android"
"258",23364720,"<p>atm, you can't. </p>

<p>you would have to recompile the cv2 module for android first, in a similar way python4android does it(redirecting system calls to java rmi), tough job.</p>
","android"
"259",22594664,"<p>Kivy has some built in intend handling code, as described <a href=""https://python-for-android.readthedocs.org/en/latest/android/#module-android.activity"" rel=""nofollow"">here</a>. You can bind functions to be called when a new intent is received.</p>

<p>You can also look at how this is implemented in python-for-android to see how to extend it if you need to.</p>
","android"
"260",19439865,"<p>First, all your problems will go away if you just keep the filenames in the SHA1 list you generate on the device. Another solution is to ensure the same order by, for example, running the SHA1 hashes through a sort function before combining them into a single one.</p>

<p>Alternatively, use a commutative function to combine the list of SHA1 hashes, so that the ordering doesn't matter.</p>
","android"
"261",34829279,"<p>you need to use  WebSocketOptions like this:</p>

<pre><code>  WebSocketOptions options = new WebSocketOptions();
  options.setMaxMessagePayloadSize(1000000); //max size of message
  options.setMaxFramePayloadSize(1000000); //max size of frame
  mConnection.connect(wsuri, new WebSocketHandler() {},options);
</code></pre>
","android"
"262",39561086,"<p>In Python, it is uncommon to click on an element by its coordinates, can you please try looking for this accept buttons's Xpath or Css selector expression? </p>

<p>For Android testing, you may consider using <a href=""http://selendroid.io/"" rel=""nofollow"">this tool</a></p>

<p>Below is a Python code snippet about how to click on a pair coordinates, as you can see, you need to use an element as reference.</p>

<pre><code>from selenium import webdriver
driver = webdriver.Firefox() //Or whichever browser you prefer
driver.get(""your url"")
reference=driver.find_elements_by_xpath(""Your xpath here"")

action = webdriver.common.action_chains.ActionChains(driver)
action.move_to_element_with_offset(reference, X, Y)
action.click()
action.perform()
</code></pre>

<p>Since you need to locate an element as reference anyway, why not simply click on this element directly without using coordinates?</p>
","android"
"263",8200317,"<p>Eventually there will be plenty of Android applications for programming on Android phones, but for now, the easiest route may be to <a href=""http://androlinux.com/android-ubuntu-development/how-to-install-ubuntu-on-android/"" rel=""nofollow"">install Ubuntu</a> on your Android phone.</p>
","android"
"264",8200317,"<p>Yes you can, <a href=""https://market.android.com/details?id=com.n0n3m4.droidc&amp;hl=en"" rel=""nofollow"">for C/C++</a> (but sorry, not free). I don't use python, don't know if it have similar one or not. Anyway, this is just-for-fun compiler, I don't think it can compile real code with such low processing power and memory.</p>

<p>If you didn't like this app or don't have money, try to compile <a href=""http://bellard.org/tcc/"" rel=""nofollow"">tiny C</a> for android. </p>
","android"
"265",29049753,"<p>The newest version 1.0.5 has released.</p>

<p>You can get it from <a href=""http://www.pgyer.com/qpython"" rel=""nofollow"">http://www.pgyer.com/qpython</a> .</p>

<p>Does it work for you ?</p>
","android"
"266",38155321,"<p><code>outs</code> is the stuff that the process prints to standard output.  As such, it will be a string, not an int.  Since they are different types, the comparison will always fail.</p>

<p>Perhaps your condition should be something like:</p>

<pre><code>if outs.strip() == '1':
    ...
</code></pre>
","android"
"267",31289363,"<p>The problem is coming from your initial vector (iv). OpenSSL is waiting for a number parameter (in hexadecimal), but in a string format of 16 characters.</p>

<p>Your code just returns the number in hexadecimal, but in ASCII format:</p>

<pre><code>    &gt;&gt;&gt; iv_counter = 11111111
    &gt;&gt;&gt; print(""%16X"" % iv_counter)
    '          A98AC7'
</code></pre>

<p>However, the expected value is:</p>

<pre><code>    '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa9\x8a\xc7'
</code></pre>

<p>To achieve it, you must replace that with:</p>

<pre><code>    &gt;&gt;&gt; print((""%032X"" % iv_counter).decode(""hex""))
    '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa9\x8a\xc7'
</code></pre>
","android"
"268",24849093,"<p>After much searching I found the solution!
<a href=""https://groups.google.com/forum/#!topic/kivy-users/ZX_M-pu6kK0"" rel=""nofollow"">https://groups.google.com/forum/#!topic/kivy-users/ZX_M-pu6kK0</a></p>

<p>in your buildozer spec file find these lines and alter them as follows:</p>

<pre><code>(str) Android NDK version to use
android.ndk = 8c

(str) Android NDK directory (if empty, it will be automatically downloaded.)
android.ndk_path = ~/android/android-ndk-r8c

(str) Android SDK directory (if empty, it will be automatically downloaded.)
android.sdk_path = ~/android/android-sdk-linux

(str) python-for-android git clone directory (if empty, it will be automatically cloned from github)
android.p4a_dir = ~/android/python-for-android
</code></pre>

<p>This links buildozer with the SDK/NDK/P4A that are within the kivy virtual machine.  </p>

<p>If you don't set these up buildozer will automatically download new copies.  Presumably the problem was caused by how buildozer downloaded/installed these new copies.  Someone with better knowledge of buildozer may be able shed light on the cause of this problem!.</p>
","android"
"269",21583290,"<p>Okay the answer was simple really - it helps if jenkins can make use of the sdk tools and AndroidViewClient paths!</p>

<blockquote>
  <p>sudo -Rm u:jenkins:rwx </p>
</blockquote>

<p>...fixed it</p>
","android"
"270",24557707,"<p>In case someone has the same problem, I solved it. 
The connection has to be by cable and on the VMware Player settings the network connection has to be bridged, also you must click ""Configure adapters"" and uncheck the ""VirtualBox Host-Only Ethernet Adapter"".</p>
","android"
"271",38415217,"<p>You can import it using following syntax (assuming that <code>ExampleWidget</code> is defined in <code>example.py</code> file and you have <code>__init__.py</code> in your directory):</p>

<pre><code>#: import ExampleWidget example.ExampleWidget

&lt;SecondWidget&gt;:
    ExampleWidget:
</code></pre>

<p>Described in the <a href=""https://kivy.org/docs/guide/lang.html#special-syntaxes"" rel=""nofollow"">documentation</a>.</p>
","android"
"272",39185785,"<p>Nevermind I just figured out that I could set WhatsApp as the standard app in the dialog so I don't have to specify the packagename anyway.</p>
","android"
"273",8798707,"<p>You're working on bad information. SSL can absolutely authenticate the client, it's just not something that is done for the bulk of SSL as the protocol is (or, atleast was) typically used to protect e-commerce sites where authentication of the server was important but doing so with the client was not important and/or not feasible. What you want to do is employ mutually-authenticated SSL, so that your server will only accept incoming connections from your app and your app will only communicate with your server.</p>

<p>Here's the high-level approach. Create a self-signed server SSL certificate and deploy on your web server. If you're using Android, you can use the keytool included with the Android SDK for this purpose; if you're using another app platform like iOS, similar tools exist for them as well. Then create a self-signed client and deploy that within your application in a custom keystore included in your application as a resource (keytool will generate this as well). Configure the server to require client-side SSL authentication and to only accept the client certificate you generated. Configure the client to use that client-side certificate to identify itself and only accept the one server-side certificate you installed on your server for that part of it.</p>

<p>If someone/something other than your app attempts to connect to your server, the SSL connection will not be created, as the server will reject incoming SSL connections that do not present the client certificate that you have included in your app.</p>

<p>A step-by-step for this is a much longer answer than is warranted here. I would suggest doing this in stages as there are resources on the web about how to deal with self-signed SSL certificate in both Android and iOS, both server and client side. There is also a complete walk-through in my book, <a href=""http://shop.oreilly.com/product/0636920022596.do"">Application Security for the Android Platform</a>, published by O'Reilly.</p>
","android"
"274",35247406,"<p><code>tf.Graph.as_graph_def()</code> retrieves the serialized graph. Then you just write it to a file.</p>
","android"
"275",30486896,"<p>I had the same error message (""subprocess.CalledProcessError: Command '['ant', 'debug']' returned non-zero exit status 2"") and the solution for me was to start up the GUI by calling</p>

<pre><code>~/.buildozer/android/platform/android-sdk-21/tools/android
</code></pre>

<p>and install the ""Android SDK Build-Tools"". A bit further up in the log file the missing build-tools were mentioned in my error log.</p>

<p>HTH.</p>
","android"
"276",9045201,"<p>You're trying to use a Python script that uses <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/aa394582%28v=vs.85%29.aspx"" rel=""nofollow"">Windows Management Instrumentation (WMI)</a>, on a device that doesn't have that library.</p>

<p>Sadly, WMI on Python requires the win32 library, which is only available on Windows. I don't think you're going to have much success on checking the installed programs on remote Windows computer from an Android device in this way.</p>
","android"
"277",16335796,"<p>Take a look : </p>

<p><a href=""https://github.com/raaron/pydroid"" rel=""nofollow"">https://github.com/raaron/pydroid</a></p>

<p>PyDroid is easier than pySide guide. But you should install it on ubuntu, or ubuntu with virtualBox. But first you should install Necessitas, Ant before setup PyDroid. If it is able to run Necessitas projec app on your device, then you can install PyDroid. Because PyDroid depends on Necessitas SDK. After installation of PyDroid, you open file manager as root, ""show hidden files"", go to /root/.pydroid location and open deploy.config, edit ""adb-path""(type terminal ""whereis adb"" to find location) and necessitas location. after that it is easy to deploy android app with PyDroid.</p>
","android"
"278",23963237,"<p>The reason for some delay between command is that <code>adbclient</code> uses mostly a <code>shell</code> connection to send them. This shell connection is not kept open. <code>monkeyrunner</code> uses a socket to send commands to <code>monkey</code> and thus why the delay between command is minimum.
<code>adbclient</code> could re-use an open <code>shell</code> connection or open a <code>socket</code> to <code>monkey</code> to do as <code>monkeyrunner</code>.</p>

<p>This is not difficult to implement, but not in the roadmap yet. Anyway, patches are always welcome.</p>

<p>On the other hand, for other most common cases <code>adbclient</code> is sevral times faster: <a href=""http://dtmilano.blogspot.ca/2013/09/androidviewclientculebra-takesnapshot.html"" rel=""nofollow"">http://dtmilano.blogspot.ca/2013/09/androidviewclientculebra-takesnapshot.html</a></p>
","android"
"279",36001080,"<p>There are some changes made on the new NDK r11 release and some tools were moved to different folders, I guess cocos2d-x scripts need to be updated to support the latest NDK release.
You can wait for a new cocos2d-x release or use the previous NDK (r10e) version.</p>
","android"
"280",22357511,"<p>Ran into the same problem.<br>
The tutorial is not very well written at this particular point.
I did the following on an Ubuntu system</p>

<ul>
<li>Download google_appengine for Python <a href=""https://developers.google.com/appengine/downloads"" rel=""nofollow"">https://developers.google.com/appengine/downloads</a></li>
<li>Extract the folder somewhere</li>
<li>Copy the places.csv and bulkloader.yaml from MobileAssistant-Data to the folder</li>
<li>Create the file upload_data.sh file in that folder</li>
<li><p>Write the following two lines and save the file</p>

<pre><code>#!/bin/sh 
./appcfg.py upload_data --config_file bulkloader.yaml --url=http://localhost:8888/remote_api --filename $1 --kind=$2 -e nobody@nowhere.com
</code></pre></li>
<li><p>Make the file executable <code>chmod a+x upload_data.sh</code> </p></li>
</ul>

<p>If all wen't well, running:  </p>

<pre><code>&lt;google_appengine folder&gt;./upload_data.sh places.csv Place
</code></pre>

<p>Should output something like:  </p>

<pre><code>12:55 PM Uploading data records.
[INFO    ] Logging to bulkloader-log-20140918.125544
[INFO    ] Throttling transfers:
[INFO    ] Bandwidth: 250000 bytes/second
[INFO    ] HTTP connections: 8/second
[INFO    ] Entities inserted/fetched/modified: 20/second
[INFO    ] Batch Size: 10
Password for nobody@nowhere.com: 
[INFO    ] Opening database: bulkloader-progress-20140918.125544.sql3
[INFO    ] Connecting to localhost:8888/remote_api
[INFO    ] Starting import; maximum 10 entities per post
.
[INFO    ] 2 entities total, 0 previously transferred
[INFO    ] 2 entities (1696 bytes) transferred in 58.8 seconds
[INFO    ] All entities successfully transferred
</code></pre>

<p>Hope it helps!</p>
","android"
"281",33565774,"<p>For first: static files should be served by servers like nginx or lighttpd. About your question. I think you are taliking about controlled downloads. This feature calls X-Sendfile and implemented in nginx and other servers. You can read about it in Nginx documentation <a href=""https://www.nginx.com/resources/wiki/start/topics/examples/xsendfile/"" rel=""nofollow"">https://www.nginx.com/resources/wiki/start/topics/examples/xsendfile/</a></p>
","android"
"282",18418746,"<p>I believe it should be <code>key=API-key</code>. I.e., the word <code>key</code> should be part of the value of the <code>Authorization</code> header.</p>
","android"
"283",24945148,"<p>Let java send the extra character. It did in my case too. 
I used - </p>

<p>data2 = data.strip() </p>

<p>if data2 == ""(your desired data)""</p>

<p>//execution instructions</p>

<p>and so on.</p>
","android"
"284",26897224,"<p>Use the screenmanager class from the kivy developers:<a href=""http://kivy.org/docs/api-kivy.uix.screenmanager.html"" rel=""nofollow"">http://kivy.org/docs/api-kivy.uix.screenmanager.html</a> </p>

<p>Not only can you then access the sub-widgets on various screens but you can also make use of the various complex behaviours that are already built-in such as the animated transitions between screens.</p>

<p>There's a great tutorial available here: <a href=""https://www.youtube.com/watch?v=xx-NLOg6x8o"" rel=""nofollow"">https://www.youtube.com/watch?v=xx-NLOg6x8o</a> (""Kivy crash course 14: Using a ScreenManager "")</p>

<p>The screenmanager has a <code>get_screen(name)</code> method that can be used to access the screens and you can use the <a href=""http://kivy.org/docs/api-kivy.uix.widget.html?highlight=ids#kivy.uix.widget.Widget.ids"" rel=""nofollow"">ids</a> to reference the sub-widgets.</p>

<p>This allows access but it's generally better practice to use custom properties to the base widgets (in this case, the screenmanager) to allow direct access without ids. In the case of the textinput you could create an ObjectProperty and assign it to the id of the target textinput in the kv file or you could create a StringProperty/NumericProperty and bind it to the text property of the textinput. </p>

<ul>
<li>Using ObjectProperty:
<a href=""http://stackoverflow.com/questions/18580794/usage-of-objectproperty-class"">Usage of ObjectProperty class</a></li>
<li>Using StringProperty:
<a href=""http://kivy.org/docs/guide/lang.html#re-using-styles-in-multiple-widgets"" rel=""nofollow"">http://kivy.org/docs/guide/lang.html#re-using-styles-in-multiple-widgets</a></li>
</ul>
","android"
"285",4733022,"<p>The easiest way is using <a href=""http://appinventor.googlelabs.com/about/"" rel=""nofollow"">AppInventor</a> from Google. It makes the programing of apps for Android a kids game.</p>
","android"
"286",8355752,"<p>You can install an app like <a href=""https://market.android.com/details?id=org.connectbot&amp;hl=en"" rel=""nofollow"">ConnectBot</a> which can provide a local shell terminal. From there you can run the interpretor with your given command line options.</p>
","android"
"287",31289363,"<p>The problem is coming from your initial vector (iv). OpenSSL is waiting for a number parameter (in hexadecimal), but in a string format of 16 characters.</p>

<p>Your code just returns the number in hexadecimal, but in ASCII format:</p>

<pre><code>    &gt;&gt;&gt; iv_counter = 11111111
    &gt;&gt;&gt; print(""%16X"" % iv_counter)
    '          A98AC7'
</code></pre>

<p>However, the expected value is:</p>

<pre><code>    '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa9\x8a\xc7'
</code></pre>

<p>To achieve it, you must replace that with:</p>

<pre><code>    &gt;&gt;&gt; print((""%032X"" % iv_counter).decode(""hex""))
    '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa9\x8a\xc7'
</code></pre>
","android"
"288",18838853,"<p>Python2.7-config was built for a 64 bit i386 system not for Android.  It's passing bad arguments to the compiler in the LOCAL_CFLAGS field.  Either run one that you built to cross compile on Android or specify the values yourself.  Check google for 'Python-For-Android' (Py4A) on how to embed python in an NDK app.</p>
","android"
"289",32179234,"<p>I had same problem. Most of the suggested solutions didn't work. Anyways, I found a solution you can see below:</p>

<pre><code>    # import touch events
    from appium.webdriver.common.touch_action import TouchAction

    # Find the list element. 
    list = driver.find_element_by_id('com.abc.android.abc:id/common_tab_list')
    # define touch
    action = TouchAction(driver)

    # adjust here to your needs !
    for x in range(0,10):
       action.press(x=750,y=1750).move_to(x=0, y=-75).perform()
</code></pre>

<p>the main part is the for loop. Basically its scrolling vertically 10 times. You may need to give different x and y coordinates. You can easily find this out when you enable ""pointer location"" on your device. This will show x and y coordinates when you touch your screen. To enable it simply go to </p>

<ol>
<li>settings</li>
<li>developer options</li>
<li>pointer location (names may differ I have german language on my phone)</li>
</ol>

<p>Then touch on the bottom of your device and on top you will see the coordinates. This you can add to ""action.press(x=yourX, y=yourY)....""</p>

<p>move_to() - since you want vertical scroll leave x as it is. y has a negative. Negative means that we are actually scrolling up not down. </p>

<p>perfrom() is perform. Not much to say.</p>

<p>Now I want to add 1 more thing. Instead of a for loop you can do the following:</p>

<pre><code> action.press(x=750,y=1750).move_to(x=0, y=-200).release().perform()
</code></pre>

<p>Noticed the difference? It's release(). When you add this I found that the list will be scrolled smoothly. Like when you swipe up and the list has some inertia. </p>

<p>Im not an expert but my answer should help you at least.
Good luck</p>
","android"
"290",29947134,"<p>After 3 weeks of debugging and see log files of server and log cat of client I'm not found any logical error happens so i return to see <strong>pythonanywhere</strong> free server limitations I found :</p>

<p><strong><em>Access to external internet sites from your code e.g. urllib or wget</em></strong></p>

<p><strong><em>Specific sites via HTTP(S) only</em></strong> </p>

<p>i don't know what is point means but i decided use <strong>https</strong> instead of <strong>http</strong> and it's work perfect in both wifi and mobile data </p>

<pre><code>json.accumulate(""user_name"", ""mkm"");
json.accumulate(""title"", ""hello"");
json.accumulate(""body"", ""hello all"");
json.accumulate(""img"", "" "");
RequestAddNewStory rans = new RequestAddNewStory(this , AddHashtag);
rans.execute(""https://-----.pythonanywhere.com/api/story"" , json.toString());
</code></pre>

<p>But i'm still don't know if <strong>pythonanywhere</strong> free server allow you to send your requests only <strong>https</strong> why <strong>http</strong> request work perfect via wifi only.</p>
","android"
"291",4184792,"<pre><code>final MessageDigest mDigest = MessageDigest.getInstance(""SHA-224"");
byte[] messageDigest = mDigest.digest(toEncrypt.getBytes());
final BigInteger number = new BigInteger(1, messageDigest);
final String sha = number.toString(16);
final int diff = 32 - sha.length();
final StringBuilder finalSHA = new StringBuilder(32);
for (int i=0;i&lt;diff;i++) {
 finalSHA.append(""0"");
}
finalSHA.append(sha);
return finalSHA.toString();
</code></pre>
","android"
"292",23265334,"<p>redirect the stdout/stderr in python and add a filter.</p>
","android"
"293",25178811,"<p>You should follow the debug instructions <a href=""http://kivy.org/docs/guide/android.html#debugging-your-application-on-the-android-platform"" rel=""nofollow"">in the kivy documentation</a>, and paste the logcat output here if it doesn't make the answer clear.</p>
","android"
"294",18478492,"<p>Confusingly, there are <em>two</em> projects called 'python for android'.</p>

<p>SL4A lets you run python scripts on android. Their PY4A is a step in their toolchain, but I don't know much about it. I understand there is some integration with android apis (you can use some hardware etc.), but limitations in how to run the programs (they aren't full apps, no gui etc.). This is stuff I infer from seeing other posts, I haven't tried it, don't take my word on the details. (Edit: actually it seems there is some ability to package apks and multiple ways to create a gui, I don't know the details)</p>

<p>Kivy is a graphical framework that supports many operating systems (linux, windows, osx, android, ios, maybe more already). You use it to build python guis. The kivy project also started their own python-for-android project which provides ways to compile the python interpreter for android and to package it as an actual android app (including java api integration with pyjnius etc.). Kivy is well integrated with it so that you can easily compile a python gui app for android, though I don't think this python-for-android is limited to kivy apps.</p>

<p>So, they are completely different projects that happen to have a component with the same name. SL4A is for running python scripts on android, I don't know much about its limitations or details. Kivy is a python graphical framework (not limited to android) that can be compiled via its own different python-for-android project to fully integrated gui android apps.</p>

<p>You can see (for instance) <a href=""https://play.google.com/store/apps/details?id=org.kivy.showcase"">kivy showcase</a> for examples of some simple kivy capabilities, or <a href=""https://play.google.com/store/apps/details?id=com.meltingrocks.flatjewels"">flat jewels</a> for an example of a simple game made in kivy. These are just examples, a lot more is possible.</p>
","android"
"295",10425577,"<p>There's and official <a href=""https://developers.google.com/android/c2dm/"" rel=""nofollow"">C2DM service</a> to receive updates from the cloud on mobile devices, which works in a way similar to channels, by opening a socket and listening for updates. Is there any reason why you don't want to use C2DM?</p>
","android"
"296",38751482,"<p>Looks like a typo - please confirm.
SCons command is not found.
Maybe use 'scons' ?</p>
","android"
"297",38751482,"<p>Looks like a typo - please confirm.
SCons command is not found.
Maybe use 'scons' ?</p>
","android"
"298",39052054,"<p>I think you should take a look at the <a href=""https://developer.android.com/reference/android/app/AlarmManager.html"" rel=""nofollow"">Android AlarmManager</a>. If this is what you need, <a href=""http://cheparev.com/kivy-receipt-notifications-and-service/"" rel=""nofollow"">here</a> is an example for Kivy.</p>

<blockquote>
  <p><strong>AlarmManager</strong></p>
  
  <p>This class provides access to the system alarm services. These allow you to schedule your application to be run at some point in the future. When an alarm goes off, the Intent that had been registered for it is broadcast by the system, automatically starting the target application if it is not already running.</p>
</blockquote>
","android"
"299",38199064,"<p>The <a href=""http://www.sqlite.org/c3ref/busy_timeout.html"" rel=""nofollow"">timeout</a> matters only if two transactions actually conflict.</p>
","android"
"300",33456804,"<p>Is there a specific reason you are trying to do this using JSON?  You can't just stuff binary data into a JSON string.</p>

<p>If you can avoid using JSON, then just POST the binary data over HTTP using a multipart/form-data request.</p>

<p>If for some reason you are stuck on using JSON, you can use base64 encoding to achieve this.  In your Android app, you need to base64 encode the binary data.  This will result in a string.  You can then send this string in your JSON to the server.  On the server side, you will then need to get this base64 encoded string from the JSON, base64 decode, and then save it to file (or whatever you want to do with the binary data).  Here's some small examples.</p>

<p>client side:</p>

<pre><code>int read;
byte[] buff = new byte[1024];
while ((read = in.read(buff)) &gt; 0) {
    out.write(buff, 0, read);
}
out.flush();
byte[] fileAudioByte = out.toByteArray();

String encodedString = Base64.encodeToString(fileAudioByte, Base64.DEFAULT);
</code></pre>

<p><code>encodedString</code> is a <code>String</code> that you will then add to your JSON to send to the server.</p>

<p>server side:</p>

<pre><code>import base64
...
audiofile_string = data['FileAudio']
audiofile_byte= base64.b64decode(audiofile_string)
# audiofile_byte now contains the bytes of the audio file, proceed to write to disk
</code></pre>
","android"
"301",20928511,"<p>I figured out the problem. When executing the command endpointscfg.py get_client_lib java \ -o . your_module.YourApi, make sure you exclude the ""\"".</p>

<p><strong>endpointscfg.py get_client_lib java -o . your_module.YourApi</strong></p>
","android"
"302",23119390,"<p><code>b'\xc3\xb6'</code> is a bytestring that can be decoded into Unicode string that contains a single <a href=""http://codepoints.net/U+00f6"" rel=""nofollow""><code>U+00f6 LATIN SMALL LETTER O WITH DIAERESIS</code> Unicode codepoint</a>:</p>

<pre><code>&gt;&gt;&gt; b'\xc3\xb6'.decode('utf-8')
u'\xf6'
</code></pre>

<p>By default <a href=""https://docs.python.org/2/library/sqlite3.html#sqlite3.Connection.text_factory"" rel=""nofollow""><code>text_factory</code> is set to <code>unicode</code> for <code>sqlite3</code></a> i.e., you should receive Unicode string for <code>TEXT</code> objects if you remove <code>connection.text_factory = str</code> from your code.</p>
","android"
"303",26943426,"<p>This is not directly possible, and indeed on android you must always account for the possibility that the OS will close your app while it is paused. You can instead use a <a href=""http://python-for-android.readthedocs.org/en/latest/android/#service-android-service"" rel=""nofollow"">service</a> to do more continuous stuff while the app is paused, and/or take account of those changes when the app is unpaused.</p>
","android"
"304",7225432,"<ol>
<li><p>Officially, there is no API exposed to SL4A for customization of notifications which exist does exist in Android. <br>
<strong>Reference:</strong> 
<a href=""http://developer.android.com/guide/topics/ui/notifiers/notifications.html#CustomExpandedView"" rel=""nofollow"">http://developer.android.com/guide/topics/ui/notifiers/notifications.html#CustomExpandedView</a>
<a href=""http://code.google.com/p/android-scripting/wiki/ApiReference"" rel=""nofollow"">http://code.google.com/p/android-scripting/wiki/ApiReference</a></p></li>
<li><p>Officially, there is no API exposed to SL4a for firing an intent on user click from user. .</p>

<pre><code>notify(
 String title: title,
 String message)
</code></pre></li>
</ol>

<p>Notify, just displays a notification that will be canceled when the user clicks on it. Now, somehow if you can trace cancellation of this notification, you can start a new intent using your script.</p>

<p><strong>Hack?</strong></p>

<p>Please note, Android treats these notification from SL4A and not from your script. (due to which you are getting the SL4A icon) Thus, somehow it is possible to use all API which are exposed to a normal JAVA code, treating SL4A as an application but then this approach will make all your apps using SL4a have the same logo. ;)</p>
","android"
"305",32752894,"<p>Your drawing code is running before the label pos has been set by its parent layout - basically you're hitting the issue that your rectangle position doesn't update when the label position later does.</p>

<p>To fix this you should make a binding to move the rectangle when necessary, such as:</p>

<pre><code>my_label.bind(pos=self.update_rect)
</code></pre>

<p>and a new method:</p>

<pre><code>def update_rect(self, label, new_pos):
    label.rect.pos = label.pos
</code></pre>

<p>You can also do the same for the size if necessary.</p>

<p>If you draw the rectangle in kv instead, these bindings are created automatically.</p>
","android"
"306",25465516,"<p>It turns out ""HTTP_"" was being prepended to any HTTP header sent. HTTP_AUTHORIZATION was being sent as ""HTTP_HTTP_AUTHORIZATION"".</p>
","android"
"307",19439865,"<p>First, all your problems will go away if you just keep the filenames in the SHA1 list you generate on the device. Another solution is to ensure the same order by, for example, running the SHA1 hashes through a sort function before combining them into a single one.</p>

<p>Alternatively, use a commutative function to combine the list of SHA1 hashes, so that the ordering doesn't matter.</p>
","android"
"308",12738120,"<p>I'm not sure if that book is great for Python 3. There is a Python3 APK(http://code.google.com/p/python-for-android/downloads/detail?name=Python3ForAndroid_r6.apk), but the other one, the standard PythonForAndroid is 2.6(?) based. You need to use the same version of python across both your android device and your local machine for what you're trying to do. I'm not sure which Python 3 ve</p>

<p>When I was playing with this and the same book, I had to install the same version of python on my local machine that was used in the APK I installed on my device. It was still a lot of screwing around to get it to work and wasn't really worth the effort in the end. </p>

<p>However, I found that just pushing the script across and instantly running it was way easier than trying to play with IDLE remotely. This is now how I rapidly prototype any Android apps I'm planning to work on.</p>
","android"
"309",22357511,"<p>Ran into the same problem.<br>
The tutorial is not very well written at this particular point.
I did the following on an Ubuntu system</p>

<ul>
<li>Download google_appengine for Python <a href=""https://developers.google.com/appengine/downloads"" rel=""nofollow"">https://developers.google.com/appengine/downloads</a></li>
<li>Extract the folder somewhere</li>
<li>Copy the places.csv and bulkloader.yaml from MobileAssistant-Data to the folder</li>
<li>Create the file upload_data.sh file in that folder</li>
<li><p>Write the following two lines and save the file</p>

<pre><code>#!/bin/sh 
./appcfg.py upload_data --config_file bulkloader.yaml --url=http://localhost:8888/remote_api --filename $1 --kind=$2 -e nobody@nowhere.com
</code></pre></li>
<li><p>Make the file executable <code>chmod a+x upload_data.sh</code> </p></li>
</ul>

<p>If all wen't well, running:  </p>

<pre><code>&lt;google_appengine folder&gt;./upload_data.sh places.csv Place
</code></pre>

<p>Should output something like:  </p>

<pre><code>12:55 PM Uploading data records.
[INFO    ] Logging to bulkloader-log-20140918.125544
[INFO    ] Throttling transfers:
[INFO    ] Bandwidth: 250000 bytes/second
[INFO    ] HTTP connections: 8/second
[INFO    ] Entities inserted/fetched/modified: 20/second
[INFO    ] Batch Size: 10
Password for nobody@nowhere.com: 
[INFO    ] Opening database: bulkloader-progress-20140918.125544.sql3
[INFO    ] Connecting to localhost:8888/remote_api
[INFO    ] Starting import; maximum 10 entities per post
.
[INFO    ] 2 entities total, 0 previously transferred
[INFO    ] 2 entities (1696 bytes) transferred in 58.8 seconds
[INFO    ] All entities successfully transferred
</code></pre>

<p>Hope it helps!</p>
","android"
"310",4396408,"<p>This is brilliant answer <a href=""http://stackoverflow.com/a/4470513/551383"">http://stackoverflow.com/a/4470513/551383</a> but if you really want this file is in android source i.e. <a href=""http://androidxref.com/4.2_r1/xref/sdk/monkeyrunner/scripts/help.py"" rel=""nofollow"">http://androidxref.com/4.2_r1/xref/sdk/monkeyrunner/scripts/help.py</a></p>
","android"
"311",25197707,"<p>It's actually not displaying only for the last button - it's displaying for each button, but in the same position. The problem is that <code>Button</code> is not a layout, and as such, does not perform layout of its children. So the <code>GridLayout</code> for each button is rendered at <code>0, 0</code> with size <code>100, 100</code> relative to the origin of the nearest relative parent (in this case, the <code>GridLayout</code>  <code>grid_l</code> because it is contained by the <code>ScrollView</code>).</p>

<p>When you add widgets to a non-layout widget, it's up to you to layout those widgets by setting position and size. Note that you must set the actual <code>pos</code> (or <code>x</code> and <code>y</code>) and <code>size</code> (or <code>width</code> and <code>height</code>) - you cannot use <code>pos_hint</code> or <code>size_hint</code>, as those are only handled by layouts.</p>

<p>This can be done easily using <a href=""http://kivy.org/docs/api-kivy.lang.html#dynamic-classes"" rel=""nofollow"">dynamic classes</a> in <a href=""http://kivy.org/docs/api-kivy.lang.html"" rel=""nofollow"">kv language</a>:</p>

<pre><code>&lt;CustomButton@Button&gt;:
    image_source: ''
    subtext: ''
    GridLayout:
        height: self.parent.height  # match the button's height
        width: 100                  # set to whatever you would like
        pos: self.parent.pos        # match the button's position
        cols: 1
        Image:
            source: root.image_source
        Label:
            text: root.subtext
</code></pre>

<p>To use your dynamic class, you will need to import <a href=""http://kivy.org/docs/api-kivy.factory.html"" rel=""nofollow""><code>Factory</code></a>:</p>

<pre><code>from kivy.factory import Factory
</code></pre>

<p>Then, in your loop:</p>

<pre><code>for i in range(3):
    btn = Factory.CustomButton(text=str(i), size_hint=(1, None),
                               image_source='kivy.png', subtext='label')
    grid.add_widget(btn)
</code></pre>

<p>Finally, a side note: you're creating new bindings on <code>grid_l</code> every time <code>search_btn_pressed()</code> is called. These bindings should only be created once. You could bind once in Python by moving those bindings to <code>HomeScreen.__init__()</code>, but again, this is easier in kv:</p>

<pre><code>    GridLayout:
        id: gridlayoutID
        cols: 1
        size_hint: 1, None
        row_default_height: 40
        row_force_default: False
        height: self.minimum_height   # bind height to minimum_height
        width: self.minimum_width     # bind width to minimum_width
</code></pre>
","android"
"312",23778474,"<p>I understand you install it using</p>

<pre><code>$ sudo easy_install --upgrade androidviewclient
</code></pre>

<p>Then, you should do</p>

<pre><code>$ export ANDROID_HOME=/Users/Flo/Documents/adt-bundle-mac-x86_64-20130729/sdk/
</code></pre>

<p>add it to <code>~/.bash_profile</code> if you want it to be persistent.</p>

<p>Then you should be able to execute <code>dump</code> without problems.
The tools are trying to find <code>adb</code> at some know locations or at <code>$ANDROID_HOME/platform-tools/adb</code>. Check to be sure that <code>adb</code> is there and is executable.</p>
","android"
"313",26277154,"<p>This is an issue with buildozer failing to install the Android build-tools. Hopefully this will be fixed soon. Until then, you can work around this by manually installing build-tools (<a href=""https://github.com/kivy/buildozer/issues/146#issuecomment-57061269"" rel=""nofollow"">https://github.com/kivy/buildozer/issues/146#issuecomment-57061269</a>):</p>

<ol>
<li>Run <code>~/.buildozer/android/platform/android-sdk-21/tools/android</code> to launch the Android SDK Manager. (If you have a different SDK version, replace <code>android-sdk-21</code> with the appropriate folder)</li>
<li>Click the <code>Deselect All</code> link at the bottom of the window, and check the box next to ""Android SDK Build-tools -- 20"". (Note: the exact version doesn't matter, just pick the newest version available.)  <img src=""http://i.stack.imgur.com/vnJFl.png"" alt=""screenshot from 2014-09-27 13 17 13""></li>
<li>Click the <code>Install 1 package...</code> button.</li>
<li>Click <code>Accept License</code> and then click the <code>Install</code> button. <img src=""https://cloud.githubusercontent.com/assets/1126441/4431683/e45b4ba8-4672-11e4-923d-a99044b85154.png"" alt=""screenshot from 2014-09-27 13 19 19""></li>
<li>Close the SDK Manager and resume working with buildozer.</li>
</ol>
","android"
"314",27874024,"<p>U can use Xpath of that element, for finding xpath u will need appium inspector, which is supported in MAC OSX only, so you have to use an mac and configure Android SDK and Appium on MAC in order to get it working.
Code will be like this : </p>

<pre><code> #-*- coding: utf-8 -*-
__author__ = 'chetan.krishna'
import os
import time
import unittest
from time import sleep
from appium import webdriver
from pylab import *
from teamcity import is_running_under_teamcity
from teamcity.unittestpy import TeamcityTestRunner
import logging

# Returns absolute path relative to this file
PATH = lambda p: os.path.abspath(
    os.path.join(os.path.dirname(__file__), p)
)


class AvavntiAndroidTests(unittest.TestCase):
    def setUp(self):
        desired_caps = {}
# Specify platform below(Android, iOS)
        desired_caps['platformName'] = 'Android'
# Specify OS version(Settings-&gt;About phone -&gt; android version)
        desired_caps['platformVersion'] = '4.4.4'
# Obtain the Device name from Adb[For Android](Terminal Command: ""adb devices"")
        desired_caps['deviceName'] = '4d0081004c8741a9'

        desired_caps['noReset'] = False
# Specify the path to Application
        desired_caps[""app""] = PATH('AvantiMarket_v1.4.apk')
# Wait for email login activity to appear
        desired_caps[""appWaitActivity""]= ('com.android.avantimarket.ui.activity.EmailLoginActivity')
        self.driver = webdriver.Remote('http://localhost:4723/wd/hub', desired_caps)

    def tearDown(self):
# end the session
        self.driver.quit()


    def test_Avanti(self):
# wait for the login screen to appear
        self.driver.implicitly_wait(20)
# set values for plotting pass and fail results
        nPass = 0
        nFail = 0
        print('Checking login for registered user')
    # Logging in as indiaone@avantilab.org
elf.driver.implicitly_wait('20')
        print('Trying to login with abc@abc.org')
        self.driver.find_element_by_xpath('//UIAApplication[1]/UIAWindow[2]/UIATextField[1]').send_keys('abc@abc.org.org')
        self.driver.find_element_by_xpath('//UIAApplication[1]/UIAWindow[2]/UIASecureTextField[1]').send_keys('12345678')
        self.driver.hide_keyboard()
        self.driver.implicitly_wait(10)
        self.driver.find_element_by_xpath('//UIAApplication[1]/UIAWindow[2]/UIAButton[3]').click()
        time.sleep(20)
        self.driver.implicitly_wait(99)
        try:
            self.driver.find_element_by_xpath('//UIAApplication[1]/UIAWindow[2]/UIASecureTextField[1]')
        except :
            print('Login failed, please check credentials and network')
        else:
            print('Login successful, creating pin')

        self.driver.find_element_by_xpath('//UIAApplication[1]/UIAWindow[2]/UIASecureTextField[1]').send_keys('1')
        self.driver.find_element_by_xpath('//UIAApplication[1]/UIAWindow[2]/UIASecureTextField[2]').send_keys('1')
        self.driver.find_element_by_xpath('//UIAApplication[1]/UIAWindow[2]/UIASecureTextField[3]').send_keys('1')
        self.driver.find_element_by_xpath('//UIAApplication[1]/UIAWindow[2]/UIASecureTextField[4]').send_keys('1')
        self.driver.find_element_by_xpath('//UIAApplication[1]/UIAWindow[2]/UIASecureTextField[5]').send_keys('1')
        self.driver.find_element_by_id('com.android.avantimarket:id/m_emailTextField').send_keys('abc@abc.org.org')
        self.driver.back()
        nPass= nPass+1
        self.driver.implicitly_wait(20)
        self.driver.find_element_by_id('com.android.avantimarket:id/m_passwordTextField').send_keys('12345678')
        nPass= nPass+1
        self.driver.back()
        self.driver.implicitly_wait(10)
        self.driver.find_element_by_name('SIGN IN').click()
        self.driver.implicitly_wait(30)
        time.sleep(5)
# validating for successful login
        try:
            self.driver.find_element_by_id('com.android.avantimarket:id/create_pin_fields_container')
            print('Login successful')
            nPass= nPass+1
        except:
            print('Login failed')
            nFail = nFail + 1
        else:
# Creating pin required for login
            print('Creating Pin for user')
        self.driver.find_element_by_id('com.android.avantimarket:id/create_pin_fields_container').send_keys('1111')
        self.driver.find_element_by_id('com.android.avantimarket:id/reEnter_pin_fields_container').send_keys('1111')
        self.driver.back()
        self.driver.implicitly_wait(20)
        self.driver.find_element_by_id('com.android.avantimarket:id/m_saveButton').click()
        self.driver.implicitly_wait(10)
        self.driver.find_element_by_id('com.android.avantimarket:id/btn_cominsoon_Yes').click()
        self.driver.implicitly_wait(10)
        time.sleep(8)
</code></pre>
","android"
"315",35711004,"<p>I did it! If someone else there similar question, for example, how I decided it:</p>

<hr>

<pre><code>  from kivy.app import App
  from kivy.uix.textinput import TextInput
  from kivy.uix.label import Label
  from kivy.uix.boxlayout import BoxLayout
  from kivy.uix.button import Button

  class Vzlom_App(App):
      def word_detect(self,value):
           a = str(self.wdlist.text).upper(). split(',')
           b = str(self.wd.text).upper(). split(',')
           y = []
           e = []
           s = []
           for counter in range(len(b)):
                z = []
                for word in a:
                     ml = 0
                     index = -1
                     for letter in word:
                          index += 1
                          if letter == (b[counter])[index]:
                               ml += 1
                     if ml == int((b[counter])[-1]):
                          z.append(word)
                y.append(z)
                e.extend(z)
           for i in e:
                if (y[0]).count(i)==(y[1]).count(i)==(y[2]).count(i)==1 and s.count(i)==0:
                     s.append(i)
           self.lab.text = str(s)

      def build(self):
           window = BoxLayout(orientation='vertical')
           self.btn = Button(text='OK',font_size=50,size_hint_y=None,height=80)
           self.lab = Label(text="""",font_size=70) 
           self.wdlist = TextInput(multiline=False,font_size=50,size_hint_y=None,height=250)
           self.wd = TextInput(multiline=False,font_size=50,size_hint_y=None,height=80)
           self.btn.bind(on_press=self.word_detect)
           window.add_widget(self.wd)
           window.add_widget(self.wdlist)
           window.add_widget(self.lab)
           window.add_widget(self.btn)
           return window

  if __name__ == ""__main__"":
           Vzlom_App().run()
</code></pre>

<hr>

<p>Thanks all for the answers ;)</p>
","android"
"316",23546283,"<p>You don't need to install pyjnius. If you want to use Kivy on Android, you should use the <a href=""http://python-for-android.readthedocs.org/en/latest/"" rel=""nofollow"">python-for-android</a> project. P4A already includes pyjnius and Kivy, and has scripts to include other Python modules and to create an APK from your application.</p>

<p>python-for-android also provides a <a href=""https://docs.google.com/uc?export=download&amp;confirm=no_antivirus&amp;id=0B1WO07-OL50_bTR0SElrLTZGWEU"" rel=""nofollow"">VirtualBox VM</a>, which can make this process much easier for Windows users.</p>
","android"
"317",31724178,"<pre><code>import os
os.system(""adb shell su -c reboot"")
</code></pre>
","android"
"318",9394041,"<p>Call eventWaitFor(""location"") before you call readLocation. You might also want to use eventPoll, eventClearBuffer or eventWait as well.</p>

<p>The GPS sensor is very slow to start up, because it needs to acquire satellites, synchronize the time and then triangulate a position based on the timing of signals from the satellites. Also, because you have called startLocating without specifying an update frequency, you are getting the default frequency of 60,000ms or once per minute.</p>
","android"
"319",23456542,"<p>This answer is with the caveat that I have no idea what tastypie is and it may be doing something weird.</p>

<p><a href=""https://docs.djangoproject.com/en/dev/ref/models/querysets/#latest"" rel=""nofollow"">latest()</a> is meant to be used on dates, not integers. It gets the latest entry by the date field you specify. <code>id</code> is not a date field. Instead of <code>Foo.objects.latest('id')</code> you could try <code>Foo.objects.last()</code> which will probably work for you, but it isn't guaranteed.</p>

<p>The best way to solve this problem is to add a <code>DateField</code> or <code>DateTimeField</code> to your model that saves the time the image was created. You can use <code>auto_now_add</code> to make this automatic. So in your model:</p>

<pre><code>class Foo(models.Model):
    img = models.ImageField(upload_to=""images/"", blank=True)
    creation_date = models.DateTimeField(auto_now_add=True)
</code></pre>

<p>Note that <code>img</code> should not have <code>null=True</code>, as it is actually a CharField.</p>

<p>Then you can do:</p>

<pre><code>obj = Foo.objects.latest('creation_date')
</code></pre>
","android"
"320",6275277,"<blockquote>
  <p>I want the application to be installed on mobile, which will perform some random touch, keyboard events. Is it possible with MonkeyRunner?</p>
</blockquote>

<p>You want to use <a href=""http://developer.android.com/guide/developing/tools/monkey.html"" rel=""nofollow"">monkey</a> to do this.</p>
","android"
"321",9045201,"<p>Run the script on your remote computer, and expose the list of installed software on HTTP, a good way to write this simple web app is to use flask and its development server to serve the list of installed software, then write a python script which uses the native android web interface to fetch the list and display it.</p>
","android"
"322",29290861,"<p>It looks like python-for-android only has a recipe for PIL right now, you'd need to replace <code>pillow</code> with <code>pil</code> in your requirements. With what you have now, it has no special compilation recipe and so cannot automatically package pillow for android because of its compiled components.</p>

<p>It probably wouldn't be hard to write a pillow recipe, since it would presumably be very similar to the pil one.</p>
","android"
"323",26707566,"<p>I think you should try the suggestion of thopiekar on github: <a href=""https://github.com/openBergisch/kivy-widget-playground/issues/1"" rel=""nofollow"">https://github.com/openBergisch/kivy-widget-playground/issues/1</a></p>

<p>Use the MultiLineLabel inside of an ScrollView and your problem should be solved.</p>
","android"
"324",26462677,"<p>I'll suggest you to use the Android functions to iterate the directories and files. For example you create a new file, of course if you are making it in Java (and might be easier):</p>

<pre><code>File currentDir = new File(""/""); // ""/"" stands for root directory
File[] files = currentDir.listFiles(); // lists all files in the current directory, store them in the *files* array 
//you can supply as an argument a String[] array, with the file extensions if needed 
//(to show only .jpeg, .png, or only documents like .docx, .pdf)
//you can use Collections and Comparator classes to sort them
if(files != null &amp;&amp; files.length &gt; 0) { //check if it holds any files
        for(File f : files) {
            if(f.isHidden()) { 
                // don't add the hidden file to the list, or at your choice
                continue;
            } else {
            // add the file to the list
            fileList.add(f);
            }
        }
        Collections.sort(fileList, new FileComparator()); //
}
//you can also check if a specific *file* is file or directory with
file.isFile();
file.isDirectory();
</code></pre>

<p>You can use all this info about files to show them in a ListView or GridView, on a click on a specific item, you can update the <em>currentDir</em> and refresh the contents or open the file, etc.</p>

<p>Here is an example of a file chooser <a href=""http://www.dreamincode.net/forums/topic/190013-creating-simple-file-chooser/"" rel=""nofollow"">http://www.dreamincode.net/forums/topic/190013-creating-simple-file-chooser/</a></p>
","android"
"325",31890560,"<p>Instead of <code>PrintWriter out = new PrintWriter(outputStream);</code> directly use the outputStream and it should work. :)</p>
","android"
"326",35788298,"<p>The immediate possibility is that you're just seeing the android processor be slower than the desktop one. I'm not sure what the benchmark comparisons are nowadays, but I've seen this be a problem in the past. That said, I'd have guessed the same as you that the difference shouldn't be that big.</p>

<p>I don't know if it would make a difference, but one general thing to try might be to compile for armeabi-v7a (rather than the default armeabi). This enables hardware floating point calculation, amongst other things. I don't know if it makes a difference in generic apps, but it certainly could. You can target this using the python-for-android master branch with <code>--arch=armeabi-v7a</code>, or the <code>android_new</code> target in the buildozer master branch (the rest of buildozer operation is the same, and it automatically uses v7a).</p>

<p>Another question would be, do you have access to a more efficient xml parser? If you can find one in e.g. cython rather than python (I don't know what you're using right now), this could make a difference. I see the other alternative of using a more efficient data structure has already been raised in a comment.</p>

<p>Sorry that neither of these suggestions are very specific. If you ask on the kivy support channels you may find someone who's found and resolved similar issues.</p>
","android"
"327",8659663,"<p>I'd probably look at calculating some simple statistics over the image.  You really don't need opencv to do this properly.  I'd take into account average brightness, and variance over the image.</p>

<p>Here is a simple formula to do average brightness:</p>

<p><a href=""http://stackoverflow.com/questions/596216/formula-to-determine-brightness-of-rgb-color"">Formula to determine brightness of RGB color</a></p>

<p>That coupled with a range of min/max could tell you if you have a mostly black image.  Histogram might help here as well, but you might not need the full histogram.  And this can all be calculated in Java pretty easily on the phone.</p>

<p>If you wanted to get really fancy you could do the stats calculation, and tell the user it's not bright enough.  Then do a brightness adjustment to normalize the image for them.  It's a very simple process:</p>

<p><a href=""http://en.wikipedia.org/wiki/Normalization_(image_processing"" rel=""nofollow"">http://en.wikipedia.org/wiki/Normalization_(image_processing</a>)</p>

<p>Then run image stats on that, and see if it helped adjust the image enough for it to be allowed to upload it.</p>
","android"
"328",18809214,"<p><strong>TLDR</strong>: CherryPy is a dependable server, and Android may be dependable enough to build servers on these days.</p>

<hr>

<p>I used to maintain a project which used CherryPy and SL4A, with ws4py for websockets.</p>

<p>CherryPy 3.2.2 worked perfectly on Python 2.6 and Python 3.2.</p>

<p>The application was often running for a day or two. It seemed like it would have been fine if it ran longer, but it got restarted a lot as it was being developed.</p>

<p>CherryPy was always fine, but Android devices do sometimes just crash, so SL4A will exit from time to time, and need to be restarted. This may not be an issue on a device that was only used as a server. For me, it was always stable when the device was left running overnight, but would occasionally crash when I was using the device normally (it was my actual phone). All of this was on a Galaxy SII, back when Android was still pretty buggy like that.</p>

<p>Setting up CherryPy is easy. It is pure Python, so you can just drop a copy onto your path some place and import it (you do not need an emulator either).</p>

<p>You may struggle to keep the device awake. If it is left alone, it will go to sleep. You can tell it to stay awake in the developer options, but I am pretty sure that only works if the device is charging.</p>

<p><em>UPDATE</em>: Android is much more stable now days, but work on the SL4A project has pretty much ended. There's a project called QPython that maintains a copy as part of a bigger app, so it can still be done easily.</p>
","android"
"329",27775261,"<p>Have a look at this third party rest framework (DRF): <a href=""http://www.django-rest-framework.org"" rel=""nofollow"">http://www.django-rest-framework.org</a></p>

<p>Gives you a django side solution out of the box. There are others (tasty-py) but in my opinion DRF is the best there is.</p>

<p>No need to do anything with sockets i suppose...</p>
","android"
"330",10302672,"<p>Can't say just looking at the snippet above how you've implemented it in your Application or what's wrong.</p>

<p>There is a more elaborate <a href=""https://github.com/kivy/kivy/tree/master/examples/audio"" rel=""nofollow"">example</a> should be in the examples directory under your Kivy install directory that should clear up how to use SoundLoader.</p>

<p>Hope that helps.</p>
","android"
"331",14693895,"<p>Google App Engine is Google's cloud computing service. If you're not creating a web application using that, you need to find an XMPP module for Python which doesn't depend on Google App Engine.</p>

<p><a href=""http://stackoverflow.com/questions/1081634/which-is-the-most-mature-python-xmpp-library-for-a-gchat-client"">Which is the most mature Python XMPP library for a GChat client?</a> seems like it's relevant to this question.</p>
","android"
"332",22511076,"<p>But this works?</p>

<pre><code>from kivy.app import App
from kivy.uix.button import Button
from kivy.uix.boxlayout import BoxLayout


class Fejkbiljett(App):

    def build(self):
        gen_btn = Button(text='Generera',
                         size_hint=(.90, .10),
                         pos=(5, 5),
                         font_size=21)
        gen_btn.bind(on_press=StockholmTicket.getMessage)
        l = BoxLayout()
        l.add_widget(gen_btn)
        return l


class StockholmTicket(object):

    def getMessage(self):
        print ""2. this is called on the method getMessage of StockholmTicket""

if __name__ == ""__main__"":
    Fejkbiljett().run()
</code></pre>
","android"
"333",18353203,"<p>Use the linux shell, I have it git python and pip installed on my phone. I used gnuroot in the play store.. You can apt-get install python pip from there</p>
","android"
"334",28742716,"<p>A solution I onced used was via ServerSockets. </p>

<pre><code>public class SocketServer {   
private static void handleConnection(Socket client) throws IOException {       
    Scanner in = new Scanner(client.getInputStream());        
    PrintWriter out = new PrintWriter(client.getOutputStream(), true);        
    out.println(""Connection established!"");                
    String filename;        
    while (true) {           
        try {                
            filename = in.nextLine();            
            } catch(NoSuchElementException e) {               
                break;            
            }

        if(filename == ""makeToast""){
                        //execute things on the RaspberryPi
                        }

        }
    }    
public static void main(String[] args) throws IOException, InterruptedException { 
    ServerSocket server = new ServerSocket(3141); 
    System.out.println(""Server started!"");  
    while (true) {
        Socket client = null;
        try {
            client = server.accept();
            System.out.println(""Connection established!"");
            handleConnection(client);
            } catch (IOException e) {
                System.out.println(""Connection error!"");
                } finally {
                    if (client != null) { 
                        try {
                            client.close();
                            System.out.println(""Connection closed!"");
                            } catch (IOException e) { 

                            }     
                        }        
                    }   
        } 
    }
}
</code></pre>

<p>This is what the Receiver Programm in the Raspberry Pi embedded Java Programm looked like.</p>

<p>And here is the Programm from the Android Mobile Phone:</p>

<pre><code>public class OrbControlActivity extends Activity {
private Socket socket;
private String answer;
private static final int SERVERPORT = 3141;
private static final String SERVER_IP = ""192.168.1.100"";
protected Scanner in;
protected PrintWriter out;
protected TextView text;
@Override    protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_orb_control);
    text = (TextView) findViewById(R.id.textView2);
    text.setMovementMethod(new ScrollingMovementMethod());
    new Thread(new ClientThread()).start();
    new Thread(new ListenerThread()).start();
            out.println(""makeToast"");
}
 }


class ClientThread implements Runnable {
@Override        public void run() {
    try { 
          InetAddress serverAddr = InetAddress.getByName(SERVER_IP); 
          socket = new Socket(serverAddr, SERVERPORT);  
          in = new Scanner(socket.getInputStream());   
          out = new PrintWriter(socket.getOutputStream(), true);
          } catch(UnknownHostException e1) {         
              e1.printStackTrace();      
              } catch(IOException e1) {    
                  e1.printStackTrace();      
                  }    
    } 
} 
class ListenerThread implements Runnable {    
@Override        public void run() {  
    while(true) {              
        if (in != null) {          
            answer = in.nextLine();          
            runOnUiThread(new Runnable() {    
                @Override        
                public void run() {        
                    text.append(""\n"" + answer);  
                    }              
                });           
            }      
        }    
    }  
}
}
</code></pre>

<p>Notice please that there were ALOT of issues with the local IP from the Raspberry Pi. and the Router Needs to give static IPs, else this wont work</p>
","android"
"335",3800944,"<p>Actually you just need 3 classes:</p>

<p>A <a href=""http://developer.android.com/reference/android/content/ContentProvider.html"" rel=""nofollow"">ContentProvider</a>, as found here: <a href=""http://developer.android.com/guide/topics/providers/content-providers.html"" rel=""nofollow"">http://developer.android.com/guide/topics/providers/content-providers.html</a></p>

<p>Second you need is a <a href=""http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html"" rel=""nofollow"">SQLiteOpenHelper</a> and last but not least a <a href=""http://developer.android.com/reference/android/database/Cursor.html"" rel=""nofollow"">Cursor</a></p>

<p><strong>Edit: Just noticed it's not obvious from the snippets what the <code>db</code> variable is. It's the SQLiteOpenHelper or better my extension of it (where I've only overridden the onCreate, onUpgrade and constructor. See below ^^</strong></p>

<p>The ContentProvider is the one which will be communicating with the database and do the inserts, updates, deletes. The content provider will also allow other parts of your code (even other Apps, if you allow it) to access the data stored in the sqlite. </p>

<p>You can then override the insert/delete/query/update functions and add your functionality to it, for example perform different actions depending on the URI of the intent. </p>

<pre><code>public int delete(Uri uri, String whereClause, String[] whereArgs) {
    int count = 0;

    switch(URI_MATCHER.match(uri)){
    case ITEMS:
        // uri = content://com.yourname.yourapp.Items/item
        // delete all rows
        count = db.delete(TABLE_ITEMS, whereClause, whereArgs);
        break;
    case ITEMS_ID:
        // uri = content://com.yourname.yourapp.Items/item/2
        // delete the row with the id 2
        String segment = uri.getPathSegments().get(1);
        count = db.delete(TABLE_ITEMS, 
                Item.KEY_ITEM_ID +""=""+segment
                +(!TextUtils.isEmpty(whereClause)?"" AND (""+whereClause+"")"":""""),
                whereArgs);
        break;
    default:
        throw new IllegalArgumentException(""Unknown Uri: ""+uri);
    }

    return count;
}
</code></pre>

<p>The UriMatcher is defined as </p>

<pre><code>private static final int ITEMS = 1;
private static final int ITEMS_ID = 2;
private static final String AUTHORITY_ITEMS =""com.yourname.yourapp.Items"";
private static final UriMatcher URI_MATCHER;

static {
    URI_MATCHER = new UriMatcher(UriMatcher.NO_MATCH);
    URI_MATCHER.addURI(AUTHORITY_ITEMS, ""item"", ITEMS);
    URI_MATCHER.addURI(AUTHORITY_ITEMS, ""item/#"", ITEMS_ID);
}
</code></pre>

<p>This way you can decide if only 1 result shall be returned or updated or if all should be queried or not. </p>

<p>The SQLiteOpenHelper will actually perform the insert and also take care of upgrades if the structure of your SQLite database changes, you can perform it there by overriding </p>

<pre><code>class ItemDatabaseHelper extends SQLiteOpenHelper {
    public ItemDatabaseHelper(Context context){
        super(context, ""myDatabase.db"", null, ITEMDATABASE_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        // TODO Auto-generated method stub
        String createItemsTable = ""create table "" + TABLE_ITEMS + "" ("" +
            ...
        "");"";

        // Begin Transaction
        db.beginTransaction();
        try{
            // Create Items table
            db.execSQL(createItemsTable);

            // Transaction was successful
            db.setTransactionSuccessful();
        } catch(Exception ex) {
            Log.e(this.getClass().getName(), ex.getMessage(), ex);
        } finally {
            // End transaction
            db.endTransaction();
        }
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        String dropItemsTable = ""DROP TABLE IF EXISTS "" + TABLE_ITEMS;

        // Begin transaction
        db.beginTransaction();

        try {
            if(oldVersion&lt;2){
                // Upgrade from version 1 to version 2: DROP the whole table
                db.execSQL(dropItemsTable);
                onCreate(db);
                Log.i(this.getClass().toString(),""Successfully upgraded to Version 2"");
            }
            if(oldVersion&lt;3) {
                // minor change, perform an ALTER query
                db.execSQL(""ALTER ..."");
            }

            db.setTransactionSuccessful();
        } catch(Exception ex){
            Log.e(this.getClass().getName(), ex.getMessage(), ex);
        } finally {
            // Ends transaction
            // If there was an error, the database won't be altered
            db.endTransaction();
        }
    }
}
</code></pre>

<p>and then the easiest part of all: Perform a query:</p>

<pre><code>String[] rows = new String[] {""_ID"", ""_name"", ""_email"" };
Uri uri = Uri.parse(""content://com.yourname.yourapp.Items/item/2"";

// Alternatively you can also use getContentResolver().insert/update/query/delete methods
Cursor c = managedQuery(uri, rows, ""someRow=1"", null, null); 
</code></pre>

<p>That's basically all and the most elegant way to do it as far as I know. </p>
","android"
"336",25147323,"<p>Below is the code that we ended up using to store the login info, which employs Kivy's JsonStore. The credentials can also then be encrypted using Python encryption libraries.</p>

<pre><code>from kivy.storage.jsonstore import JsonStore

from os.path import join


class AppScreen(ScreenManager):
    data_dir = App().user_data_dir
    store = JsonStore(join(data_dir, 'storage.json'))
    ...
    def login(self):
        username = self.login_username.text
        password = self.login_password.text
        AppScreen.store.put('credentials', username=username, password=password)
</code></pre>

<p>And this is the code to retrieve the credentials:</p>

<pre><code>try:
    store.get('credentials')['username']
except KeyError:
    username = """"
else:
    username = store.get('credentials')['username']

try:
    store.get('credentials')['password']
except KeyError:
    password = """"
else:
    password = store.get('credentials')['password']
</code></pre>

<p>In the .kv file, the username and password TextInput widgets look like this:</p>

<pre><code>TextInput:
    id: login_username
    text: root.username
    on_enter_key: root.login()

TextInput:
    id: login_password
    text: root.password
    on_enter_key: root.login()
</code></pre>
","android"
"337",21511956,"<p>Try running it as sudo. That worked for me.</p>
","android"
"338",36342078,"<p>Kivy has storage functionality inbuilt. By using the inbuilt methods it will store the file in the correct place for Android or iOS without you having to worry about the correct location. Here's their docs:
<a href=""https://kivy.org/docs/api-kivy.storage.html#module-kivy.storage"" rel=""nofollow"">https://kivy.org/docs/api-kivy.storage.html#module-kivy.storage</a></p>

<p>And a short example to show how to put, retrieve and delete values:    </p>

<pre><code>from kivy.storage.jsonstore import JsonStore

store = JsonStore('baz.json')
store.put('foo', 'bar')

if store.exists('foo'):
    print('foo is:', store.get('foo'))
    store.delete('foo')
</code></pre>
","android"
"339",30907081,"<p>The answer is pretty obvious. I totally missed the <code>source.include_exts</code> option. All one has to do is add file extension there.</p>
","android"
"340",24258400,"<p>The ADT could make an easy transfer between PC and android. But you could use wifi keyboard or some app like this, and write in android directly. Also, debuging on PC is a pain, emulated android is slow and error prone for third party like SL4A; the best/fastest is remote control but run script on android. I use a ssh server in android (you find at least 3 free on Play) and Vim from PC and is the fastest and most comfortable way.</p>
","android"
"341",13462539,"<p>What settings are you trying to change? language can be sort of done within your application if that is the only one. </p>

<pre><code>public void setLocale(Locale locale, Instrumentation inst){
    Locale.setDefault(locale);
    Configuration config = new Configuration();
    config.locale = locale;
    inst.getTargetContext().getResources().updateConfiguration(config, inst.getTargetContext().getResources().getDisplayMetrics());
}
</code></pre>

<p>Are all your tablets api level 16+ (jely bean?) if so you might want to look at <a href=""http://developer.android.com/tools/testing/testing_ui.html"" rel=""nofollow"">http://developer.android.com/tools/testing/testing_ui.html</a></p>

<p>Finally if you still want to do it with monkey runner I would recommend getting hold of all your devices in one thread and then passing in each device to each thread separately.</p>

<p>Python is not my specialty and i do not have access/knowledge fo all the libraries you are using (i could do it in java for you maybe?) but what i think might work better is something like:</p>

<pre><code>class myThread (threading.Thread):
    def __init__(self, device):
        self.device = device
        threading.Thread.__init__(self)

    def run(self):
        packagename = ""com.android.settings""
        classname = ""com.android.settings.DisplaySettings""
        componentname = packagename + ""/"" + classname
        self.device.startActivity(component=componentname)
        maml.click(self.device, 1088, 300)
        MonkeyRunner.sleep(0.4)
        maml.click(self.device, 864, 361)
        MonkeyRunner.sleep(0.4)
        maml.click(self.device, 612, 621)
        MonkeyRunner.sleep(0.5)
        self.device.press('KEYCODE_HOME', 'DOWN_AND_UP')


def main():
    connected_devices = util.get_connected_devices()
    count = 0
    devices = []
    for deviceId in connected_devices:
        devices[count] = MonkeyRunner.waitForConnection(10.0, deviceId[0])
        count = count + 1
    for device in devices:
        thread = myThread(device)
        thread.start()


if __name__ == ""__main__"":
    main()
</code></pre>

<p>basically the difference is as i said above, you get all the devices in sequence and then call each thread with the device you got sequentially. Does that make sense?</p>
","android"
"342",30079322,"<p>i had faced same issue with my android application but i am doing automation in  java , so for the solution i am performing tap Action twice near the location of the element so it will select all the text which already written in text field and after that click on that ""cut"" symbol so it will clear text field.
i have written a method for sendkeys in android device.</p>

<pre><code>     public void typeForAndroid(AppiumDriver appiumDriver,WebElement ele,String text)
{
    if(ele.getText().isEmpty())
    {
        ele.sendKeys(text);
    }
    else
    {
    TouchAction action=new TouchAction(appiumDriver);
    action.tap(ele.getLocation().getX()+5, ele.getLocation().getY()+5);
    action.tap(ele.getLocation().getX()+5, ele.getLocation().getY()+5);

    appiumDriver.performTouchAction(action);
    pause(2);
    try{
        appiumDriver.findElementById(""android:id/cut"").click();
     }
     catch(Exception e)
     {
         appiumDriver.sendKeyEvent(67);
     }

      pause(2);
    ele.sendKeys(text);
    }
}
</code></pre>

<p>this is working for me. I hope this might works for you.
in this i have used appiumdriver but you can also use androiddriver.
Thanks</p>
","android"
"343",35492428,"<pre><code>    I did try to run tests using Grid with Appium server in java, same logic you can adopt for your own language. Here is the explanation:

    1. This is the same content of node.json file on two node machines:

    {
    ""capabilities"":
         [
           {
             ""version"":""4.4.2"",
             ""maxInstances"": 3,
             ""platformName"":""ANDROID""
           }
         ],
    ""configuration"":
    {
       ""cleanUpCycle"":2000,
       ""timeout"":30000,
       ""proxy"": ""org.openqa.grid.selenium.proxy.DefaultRemoteProxy"",
       ""url"":""http://WHERE_APPIUM_RUNNNING:4723/wd/hub"",
       ""host"": ""WHERE_APPIUM_RUNNNING_IP"",
       ""port"": 4723,
       ""maxSession"": 6,
       ""register"": true,
       ""registerCycle"": 5000,
       ""hubPort"": 4444,
       ""hubHost"": ""WHERE_HUB_RUNNNING_IP""
    }
    } 

    2. Downloaded selenium-server-standalone-2.52.0.jar and started as hub on one machine like: 
    java -jar ~/Downloads/selenium-server-standalone-2.52.0.jar -role hub maxInstances=2 maxSessions=2 

    3. Started ONLY appium server on node machines and registered with hub using command as: appium --nodeconfig ~/Desktop/node.json

    4. Now declare all the common capability in GridTest.java and only deviceName was passed from testNG.xml in order to avoid any hardcoding in code and keeping node.config as generic for all node machines, sample testNG.xml is like:

    &lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;
    &lt;!DOCTYPE suite SYSTEM ""http://testng.org/testng-1.0.dtd""&gt;
    &lt;suite name=""Automation"" parallel=""tests""&gt;

        &lt;test name=""Test1""&gt;
        &lt;parameter name=""deviceName"" value=""XYZZZZZ"" /&gt;
            &lt;classes&gt;
                &lt;class name=""poc.grid.GridTest"" /&gt;
            &lt;/classes&gt;
        &lt;/test&gt;

        &lt;test name=""Test2""&gt;
        &lt;parameter name=""deviceName"" value=""ZYXXXXX"" /&gt;
            &lt;classes&gt;
                &lt;class name=""poc.grid.GridTest"" /&gt;
            &lt;/classes&gt;
        &lt;/test&gt;

    &lt;/suite&gt;

    5. And I wrote a GridTest.java class like:

    package poc.grid;
    import java.net.MalformedURLException;
    import java.net.URL;
    import java.util.concurrent.TimeUnit;

    import org.openqa.selenium.WebDriver;
    import org.openqa.selenium.remote.DesiredCapabilities;
    import org.openqa.selenium.remote.RemoteWebDriver;
    import org.testng.annotations.Parameters;
    import org.testng.annotations.Test;


    public class GridTest {

        @Parameters({""deviceName""})
        @Test
        public void test (String deviceName) throws MalformedURLException, InterruptedException
        {
            appium_driver(deviceName);
        }

        public void appium_driver(String deviceName)
        {
            try
            {
                DesiredCapabilities capabilities = new DesiredCapabilities();
                capabilities.setCapability(""deviceName"", deviceName);
                capabilities.setCapability(""platformName"", ""Android"");

                if(deviceName.equalsIgnoreCase(""4d0025b440ca90d5"")){
                    capabilities.setCapability(""app"", ""/XXXXXX/chocolate.apk"");
                }else{
                    capabilities.setCapability(""app"", ""/XXXXXX/chocolate.apk"");
                }

                capabilities.setCapability(""newCommandTimeout"", ""120"");
                WebDriver driver = new RemoteWebDriver(new URL(""http://WHERE_HUB_RUNNNING_IP:4444/wd/hub""), capabilities);

                driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
            }
            catch(Exception e)
            {
                System.out.println(e.getMessage());
                e.printStackTrace();
            }
        }
    }


6. If you are using eclipse, then Right Click on testNG.xml and select Run As --&gt; TestNg Suite.

7. Now you can see I've kept a condition only for apk file location because the node machines have different directory, if possible you should choose a similar location which exists in all node machines, else you may have to live with if - else.  Hope This Helps !!
</code></pre>
","android"
"344",36001080,"<p>There are some changes made on the new NDK r11 release and some tools were moved to different folders, I guess cocos2d-x scripts need to be updated to support the latest NDK release.
You can wait for a new cocos2d-x release or use the previous NDK (r10e) version.</p>
","android"
"345",29909600,"<p>readLine read IO need data end with \r\n , bluetooth send data need to add end tag with \r\n</p>
","android"
"346",9958033,"<p>I had been on the lookut for Python on iOS for sometime. About 2-months ago, one one released to the iTunes app store -- <a href=""http://pythonforios.com/"" rel=""nofollow"">http://pythonforios.com/</a> and it is fantastic!  It includes the complete set of Python 2.7.2 documentation -- which alone is worth the $3 price.</p>

<p>It's a bit of a challenge to code any serious apps (which I suspect is the result of the developer having to comply w/ Apple's app guidelines), but it is a perfect place to test ideas from a train or airport (when you are without a laptop).</p>

<p>1 caveat -- I've only tried it on an iPad. It could be a bit cramped screen real-estate on an iphone.</p>
","android"
"347",29785850,"<p>the appium library should have a _touch.py file controlling scrolls or ""swipes""</p>

<p><strong>_touch.py</strong></p>

<pre><code>def swipe(self, start_x, start_y, end_x, end_y, duration=1000):
    """"""
    Swipe from one point to another point, for an optional duration.
    """"""
    driver = self._current_application()
    driver.swipe(start_x, start_y, end_x, end_y, duration)
</code></pre>

<p>or </p>

<pre><code>def scroll(self, start_locator, end_locator):
    """"""
    Scrolls from one element to another
    Key attributes for arbitrary elements are `id` and `name`. See
    `introduction` for details about locating elements.
    """"""
    el1 = self._element_find(start_locator, True, True)
    el2 = self._element_find(end_locator, True, True)
    driver = self._current_application()
    driver.scroll(el1, el2)
</code></pre>
","android"
"348",30683420,"<p>You will need to create a couple of services that interact with Google's GCM</p>

<p>You will need a callable URL that can process the registrations of the device when the app is first started. </p>

<p>You also need to send a JSON file with the data to be sent when you have a new notification to be sent. </p>

<p>All of this is fairly straightforward in Python.</p>

<p>You can get more information here.</p>

<p><a href=""https://developers.google.com/cloud-messaging/"" rel=""nofollow"">https://developers.google.com/cloud-messaging/</a></p>

<p>You will need a Google account to setup GCM</p>
","android"
"349",23963237,"<p>The reason for some delay between command is that <code>adbclient</code> uses mostly a <code>shell</code> connection to send them. This shell connection is not kept open. <code>monkeyrunner</code> uses a socket to send commands to <code>monkey</code> and thus why the delay between command is minimum.
<code>adbclient</code> could re-use an open <code>shell</code> connection or open a <code>socket</code> to <code>monkey</code> to do as <code>monkeyrunner</code>.</p>

<p>This is not difficult to implement, but not in the roadmap yet. Anyway, patches are always welcome.</p>

<p>On the other hand, for other most common cases <code>adbclient</code> is sevral times faster: <a href=""http://dtmilano.blogspot.ca/2013/09/androidviewclientculebra-takesnapshot.html"" rel=""nofollow"">http://dtmilano.blogspot.ca/2013/09/androidviewclientculebra-takesnapshot.html</a></p>
","android"
"350",17997376,"<p>I guess is related with how the '\' (backslash) are treated, they may be <em>escaping</em> the following character.</p>

<p>Using <strong>AndroidViewClient</strong> plugin as explained <a href=""https://github.com/dtmilano/AndroidViewClient/wiki#plugin"" rel=""nofollow"">here</a> should solve this Windows problem.</p>

<p>For example:</p>

<pre><code>c:&gt;\path\to\monkeyrunner -plugin \path\to\androidviewclient-&lt;version&gt;.jar myscript.py
</code></pre>
","android"
"351",14452727,"<p>NOT answer to your question, But your aim works.</p>

<p>If you just want to check wifi is enabled or not you can use below code:-</p>

<pre><code>import re
import os
def is_wifi_enabled(deviceid):
    wifistate = os.popen('adb -s %s shell getprop wlan.driver.status'%deviceid).read()
    wifion=re.search(r'ok',wifistate)
    return wifion
 is_wifi_enabled(deviceid)
</code></pre>

<p>I am not sure about all android devices, i have tried in some of the devices.</p>
","android"
"352",19652907,"<p>Turned out there was some server side image editing before generating the <code>sha1</code> sum that wasn't meant to be done in this scenario. They made changes on the server side and now this is working perfectly.</p>
","android"
"353",29640309,"<p>There are numerous libraries for this purpose. Yes the basic method is to use AsyncTask where you deal with network plumbing in <code>doInBackground</code> and process the response in <code>onPostExecute</code>. But in 2015 you don't have to reinvent the wheel. You can use popular libraries like Google's own <a href=""https://developer.android.com/training/volley/simple.html"" rel=""nofollow"">Volley</a> or Square's  <a href=""http://square.github.io/retrofit/"" rel=""nofollow"">Retrofit</a>. If the response is JSON then you can use <a href=""https://code.google.com/p/google-gson/"" rel=""nofollow"">Gson</a> or <a href=""https://github.com/FasterXML/jackson"" rel=""nofollow"">Jackson</a> library to deserialize it. </p>
","android"
"354",32801335,"<p>I have a code snippet i used for audio recording on android with kivy.
I didn't use audiostream but maybe it is useful in your case.
Unfortunately it doesn't record in wav and you
need to install jnius in order to use the snippet.</p>

<p>The button passed to play() and start() in Player() and Recorder() is just a string with the name of the file Player() and Recorder() are accessing.</p>

<pre><code>import os
from jnius import autoclass

if not os.path.isdir(""/sdcard/kivyrecords/""):
    os.mkdir(""/sdcard/kivyrecords/"")

PATH = ""/sdcard/kivyrecords/rec{0}.mp4""

class Player(object):
    def __init__(self):
        # get the MediaPlayer java class
        self.MediaPlayer = autoclass('android.media.MediaPlayer')

    def play(self, button):
        # create our player
        mPlayer = self.MediaPlayer()
        mPlayer.setDataSource(PATH.format(button))
        mPlayer.prepare()
        mPlayer.start()
        if not mPlayer.isPlaying():
            mPlayer.release()

class Recorder(object):
    def __init__(self):
        # get the needed Java classes
        self.MediaRecorder = autoclass('android.media.MediaRecorder')
        self.AudioSource = autoclass('android.media.MediaRecorder$AudioSource')
        self.OutputFormat = autoclass('android.media.MediaRecorder$OutputFormat')
        self.AudioEncoder = autoclass('android.media.MediaRecorder$AudioEncoder')

        self.mRecorder = self.MediaRecorder()       

    def start(self, button):
        self.mRecorder.setAudioSource(self.AudioSource.MIC)
        self.mRecorder.setOutputFormat(self.OutputFormat.MPEG_4)
        self.mRecorder.setOutputFile(PATH.format(button))
        self.mRecorder.setAudioEncoder(self.AudioEncoder.HE_AAC)
        self.mRecorder.prepare()

        self.mRecorder.start()

    def stop(self, button):
        time.sleep(0.5)
        self.mRecorder.stop()
        self.mRecorder.release()
        self.mRecorder = self.MediaRecorder()   
</code></pre>

<p>edit:</p>

<p>The whole script: </p>

<pre><code>#qpy:kivy
'''
Created on 20.06.2015

@author: jan
'''
import kivy
kivy.require('1.0.7') # replace with your current kivy version !

from kivy.app import App
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.gridlayout import GridLayout        

#from kivy.core.audio import SoundLoader 

from jnius import autoclass

import os
import time

if not os.path.isdir(""/sdcard/kivyrecords/""):
    os.mkdir(""/sdcard/kivyrecords/"")

PATH = ""/sdcard/kivyrecords/rec{0}.mp4""

class Player(object):
    def __init__(self):
        # get the MediaPlayer java class
        self.MediaPlayer = autoclass('android.media.MediaPlayer')

    def play(self, button):
        # create our player
        mPlayer = self.MediaPlayer()
        mPlayer.setDataSource(PATH.format(button))
        mPlayer.prepare()
        mPlayer.start()
        if not mPlayer.isPlaying():
            mPlayer.release()

class Recorder(object):
    def __init__(self):
        # get the needed Java classes
        self.MediaRecorder = autoclass('android.media.MediaRecorder')
        self.AudioSource = autoclass('android.media.MediaRecorder$AudioSource')
        self.OutputFormat = autoclass('android.media.MediaRecorder$OutputFormat')
        self.AudioEncoder = autoclass('android.media.MediaRecorder$AudioEncoder')

        self.mRecorder = self.MediaRecorder()       

    def start(self, button):
        self.mRecorder.setAudioSource(self.AudioSource.MIC)
        self.mRecorder.setOutputFormat(self.OutputFormat.MPEG_4)
        self.mRecorder.setOutputFile(PATH.format(button))
        self.mRecorder.setAudioEncoder(self.AudioEncoder.HE_AAC)
        self.mRecorder.prepare()

        self.mRecorder.start()

    def stop(self, button):
        time.sleep(0.5)
        self.mRecorder.stop()
        self.mRecorder.release()
        self.mRecorder = self.MediaRecorder()       

PLAY = Player()
REC = Recorder()
RECORDED = {1 : False, 2 : False, 3 : False, 
                        4 : False, 5 : False, 6 : False,
                        7 : False, 8 : False, 9 : False}

class MyGrid(GridLayout):
    def __init__(self):
        super(MyGrid, self).__init__(cols=3, rows=3)

        global REC
        global RECORDED
        global PLAY

        for i in range(1, 10):
            b = Button(text=str(i))
            b.bind(on_press=self.recorplay)
            b.bind(on_release=self.stop)
            self.add_widget(b, i)

    def recorplay(grid, button):
        if not RECORDED[int(button.text)]:
            REC.start(button.text)
        else:
            PLAY.play(button.text)

    def stop(grid, button):
        if not RECORDED[int(button.text)]:
            REC.stop(button.text)   
            RECORDED[int(button.text)] = True

class MyApp(App):
    def build(self):
        return MyGrid()

if __name__ == '__main__':
    MyApp().run()
</code></pre>
","android"
"355",12138485,"<p>unfortunately this does not work, see also issue 239... you might want to star that issue there: <a href=""http://code.google.com/p/android-scripting/issues/detail?id=239"" rel=""nofollow"">http://code.google.com/p/android-scripting/issues/detail?id=239</a></p>
","android"
"356",12578021,"<p>As i see you are already connected</p>

<pre><code>conn = rpyc.classic.connect(""192.XXX.XXX.XXX"",XXXXX)
conn.execute (""print 'Hello'"")
</code></pre>

<p>Try to use next command:</p>

<pre><code>subprocess.Popen(""/opt/android-sdk/tools/monkeyrunner 
/opt/android-sdk/tools/MYSCRIPT.py"", shell=True)
</code></pre>

<p>instead of:</p>

<pre><code>subprocess.Popen(""/opt/android-sdk/tools/monkeyrunner -v ALL
/opt/android-sdk/tools/MYSCRIPT.py"", shell=True)
</code></pre>
","android"
"357",9657395,"<p>You were right about the ""bulk IP"" thing. When you're connecting your phone through wi-fi it will get a random IP from the router's available IP address pool. </p>

<p>It usually gets the same IP if you have a constant number of devices connected to the router. For example if you have 3 computers connected through cable and 1 smartphone then the phone will always get the 192.168.1.5 IP (192.168.1.2 - .4 IPs are used for your computers).</p>

<p>Depending on the router you have you can set it up to give the exact same address to your smartphone every time you connect it to wi-fi. And the IP you were using from <code>www.whatismyip.org</code> is the one from the provider, which a network uses to reach ""public internet"" (but that's another story). </p>

<p>You should check your local IP that's on your tablet (Settings->Wi-Fi->Wi-Fi settings-> and press the connection. A small info box should appear with your IP).</p>

<p>You should use that in your code for the server.</p>

<p>I hope this helped. </p>
","android"
"358",9808250,"<p>You don't seem to have understood how web applications work. They don't wait for signals - or, rather, that's all they do. Every page served by a Web service is in response to a signal, ie a request. Your web service just needs to respond to normal requests in the normal way. </p>
","android"
"359",26211988,"<p>I know the question is old, but maybe this help some other.
The first problem is because you send a string as parameter, but you need to send java.lang.CharSequence. You can use jnius.cast for do that.
The next trick is use runOnUIThread, but for a fast toast you can simply use this:</p>

<pre><code>from jnius import autoclass
PythonActivity = autoclass('org.renpy.android.PythonActivity')
PythonActivity.toastError(""Hello!"")
</code></pre>

<p>Best regards!,</p>

<p>Sebastian</p>
","android"
"360",6882218,"<p>I used a round about method to circumvent the problem. First the python script needs to be modified to look for a text file containing the attributes. Now whenever I need to start the script, i have to push the txt file containing the attributes and then start the script.</p>
","android"
"361",26859236,"<p>Assuming you will be using a REST-based setup you might want to look into using ssl certificates and use https for verification and signal protection.</p>

<p>For a simpler solution, use a pre-shared-key and put it in the header of the request.</p>

<p>With that said your setup will only be as safe as your key management. Encryption and information security is <strong>hard</strong>.</p>

<p>Good luck!</p>
","android"
"362",19439865,"<p>First, all your problems will go away if you just keep the filenames in the SHA1 list you generate on the device. Another solution is to ensure the same order by, for example, running the SHA1 hashes through a sort function before combining them into a single one.</p>

<p>Alternatively, use a commutative function to combine the list of SHA1 hashes, so that the ordering doesn't matter.</p>
","android"
"363",38414462,"<p>The issue was in how I set up the environment. Normally, on Windows I would do:</p>

<pre><code>set AP_PORT = 99999
adb forward tcp:99999 tcp:99999
</code></pre>

<p>and then I would be able to use the SL4A. However, because the system was Linux, not Windows, I had to do this:</p>

<pre><code>export AP_PORT=99999
adb forward tcp:99999 tcp:99999
</code></pre>

<p>The associated documentation was very helpful: <a href=""https://books.google.com/books?id=uYEmWet7QtsC&amp;pg=PA50&amp;lpg=PA50&amp;dq=linux+ap_port+variable&amp;source=bl&amp;ots=iYo_Hkn5Nm&amp;sig=Rx2EtkTr1o5ygN9b4DJpF5RfENs&amp;hl=en&amp;sa=X&amp;ved=0ahUKEwjCwcKA6f3NAhXnyoMKHUvKANsQ6AEIHDAA#v=onepage&amp;q=linux%20ap_port%20variable&amp;f=false"" rel=""nofollow"">https://books.google.com/books?id=uYEmWet7QtsC&amp;pg=PA50&amp;lpg=PA50&amp;dq=linux+ap_port+variable&amp;source=bl&amp;ots=iYo_Hkn5Nm&amp;sig=Rx2EtkTr1o5ygN9b4DJpF5RfENs&amp;hl=en&amp;sa=X&amp;ved=0ahUKEwjCwcKA6f3NAhXnyoMKHUvKANsQ6AEIHDAA#v=onepage&amp;q=linux%20ap_port%20variable&amp;f=false</a></p>
","android"
"364",16810587,"<p>From the log, <code>App not signed with debug cert.</code> your apk is not signed with the default debug cert in <code>~/.android/debug.keystore</code></p>
","android"
"365",20770035,"<p>I got this error, but <strong>the real error</strong> was slightly above this:</p>

<pre class=""lang-py prettyprint-override""><code>Buildfile: /Users/rallen/Documents/Devel/python/kivy/python-for-android/dist/default/build.xml

BUILD FAILED
/Users/rallen/Documents/Devel/python/kivy/python-for-android/dist/default/build.xml:6: **Source resource does not exist: /Users/rallen/Documents/Devel/python/kivy/python-for-android/dist/default/project.properties**

Total time: 0 seconds
Traceback (most recent call last):
  File ""./build.py"", line 412, in &lt;module&gt;
    make_package(args)
  File ""./build.py"", line 336, in make_package
    subprocess.check_call([ANT, arg])
  File ""/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py"", line 511, in check_call
    raise CalledProcessError(retcode, cmd)
subprocess.CalledProcessError: Command '['ant', 'debug']' returned non-zero exit status 1
</code></pre>

<p>Googling a bit, I found</p>

<p><a href=""https://groups.google.com/forum/#!topic/kivy-users/igYampuxxCU"" rel=""nofollow"">https://groups.google.com/forum/#!topic/kivy-users/igYampuxxCU</a></p>

<p>which said to just create <code>dist/default/project.properties</code> and put</p>

<pre><code>target=android-14
</code></pre>

<p>in that file. I actually used <code>android-19</code>, but that has gotten me past this issue.</p>
","android"
"366",12984004,"<p>Since you can't randomly put \ in a string, try:</p>

<pre><code>sys.path.append(r""C:\path\to\helperscripts"")
</code></pre>

<p>The <code>r</code> means that the string is to be treated as a raw string, which means all escape codes will be ignored.</p>

<p>Also make sure helperMonkey.py is in that path, </p>
","android"
"367",34167425,"<p>Your json is invalid.</p>

<p>You have four errors, see the list below and the corresponding fixes.</p>

<pre><code>""[{""l1"" -&gt; [{""l1""
""D""}]"" -&gt; ""D""}]
""[{""l5"" -&gt; [{""l5""
""H""}]"" -&gt; ""H""}]
</code></pre>

<p>The final result is:</p>

<pre><code>[[""e1"", [{""l1"": ""A"", ""l2"": ""B""}, {""l3"": ""C"", ""l4"": ""D""}], ""1""], [""e2"", [{""l5"": ""E"", ""l6"": ""F""}, {""l7"": ""G"", ""l8"": ""H""}] , ""2""]]
</code></pre>

<p>Hope it helps.</p>
","android"
"368",17116718,"<p>127.0.0.1 is a loopback address that means, roughly, ""this device""; your PC and your android tablet are separate devices, so each of them has its own 127.0.0.1.  In other words, if you try to go to 127.0.0.1 on your Android tab, it's trying to connect to a webserver on the Android device, which is not what you want.  </p>

<p>However, you should be able to connect over the wifi.  On your windows box, open a command prompt and execute ""ipconfig"".  Somewhere in the output should be your windows box's address, probably 192.168.1.100 or something similar.  You tablet should be able to see te Django server at that address.</p>
","android"
"369",11634209,"<p>Just use stdin in your <code>monkeyrunner</code> script to read commands from your perl script, which should open a pipe to it:</p>

<pre><code> while True:
    cmd = raw_input('Enter command: ')
    if cmd == 'q' or cmd == 'Q':
        break
</code></pre>
","android"
"370",28606662,"<p>For testing, try to write absolute path to your files pointing, for example, to sdcard (/sdcard/out.txt).
I had problems on this versions (>=1.0.4) because launch process of script changes and execution directory is not the same as script directory.
I had to change my scripts to point to absolute paths.
It was tested with qpython developer.</p>

<p>Check this link:</p>

<p><a href=""https://github.com/qpython-android/qpython.org/issues/48"" rel=""nofollow"">https://github.com/qpython-android/qpython.org/issues/48</a></p>
","android"
"371",12737150,"<p>you can use <b><code>startActivity</code></b> for that:<br></p>

<pre>import android
droid = android.Android()
droid.startActivity('android.intent.action.MAIN', 
                    None, None, None, False, 
                    'com.twitter.android', 
                    'com.twitter.android.StartActivity'
                   )</pre>

<p>see the syntax <a href=""http://code.google.com/p/android-scripting/wiki/ApiReference#startActivity"">in the API Reference</a>:</p>

<pre>
startActivity(
   String action,
   String uri[optional],
   String type[optional]: MIME type/subtype of the URI,
   JSONObject extras[optional]: a Map of extras to add to the Intent,
   Boolean wait[optional]: block until the user exits the started activity,
   String packagename[optional]: name of package. If used, requires classname to be useful,
   String classname[optional]: name of class. If used, requires packagename to be useful)</pre>               
","android"
"372",21349462,"<p>I've solved my problem thanks to <a href=""http://stackoverflow.com/questions/11883214/efficient-handling-of-long-running-http-connections-in-an-nginx-gunicorn-django"">this thread</a>:</p>

<p>I'm using <strong>Celery</strong> to send my notifications through a task queue.
I can't believe how simple it is!</p>

<p>Thanks anyway :)</p>
","android"
"373",26156522,"<p>Run python program in android with Qpython: (Python 2.7.2)</p>

<blockquote>
  <p>Create program and run it:</p>
</blockquote>

<ul>
<li>Go to Editor.</li>
<li>Write Your Script.</li>
<li>Tap Save icon. ('4th icon' at bottom)</li>
<li>Tap Run. ('Arrow icon' in middle at bottom)</li>
</ul>

<p>Script will run and output/errors will be shown in logfile in notification bar.</p>

<p>** You can add ' #qpy:console' in starting of script . It will take you to console mode instead of logfile</p>

<blockquote>
  <p>Run existing script:</p>
</blockquote>

<ul>
<li>Tap on big button with python logo in center of screen.</li>
<li>Tap run local script.</li>
<li>Tap on script you want to run.</li>
</ul>

<p><a href=""http://wiki.qpython.org/doc/how-to-start/"" rel=""nofollow"">http://wiki.qpython.org/doc/how-to-start/</a></p>

<blockquote>
  <p>There is another app from same developers called Qpython3 in which you can run python3 applications including scripts and projects.In Qpython3 after running script it will directly take you to console mode.</p>
</blockquote>
","android"
"374",17997376,"<p>I guess is related with how the '\' (backslash) are treated, they may be <em>escaping</em> the following character.</p>

<p>Using <strong>AndroidViewClient</strong> plugin as explained <a href=""https://github.com/dtmilano/AndroidViewClient/wiki#plugin"" rel=""nofollow"">here</a> should solve this Windows problem.</p>

<p>For example:</p>

<pre><code>c:&gt;\path\to\monkeyrunner -plugin \path\to\androidviewclient-&lt;version&gt;.jar myscript.py
</code></pre>
","android"
"375",8880930,"<p>Ok, so you just want to run a home based web server without static IP. If you have a linux server, you can try this:</p>

<p>Use the apache webserver installed by default and set up a test page. The page is dropped into your webservers public directory. Now, how to resolve your IP...lets say it is...25.24.4.166 and you want it to have a host.name.com to bind to. Go to <a href=""http://www.no-ip.com/index.php"" rel=""nofollow"">http://www.no-ip.com/index.php</a> and sign up. You can get a site from noip that is like yourname.theirdomain.com/.net/.info. They have cool names like sytes.net and servebeer.org...even workisboring.com</p>

<p>You'll be able to choose your own top level name...for instance, Ithink.dnsiskinky.com could be your new domain name. Next download a client from the download tab: <a href=""https://www.no-ip.com/downloads.php"" rel=""nofollow"">https://www.no-ip.com/downloads.php</a></p>

<p>The linux client is a tar.gz source and is simple to install. Just follow the instructions. Now you own yoursite.theirsite.com and your IP will ALWAYS update (as long as noip.com is up) each time you log on/sign on/beam up or whatever it is you do.</p>

<p>It isn't too much trouble to generalize this technique for dynamic web services. Sorry about the authentication, it's a whole other story as I haven't thought about it enough. May be you can send a request header hash or something like that (like for ex. what Amazon does in s3 and other related services for authentication).</p>
","android"
"376",9652910,"<p>A better way to do it is to write a script that explicitly binds to the devices. The link below shows how for emulators</p>

<p><a href=""http://chanakaudaya.wordpress.com/2012/04/10/monkeyrunner-tutorial-running-tests-on-multiple-devices-with-monkeyrunner-13/"" rel=""nofollow"">http://chanakaudaya.wordpress.com/2012/04/10/monkeyrunner-tutorial-running-tests-on-multiple-devices-with-monkeyrunner-13/</a></p>

<p>also seems similar to this question(Which i answered):</p>

<p><a href=""http://stackoverflow.com/questions/13231856/can-not-simultaneously-run-monkeyrunner-scripts-e-g-two-monkeyrunner-process/13460438#13460438"">Can not simultaneously run monkeyrunner scripts (e.g. two monkeyrunner process) on multi device</a></p>
","android"
"377",15622779,"<p>First.  Once you have your projects setup correctly then the same wizard that generated your client library will copy it to your Android project and extra the source files.  then you will find the packages you need in the endpoint-libs folders in your project explorer.  Take a look at <a href=""http://stackoverflow.com/a/15442841/150016"">this post</a> for tips on getting that working.</p>

<p>Then you invoke an endpoint using Android code like this:</p>

<pre><code>final HttpTransport transport = AndroidHttp.newCompatibleTransport();
JsonFactory jsonFactory = new JacksonFactory();

endpointname.Builder builder = new endpointname.Builder( transport, jsonFactory, null );    
builder.setApplicationName( appName );

endpointname service = builder.build();

try {
   response = service.methodName( parameters ).execute();
} catch (IOException e) {
   Log.e(...);
}
</code></pre>
","android"
"378",16083560,"<p>backslashes are escape characters in strings.</p>

<p>so you have a few choices to deal with that in your example...</p>

<ol>
<li><p>use raw strings:</p>

<p>sys.path.append(r""Functions\guess_language"")</p></li>
<li><p>escape the backslash with another backslash:</p>

<p>sys.path.append(""Functions\\guess_language"")</p></li>
<li><p>use forward slashes:</p>

<p>sys.path.append(""Functions/guess_language"")</p></li>
<li><p>use os.path.join:</p>

<p>sys.path.append(os.path.join(""Functions"", ""guess_language""))</p></li>
<li><p>string formatting with os.sep:</p>

<p>sys.path.append('Functions%sguess_language' % os.sep)</p></li>
</ol>
","android"
"379",15763660,"<p>Finally this code worked</p>

<pre><code>import webapp2
import json

class MainPage(webapp2.RequestHandler):
    def post(self):
        self.response.out.write(""This is a POST Request \n"")
        req = self.request
        a = req.body
        b = json.loads(a)

        self.response.out.write(b)
        self.response.out.write(b['reg_id'])
        self.response.out.write(b['datetime'])
        self.response.out.write(type(b))

app = webapp2.WSGIApplication([('/', MainPage)], debug=True)
</code></pre>

<p>b comes out to be of the type List as is required.</p>
","android"
"380",27874024,"<p>U can use Xpath of that element, for finding xpath u will need appium inspector, which is supported in MAC OSX only, so you have to use an mac and configure Android SDK and Appium on MAC in order to get it working.
Code will be like this : </p>

<pre><code> #-*- coding: utf-8 -*-
__author__ = 'chetan.krishna'
import os
import time
import unittest
from time import sleep
from appium import webdriver
from pylab import *
from teamcity import is_running_under_teamcity
from teamcity.unittestpy import TeamcityTestRunner
import logging

# Returns absolute path relative to this file
PATH = lambda p: os.path.abspath(
    os.path.join(os.path.dirname(__file__), p)
)


class AvavntiAndroidTests(unittest.TestCase):
    def setUp(self):
        desired_caps = {}
# Specify platform below(Android, iOS)
        desired_caps['platformName'] = 'Android'
# Specify OS version(Settings-&gt;About phone -&gt; android version)
        desired_caps['platformVersion'] = '4.4.4'
# Obtain the Device name from Adb[For Android](Terminal Command: ""adb devices"")
        desired_caps['deviceName'] = '4d0081004c8741a9'

        desired_caps['noReset'] = False
# Specify the path to Application
        desired_caps[""app""] = PATH('AvantiMarket_v1.4.apk')
# Wait for email login activity to appear
        desired_caps[""appWaitActivity""]= ('com.android.avantimarket.ui.activity.EmailLoginActivity')
        self.driver = webdriver.Remote('http://localhost:4723/wd/hub', desired_caps)

    def tearDown(self):
# end the session
        self.driver.quit()


    def test_Avanti(self):
# wait for the login screen to appear
        self.driver.implicitly_wait(20)
# set values for plotting pass and fail results
        nPass = 0
        nFail = 0
        print('Checking login for registered user')
    # Logging in as indiaone@avantilab.org
elf.driver.implicitly_wait('20')
        print('Trying to login with abc@abc.org')
        self.driver.find_element_by_xpath('//UIAApplication[1]/UIAWindow[2]/UIATextField[1]').send_keys('abc@abc.org.org')
        self.driver.find_element_by_xpath('//UIAApplication[1]/UIAWindow[2]/UIASecureTextField[1]').send_keys('12345678')
        self.driver.hide_keyboard()
        self.driver.implicitly_wait(10)
        self.driver.find_element_by_xpath('//UIAApplication[1]/UIAWindow[2]/UIAButton[3]').click()
        time.sleep(20)
        self.driver.implicitly_wait(99)
        try:
            self.driver.find_element_by_xpath('//UIAApplication[1]/UIAWindow[2]/UIASecureTextField[1]')
        except :
            print('Login failed, please check credentials and network')
        else:
            print('Login successful, creating pin')

        self.driver.find_element_by_xpath('//UIAApplication[1]/UIAWindow[2]/UIASecureTextField[1]').send_keys('1')
        self.driver.find_element_by_xpath('//UIAApplication[1]/UIAWindow[2]/UIASecureTextField[2]').send_keys('1')
        self.driver.find_element_by_xpath('//UIAApplication[1]/UIAWindow[2]/UIASecureTextField[3]').send_keys('1')
        self.driver.find_element_by_xpath('//UIAApplication[1]/UIAWindow[2]/UIASecureTextField[4]').send_keys('1')
        self.driver.find_element_by_xpath('//UIAApplication[1]/UIAWindow[2]/UIASecureTextField[5]').send_keys('1')
        self.driver.find_element_by_id('com.android.avantimarket:id/m_emailTextField').send_keys('abc@abc.org.org')
        self.driver.back()
        nPass= nPass+1
        self.driver.implicitly_wait(20)
        self.driver.find_element_by_id('com.android.avantimarket:id/m_passwordTextField').send_keys('12345678')
        nPass= nPass+1
        self.driver.back()
        self.driver.implicitly_wait(10)
        self.driver.find_element_by_name('SIGN IN').click()
        self.driver.implicitly_wait(30)
        time.sleep(5)
# validating for successful login
        try:
            self.driver.find_element_by_id('com.android.avantimarket:id/create_pin_fields_container')
            print('Login successful')
            nPass= nPass+1
        except:
            print('Login failed')
            nFail = nFail + 1
        else:
# Creating pin required for login
            print('Creating Pin for user')
        self.driver.find_element_by_id('com.android.avantimarket:id/create_pin_fields_container').send_keys('1111')
        self.driver.find_element_by_id('com.android.avantimarket:id/reEnter_pin_fields_container').send_keys('1111')
        self.driver.back()
        self.driver.implicitly_wait(20)
        self.driver.find_element_by_id('com.android.avantimarket:id/m_saveButton').click()
        self.driver.implicitly_wait(10)
        self.driver.find_element_by_id('com.android.avantimarket:id/btn_cominsoon_Yes').click()
        self.driver.implicitly_wait(10)
        time.sleep(8)
</code></pre>
","android"
"381",29587349,"<p>I use <code>QPython</code>(<a href=""http://qpython.com/"" rel=""nofollow"">http://qpython.com/</a>) to execute python code on android. However,this tool may not have <code>scrapy</code> package, but you can use <code>urllib</code> and <code>urllib2</code>(<code>QPython</code> contain these two package).</p>
","android"
"382",28929758,"<p>Actually I found the answer and I found it necessary to share it at here since I could not find any possible duplicate in the same or similiar context.</p>

<p>Create a "".wgetrc"" file in your home folder and open it with a text editor. Edit and save:</p>

<pre><code>check_certificate = off
</code></pre>

<p>And wget will not check for any SSL certificate. But I don't know if it's a safe way to do this.</p>
","android"
"383",29947134,"<p>After 3 weeks of debugging and see log files of server and log cat of client I'm not found any logical error happens so i return to see <strong>pythonanywhere</strong> free server limitations I found :</p>

<p><strong><em>Access to external internet sites from your code e.g. urllib or wget</em></strong></p>

<p><strong><em>Specific sites via HTTP(S) only</em></strong> </p>

<p>i don't know what is point means but i decided use <strong>https</strong> instead of <strong>http</strong> and it's work perfect in both wifi and mobile data </p>

<pre><code>json.accumulate(""user_name"", ""mkm"");
json.accumulate(""title"", ""hello"");
json.accumulate(""body"", ""hello all"");
json.accumulate(""img"", "" "");
RequestAddNewStory rans = new RequestAddNewStory(this , AddHashtag);
rans.execute(""https://-----.pythonanywhere.com/api/story"" , json.toString());
</code></pre>

<p>But i'm still don't know if <strong>pythonanywhere</strong> free server allow you to send your requests only <strong>https</strong> why <strong>http</strong> request work perfect via wifi only.</p>
","android"
"384",13636587,"<p>There is no simple command for running SL4A apps.  SL4A as an activity has no command line interface.</p>

<p>The one you'll want to look at is this:</p>

<pre><code>$ am start -a com.googlecode.android_scripting.action.LAUNCH_FOREGROUND_SCRIPT -n com.googlecode.android_scripting/.activity.ScriptingLayerServiceLauncher -e com.googlecode.android_scripting.extra.SCRIPT_PATH /sdcard/sl4a/scripts/test.py
</code></pre>

<p>What this does is issue an Android intent to SL4A to run a script at the specified path.  This path doesn't need to be in the /sdcard/sl4a/scripts directory.</p>

<p>This is of course a pain to type out at the command line, especially on the device itself.  There's nothing stopping you wrapping it up in a shell script.  A suggested example for this is available <a href=""http://a-more-common-hades.blogspot.co.uk/2011/04/shell-launcher-for-sl4a-scripts.html"">here</a></p>
","android"
"385",22511076,"<p>Not sure why (my guess it he way that class is defined), but it doesn't work when called on a method that doesn't belong to the same class you are binding. You can create a method inside the class and the call the method in the other class. Like this:</p>

<pre><code>from kivy.app import App

from kivy.uix.button import Button
from kivy.uix.boxlayout import BoxLayout


class Fejkbiljett(App):

    def build(self):
        self.gen_btn = Button(text='Generera',
                         size_hint=(.90, .10),
                         pos=(5, 5),
                         font_size=21)
        self.gen_btn.bind(on_press=self.getMessageFejkbiljett)
        l = BoxLayout()
        l.add_widget(self.gen_btn)
        return l

    def getMessageFejkbiljett(self, *args):
        print ""1. this is called on the method getMessageFejkbiljett of Fejkbiljett""
        st = StockholmTicket()
        st.getMessage(self)


class StockholmTicket():

    def getMessage(self, source):
        source.gen_btn.text = ""the event was called""
        print ""2. this is called on the method getMessage of StockholmTicket""

if __name__ == ""__main__"":
    Fejkbiljett().run()
</code></pre>
","android"
"386",18489562,"<p>This will work only for your simple example:</p>

<pre><code>&gt;&gt;&gt; from xml.dom.minidom import parseString, Document
&gt;&gt;&gt; def merge_xml(dom1, dom2):
    node_to_add = None
    dom3 = Document()
    for node_res in dom1.getElementsByTagName('resources'):
        for node_str in node_res.getElementsByTagName('string'):
            if 'TXT_T1' == node_str.attributes.values()[0].value:
                node_to_add = node_str
                break

    for node_res in dom2.getElementsByTagName('resources'):
        node_str3 = dom3.appendChild(node_res)
        for node_str in node_res.getElementsByTagName('string'):
            node_str3.appendChild(node_str)
            if 'TXT_T2' in node_str.attributes.values()[0].value and node_to_add is not None:
                node_str3.appendChild(node_to_add)
    return dom3.toxml()

&gt;&gt;&gt; dom2 = parseString('''&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;resources&gt;
  &lt;string name=""TXT_T2""&gt;BBBB&lt;/string&gt;
&lt;/resources&gt;''')
&gt;&gt;&gt; dom1 = parseString('''&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;resources&gt;
  &lt;string name=""TXT_T1""&gt;AAAA&lt;/string&gt;
&lt;/resources&gt;''')
&gt;&gt;&gt; print merge_xml(dom1, dom2)
&lt;?xml version=""1.0"" ?&gt;&lt;resources&gt;

&lt;string name=""TXT_T2""&gt;BBBB&lt;/string&gt;&lt;string name=""TXT_T1""&gt;AAAA&lt;/string&gt;&lt;/resources&gt;
</code></pre>
","android"
"387",13996411,"<blockquote>
  <p>I need to generate the ODIN-1 of a string in Python. </p>
</blockquote>

<p>No you don't, not according to the docs.</p>

<p>You generate an ODIN-1 of an 802.11 MAC address, ANDROID_ID, or DeviceUniqueID. Some relevant quotes:</p>

<blockquote>
  <p>The seed should be left unaltered from the format returned by the operating system.</p>
  
  <p>NOTE: iOS returns MAC Address NOT a string, but a 6-byte array"" right underneath the chart.</p>
  
  <p>… representing it as a raw byte array prevents any ambiguity around punctuation and capitalization:</p>
</blockquote>

<p>And IIRC, <code>ANDROID_ID</code> is a 64-bit integer, neither a MAC nor a string. (I don't know about <code>DeviceUniqueId</code> on Windows Phone.)</p>

<p>So, you probably need to generate the ODIN-1 of a 6-byte array <code>[0x74, 0xe2, 0xf5, 0x43, 0xd2, 0xce]</code>, not a 12-character string <code>""74e2f543d2ce""</code>. The sample shows how to do that in Objective-C; in Python, it's:</p>

<pre><code>mac = bytes([0x74, 0xe2, 0xf5, 0x43, 0xd2, 0xce])
</code></pre>

<p>Or, since your question specifies Android, presumably you don't want the MAC address at all, in any format… but I'll assume that was just a mistaken tag, and you're using iOS, and <em>do</em> want the MAC address.</p>

<p>How do you do that?</p>

<blockquote>
  <p><strong>Hash Step</strong>: Pass the Identifier Seed through the SHA-1 hash function.</p>
</blockquote>

<p>In Python, that's:</p>

<pre><code>hash = hashlib.sha1(mac)
</code></pre>

<blockquote>
  <p>The resulting message digest is ODIN-1.</p>
</blockquote>

<p>In Python, that's:</p>

<pre><code>digest = hash.hexdigest()
</code></pre>

<p>Putting it together:</p>

<pre><code>hashlib.sha1(bytes([0x74, 0xe2, 0xf5, 0x43, 0xd2, 0xce])).hexdigest()
</code></pre>

<p>The result is a ""40 lowercase character string"", just as the docs say it should be:</p>

<pre><code>'10f4ab0775380aceaca5a2733604efa6d6364b08'
</code></pre>

<p>Also, if you're looking for clarification on a preliminary spec posted on a wiki page, why would you ask about it at SO instead of posting a comment on that page?</p>

<p>To answer your first specific question:</p>

<blockquote>
  <p>I'm not sure if I need to perform other operations to it beforehand? </p>
</blockquote>

<p>The spec says:</p>

<blockquote>
  <p>The seed should be left unaltered from the format returned by the operating system.</p>
</blockquote>

<p>To answer your second:</p>

<blockquote>
  <p>Also, is the final output the hex digest of the SHA-1 or something else?</p>
</blockquote>

<p>The spec says:</p>

<blockquote>
  <p>The resulting message digest is ODIN-1.</p>
  
  <p>// The format of this hash should be a 40 lowercase character string:</p>
</blockquote>

<p>Meanwhile, there's sample code attached to the project (as you'd expect, given that it's at googlecode)… but it's not that helpful.</p>

<p>The <a href=""http://code.google.com/p/odinmobile/source/browse/Sample%20Code/iOS/trunk/ODIN/ODINViewController.m"" rel=""nofollow"">iOS sample</a> is completely missing the relevant code. It's a generic GUI app generated by the wizard, with an added <code>#import ""ODIN.h""</code> and <code>textView.text = [ODIN1() lowercaseString];</code> in the <code>viewDidLoad</code>. But that <code>ODIN.h</code> file, and the corresponding <code>ODIN.m</code> or <code>libODIN.a</code> or whatever doesn't appear to be anywhere. (From a brief glance at the <code>project.pbxproj</code>, there's clearly supposed to be more files, which they apparently just didn't check in.)</p>

<p>The <a href=""http://code.google.com/p/odinmobile/source/browse/Sample%20Code/Android/trunk/src/org/odinmobile/android/ODIN.java"" rel=""nofollow"">Android sample</a> does have the relevant code, but it clearly violates the spec. It gets the <code>ANDROID_ID</code> as a Unicode string, then <strong>encodes it to iso-8859-1</strong>, calls SHA-1 on the resulting bytes, and generates a hex digest out of it. The docs explicitly say to use the OS value exactly as returned by the OS; the code Latin-1 encodes it instead.</p>

<p>The <a href=""http://code.google.com/p/odinmobile/source/browse/Sample%20Code/Windows%20Phone/trunk/ODIN/ODIN.cs"" rel=""nofollow"">Windows sample</a>, on the other hand, does seem to do what the docs say—it gets the DeviceUniqueId as a <code>byte[]</code>, and uses it as-is. (However, the code won't actually work, because it's using an obsoleted API call, which throws an exception rather than return a <code>byte[]</code>…)</p>

<p>At this point, I have to ask why you're following this spec in the first place. If you're trying to interoperate with someone else's code, you probably care which of the contradictory ways of interpreting this spec is being used by that code, rather than trying to guess which one the designers intended.</p>

<p>Not to mention that Apple has explicitly told people not to use anything based on the MAC to replace the UDID, and ODIN is something trivially based on the MAC to replace the UDID…</p>
","android"
"388",29077809,"<p>Use this:</p>

<pre><code>driver.findElementByXPath(""//*[@class='android.widget.RelativeLayout' and @index='1']"").Click();
</code></pre>
","android"
"389",9847084,"<p>The standard answer to sound processing with python is PyAudio, which is separate package that actually depends on PortAudio, which probably hasn't been built for android so it's not really a good solution (unless you feel like being a hero and trying to get it to build).</p>

<p>Another option is the <a href=""http://docs.python.org/library/audioop.html"" rel=""nofollow""><code>audioop</code> module</a>. The problem there is that you'll need to convert whatever format that file is saved as into the format <code>audioop</code> accepts (strings of 8/16/32bit wide signed integer samples). It's hard to say just how you'd do that, but if you're really lucky it'll be a .wav file and you can just use the <a href=""http://docs.python.org/library/wave.html#wave.Wave_read.readframes"" rel=""nofollow""><code>wave</code> module's <code>readframes</code></a> (which conveniently outputs the data as a string of bytes).</p>

<p>So, if SL4A implements all of the python core, you <em>may</em> be able to do it with no dependencies.</p>
","android"
"390",37947992,"<p>This is a <code>culebra</code> generated script slightly modified to do what you are asking for.</p>

<pre><code>#! /usr/bin/env python
# -*- coding: utf-8 -*-
'''
Copyright (C) 2013-2016  Diego Torres Milano
Created on 2016-06-21 by Culebra v11.5.9
                      __    __    __    __
                     /  \  /  \  /  \  /  \ 
____________________/  __\/  __\/  __\/  __\_____________________________
___________________/  /__/  /__/  /__/  /________________________________
                   | / \   / \   / \   / \   \___
                   |/   \_/   \_/   \_/   \    o \ 
                                           \_____/--&lt;
@author: Diego Torres Milano
@author: Jennifer E. Swofford (ascii art snake)
'''


import re
import sys
import os

from com.dtmilano.android.viewclient import ViewClient

TAG = 'CULEBRA'

_s = 5
_v = '--verbose' in sys.argv


kwargs1 = {'ignoreversioncheck': False, 'verbose': False, 'ignoresecuredevice': False}
device, serialno = ViewClient.connectToDeviceOrExit(**kwargs1)
kwargs2 = {'forceviewserveruse': False, 'useuiautomatorhelper': False, 'ignoreuiautomatorkilled': True, 'autodump': False, 'startviewserver': True, 'compresseddump': True}
vc = ViewClient(device, serialno, **kwargs2)


device.press('HOME')
vc.dump(window=-1)
# let's keep the reference to apps (dangerous but possible)
apps = vc.findViewWithContentDescriptionOrRaise(u'''Apps''')

apps.touch()

vc.sleep(_s)
vc.dump(window=-1)

vc.findViewWithContentDescriptionOrRaise(u'''API Demos''').touch()

device.press('HOME')

# use the reference we kept
apps.touch()

vc.dump(window=-1)

browser = vc.findViewWithContentDescriptionOrRaise(u'''Browser''')
browser.touch()

device.press('HOME')
</code></pre>

<p>The script keeps the reference to <strong>apps</strong> and reuse it.
Keeping the reference may not work in many other situations but because it's very unlikely the the home screen or the <strong>Apps</strong> button change you may be fine.</p>
","android"
"391",31029641,"<p>In case you need to schedule a repeated activity in a loop, you can use <code>Clock.schedule_interval()</code> to call a function on a regular schedule:</p>

<pre><code>def my_repeated_function(data):
    print (""My function called."")

Clock.schedule_interval(my_repeated_function, 1.0 / 30) # no brackets on function reference 
                                                       # call it 30 times per second
</code></pre>

<p>There is a lot more information on how to schedule events on a regular, conditional or one-time basis with Kivy's event loop <a href=""http://kivy.org/docs/guide/events.html"" rel=""nofollow"">here</a>.</p>
","android"
"392",32949502,"<p>Retrofit had few problems with handling files so i really recommend you to upgrade your library from beta1 to beta2 it works better.</p>

<p>In beta2 you make your api look like this - </p>

<pre><code>public interface ApiInterface {
        @Multipart
        @POST (""/api/Accounts/editaccount"")
        Call&lt;User&gt; editUser (@Header(""Authorization"") String authorization, @Part(""file\""; filename=\""pp.png\"" "") RequestBody file , @Part(""FirstName"") RequestBody fname);
    }
</code></pre>

<p>The 'file' in the part of 'RequestBody file' is the file entity name that you need to access on your server side. </p>

<p>This is how you call this request -</p>

<pre><code>File file = new File(imageUri.getPath());
        RequestBody fbody = RequestBody.create(MediaType.parse(""image/*""), file);
        RequestBody name = RequestBody.create(MediaType.parse(""text/plain""), firstNameField.getText().toString());
        Call&lt;User&gt; call = client.editUser(getToken(), fbody, name, id);
        call.enqueue(new Callback&lt;User&gt;() {
            @Override
            public void onResponse(retrofit.Response&lt;User&gt; response, Retrofit retrofit) {
            }

            @Override
            public void onFailure(Throwable t) {
            }
        });
</code></pre>

<p>This is a copy of code that <strong>ayon115</strong> wrote in the retrofit library discussion on this link - <a href=""https://github.com/square/retrofit/issues/1063"" rel=""nofollow"">https://github.com/square/retrofit/issues/1063</a></p>

<p>I used the same concept and it worked for me smoothly.</p>

<p>I really recommend you to go that link and read the discussion about the library and the difference between beta1 to beta2.</p>

<p>If You are having problem testing the server/client.</p>

<p>You can go to www.requestb.in and deploy a test server so you could test out your http requests from your client so you wouldn't need to run your server each time :)</p>

<p>And to test your client you can use the POSTMAN tool to make requests to your server.</p>

<p>Hope this helps.</p>
","android"
"393",39603112,"<p>A Facebook/Google sign in can be implemented with Kivy. You do not necessarily have to use the Google or Facebook SDK, there are other auth libraries available in Python.</p>

<p>If you are to use the Facebook/Google SDKs, it is still possible as you can execute any Java code with Pyjnius. Per your question about installing 'SDKs' without Android studio, I'm not sure what you mean, but you may specify dependencies in your Buildozer dependency file.</p>
","android"
"394",8030965,"<p>The PyBluez module works well in general and I've used it with SL4A with no problems. You may have better luck just using that and skipping the Java altogether.</p>

<p>PyBluez is not a pure Python module, so it has to be compiled, but this has been done and a recent version is available from the <a href=""http://code.google.com/p/android-python27/"" rel=""nofollow"">downloads</a> section of the Py4A site. It's this copy that I use personally, without any issues.</p>

<p>Just download a copy to your droid, open the Python4Android app, hit Import Modules, and select the PyBluez egg.</p>
","android"
"395",30099915,"<p>Yes, you can defined any object/layout in the .kv file and reference it in the main .py file and I believe that's the way to go in Kivy. However, instead of deriving from the Popup class (as in <code>&lt;MaPopup@Popup&gt;</code>), I would suggest defining the <em>content</em> of the popup and provide it when creating a Popup instance in the main .py file. There is no need to subclass Popup when all you are interested in are its contents.</p>

<p>So, to create the popup content in .kv based on what you declared in your .py file:</p>

<pre><code>&lt;MaPopup@BoxLayout&gt;:
    orientation: ""vertical""
    Label:
        text: ""text""
        size_hint: (1,5)
    Button:
        text: ""Close""
        size_hint: (1,1)
        on_release: root.cancel()
</code></pre>

<p>Since <code>MaPopup</code> is a BoxLayout and not a Popup, it does not have a <code>dismiss</code> method, so we'll bind <code>root.cancel()</code> to <code>on_release</code> and give it functionality in the .py file. </p>

<p>In you .py file, you'll need to create a Class with the same name AND define the <code>cancel</code> attribute that was referenced in the .kv file (which will be None for starters):</p>

<pre><code>from kivy.properties import ObjectProperty
class MaPopup(BoxLayout):
    cancel = ObjectProperty(None)
</code></pre>

<p>This will allow you to create any instances you want of <code>MaPopup</code> and insert it wherever you want in your .py file.</p>

<p>Finally, you can create a Popup using an instance <code>MaPopup</code> as its contents. There are a few extra lines that will help you make the opening/closing of Popups of more general use</p>

<pre><code>class kkkApp(App):
    # Use this class attribute to reference Popups
    _popup = None

    # Use this method to close Popups referenced by _popup
    def _dismiss_popup(self):
        self._popup.dismiss()

    def do_popup(self):
        # Instantiate MaPopup and give functionality to cancel button
        popup_content = MaPopup(cancel=self._dismiss_popup)
        self._popup = Popup(title = 'title', size_hint = (0.5, 0.5), content=popup_content)
        self._popup.open()
</code></pre>

<p>Notice that we created an instance of <code>MaPopup</code> named <code>popup_content</code> and provided this instance as the Popup content using the <code>content=</code> keyword. We also added functionality to the cancel button at this stage, which gives you flexibility to bind the <code>on_release</code> event to any other method you want. You could create another <code>MaPopup</code> a give an entirely different function to the cancel button. </p>
","android"
"396",31416122,"<p>I solve it! I saw a few instructions and specific installation of some packages for use it on Ubuntu 14.04 (64 bit).
This is my full steps:</p>

<pre><code>apt-get install python-pip
pip install --upgrade buildozer

apt-get install python2.7-dev
pip install --upgrade cython

dpkg --add-architecture i386

apt-get update
apt-get install build-essential ccache git lib32z1 libncurses5:i386 libstdc++6:i386 python2.7 openjdk-7-jdk unzip zlib1g-dev zlib1g:i386

apt-get install python-kivy
</code></pre>
","android"
"397",31076587,"<p>Based on the stack trace, it appears that <code>urllib.urlretrieve</code> thinks your Dropbox URL is a local file path, as opposed to an Internet URL, and is attempting to open it as such. (I.e., it tries to use <code>open_local_file</code>.) That is supposed to be automatically determined based on the format of the URL, but this is apparently confused by your attempt to escape the "":"", which should be unnecessary.</p>

<p>Your sample code actually fails the same way for me, just in the Python interpreter:</p>

<pre><code>In [1]: import urllib

In [2]: urllib.urlretrieve('https%3A//dl.dropboxusercontent.com/u/95587456/Evenimente/1.jpg','./1.jpg')
...
IOError: [Errno 2] No such file or directory: 'https://dl.dropboxusercontent.com/u/95587456/Evenimente/1.jpg'
</code></pre>

<p>That being the case, are you sure you've run the code you thought were you on the different platforms as you mentioned?</p>

<p>Just fixing the URL back to normal works for me:</p>

<pre><code>In [1]: import urllib

In [2]: urllib.urlretrieve('https://dl.dropboxusercontent.com/u/95587456/Evenimente/1.jpg','./1.jpg')
Out[2]: ('./1.jpg', &lt;httplib.HTTPMessage instance at 0x10da6d878&gt;)
</code></pre>

<p>(I also modified the second parameter to make it work on my computer, but that's unrelated.)</p>
","android"
"398",23589964,"<p>I think you need XMPP messaging. It's support by App Engine but not in PHP : <a href=""https://developers.google.com/appengine/features/"" rel=""nofollow"">https://developers.google.com/appengine/features/</a></p>

<p>XMPP permit to send and receive chat messages.</p>
","android"
"399",7577932,"<p>This may be related to keep-alive.  Android sends Connection: Keep-Alive and Python sends back a Connection: close.  I've looked at the HTTP headers that are being sent from Firefox and HttpClient and there is no difference (other than Firefox sending some additional Accept headers).  Somehow Android is expecting the Python server to send something other than <code>HTTP/1.1 200 OK\nContent-type: text/html</code> and therefore keeping the socket open.  I ended up writing my own basic HTTP server and client.</p>

<p>Python code:</p>

<pre><code>class SingleTCPHandler(SocketServer.BaseRequestHandler):

    def handle(self):
        data = self.request.recv(1024)
        parts = data.rsplit("" "")
        if (parts[0] != ""GET""):
            self.request.close()
            return

        url = parts[1].split(""?"")[1]
        qv = parse_qs(url)
        ...
</code></pre>

<p>Android:</p>

<pre><code>    Socket socket = null;
    PrintWriter output = null;

    try {
        socket = new Socket(this.ipAddress, this.portNo);
        output = new PrintWriter(new BufferedWriter
                (new OutputStreamWriter(socket.getOutputStream())), true);
        output.println(""GET "" + url);
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        try {
            if (socket != null)
                socket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        if (output != null)
            output.close();
    }
</code></pre>
","android"
"400",35634085,"<p>Finally after so many days, I was able to find answer to it. It turns out that the class <code>SignedJwtAssertionCredentials</code> was removed from the <code>oath2client</code> python package in the <code>2.0.0</code> update. It was no more under <code>oauth2client.client</code>. The behaviour has been moved onto <code>oauth2client.service_account.ServiceAccountCredentials</code>.</p>

<p>Following worked for me:</p>

<pre><code>import argparse

from apiclient.discovery import build
from oauth2client.service_account import ServiceAccountCredentials

import httplib2
from oauth2client import client

SERVICE_ACCOUNT_EMAIL = ('myaccountemail.com')

# Declare command-line flags.
argparser = argparse.ArgumentParser(add_help=False)
argparser.add_argument('package_name',
                   help='The package name. Example: com.android.sample')

def main():
  key='mykeyname.p12'
  scope = 'https://www.googleapis.com/auth/androidpublisher'

  credentials = ServiceAccountCredentials.from_p12_keyfile(
      SERVICE_ACCOUNT_EMAIL,
      key,
      scopes=[scope]
  )
  http = httplib2.Http()
  http = credentials.authorize(http)
  ....
</code></pre>

<p>Source: </p>

<ul>
<li><p><a href=""https://github.com/google/oauth2client/issues/401"">SignedJwtAssertionCredentials has been removed: Why?</a></p></li>
<li><p><a href=""https://github.com/google/oauth2client/pull/404/files"">oauth2client-Release 2.0.0</a></p></li>
</ul>
","android"
"401",33814581,"<blockquote>
  <p>self.add_widget(MyPaintWidget)</p>
</blockquote>

<p>This should be <code>self.add_widget(MyPaintWidget())</code> - you need an <em>instance</em> of the class, not the class declaration itself.</p>
","android"
"402",30465364,"<p>try kivy <a href=""https://github.com/kivy/python-for-android"" rel=""nofollow"">https://github.com/kivy/python-for-android</a></p>

<p>It can be used to create android apps.</p>
","android"
"403",16037692,"<p>I had exactly the same problem on my Lenovo P770. Later I confirmed that it was due to IPV6 binding to localhost by some software, or OEM ROM.
I was lucky enough to get help from Robbie Matthews on Google groups. He compiled a special SL4A package addressing this issue.</p>

<p><a href=""http://code.google.com/p/android-scripting/wiki/Unofficial#Development_releases"" rel=""nofollow"">http://code.google.com/p/android-scripting/wiki/Unofficial#Development_releases</a></p>

<p>If you work out, do not thank me. Thank him instead.</p>
","android"
"404",32069867,"<p>Use any back-end, in which you feel comfortable, your just have to provide web services for Android. Google App Engine &amp; python is as good as any other. Only thing which matter is your comfort or experience (in a particular platform).</p>

<p>Some other options are:</p>

<ul>
<li>PHP, MySql</li>
<li>Java (see <a href=""http://sparkjava.com/"" rel=""nofollow"">Spark Framework</a>)</li>
<li>Scala/Java <a href=""https://www.playframework.com/"" rel=""nofollow"">Playframework</a></li>
<li>&amp; Many other</li>
</ul>
","android"
"405",13324439,"<p>Here's some code that I have working to stream from my phone running Android IP Camera, using Andrea Diaz's idea and python with opencv2...</p>

<pre><code>import cv2
import urllib

while True:
    urllib.urlretrieve(""http://192.168.0.10:8080/shot.jpg"", ""foto.jpg"")
    src_image = cv2.imread('foto.jpg', 0)
    cv2.imshow('Viewer',src_image)
    # read user keyboard for 5ms, and break on any keypress.    
    if (cv2.waitKey (5) != -1):
        break;
</code></pre>
","android"
"406",38199064,"<p>The <a href=""http://www.sqlite.org/c3ref/busy_timeout.html"" rel=""nofollow"">timeout</a> matters only if two transactions actually conflict.</p>
","android"
"407",30786979,"<p>I believe the simplest way is using Django Rest Framework.</p>

<p>In this scenario, the steps are:</p>

<ol>
<li><a href=""https://docs.djangoproject.com/en/1.8/topics/install/"" rel=""nofollow"">Install Django</a>.</li>
<li><a href=""https://docs.djangoproject.com/en/1.8/intro/tutorial01/"" rel=""nofollow"">Create the the Django App and the Model for the data you want to store and access through the API</a>.</li>
<li>Setup Django Rest Framework. There are many tutorials that can help you here, for example <a href=""http://axiacore.com/blog/getting-started-django-rest-framework/"" rel=""nofollow"">Getting Started with Django Rest Framework and AngularJS</a> .</li>
<li>Access your new API from a browser and your Django App. Here is going to be very useful the <a href=""http://www.django-rest-framework.org/topics/browsable-api/"" rel=""nofollow"">browser</a> Django Rest Frameworks will automagically create for your API.</li>
</ol>

<p>Unless you need to do something 'special', Django Rest Framework will help you a lot, generating views, dealing with JSon serialization and so on. Basically, the only thing you will need to care is the model definition.</p>

<p>From the Android side, you will need:</p>

<ol>
<li><p>Access your API using HttpClient. However, HttpClient library it is not recommended anymore to use it, as Google is focusing their efforts on improving the HttpURLConnection implementation.</p></li>
<li><p>Parser the data you got, in this in JSon format. To do this, you can use <a href=""http://developer.android.com/reference/android/util/JsonReader.html"" rel=""nofollow"">JsonReader</a>.</p></li>
</ol>

<p>Another alternative is using <a href=""http://square.github.io/retrofit/"" rel=""nofollow"">Retrofit</a>, a very popular REST client for Android and Java, which solves the two problems very easily.</p>
","android"
"408",10664196,"<p>An option is <a href=""http://kivy.org"">kivy</a>: a cool cross platform Python framework which works for Android, Win7, Linux, MacOSX and iOS.</p>

<p>Update: kivy project is growing daily, now supports also Raspberry Pi</p>
","android"
"409",37433212,"<p>For the client api compatible and db migration, you can host your own parse-server.</p>

<p>There is a simple express project to use parse-server.
<a href=""https://github.com/ParsePlatform/parse-server-example"" rel=""nofollow"">https://github.com/ParsePlatform/parse-server-example</a></p>

<p>They are lots of deploy guide to each cloud-platform</p>

<p><a href=""https://medium.com/google-cloud/deploying-parse-server-to-google-app-engine-6bc0b7451d50#.pzbcnnnjn"" rel=""nofollow"">Google App Engine</a></p>

<p><a href=""https://devcenter.heroku.com/articles/deploying-a-parse-server-to-heroku"" rel=""nofollow"">Heroku and mLab</a> </p>

<p><a href=""http://mobile.awsblog.com/post/TxCD57GZLM2JR/How-to-set-up-Parse-Server-on-AWS-using-AWS-Elastic-Beanstalk"" rel=""nofollow"">AWS and Elastic Beanstalk</a></p>

<p><a href=""https://www.digitalocean.com/community/tutorials/how-to-run-parse-server-on-ubuntu-14-04"" rel=""nofollow"">Digital Ocean</a></p>

<p><a href=""https://nodechef.com/blog/post/6/migrate-from-parse-to-nodechef%E2%80%99s-managed-parse-server"" rel=""nofollow"">NodeChef</a></p>

<p><a href=""https://azure.microsoft.com/en-us/blog/azure-welcomes-parse-developers/"" rel=""nofollow"">Microsoft Azure</a></p>

<p><a href=""https://github.com/cf-platform-eng/pws-parse-server"" rel=""nofollow"">Pivotal Web Services</a></p>

<p><a href=""http://blog.back4app.com/2016/03/01/quick-wizard-migration/"" rel=""nofollow"">Back4app</a></p>

<p>Or you can host your nodejs server with your domain name.</p>

<p>If you want to do something different from parse, you can send a pull request to <a href=""https://github.com/ParsePlatform/parse-server"" rel=""nofollow"">parse-server</a>. <a href=""https://github.com/ParsePlatform/parse-server/wiki/Parse-LiveQuery"" rel=""nofollow"">LiveQuery</a> is the extra function created by contributors.</p>

<p>For more details, see the link from <a href=""https://parse.com/migration"" rel=""nofollow"">Parse.com</a> , <a href=""https://github.com/ParsePlatform/parse-server/wiki"" rel=""nofollow"">github wiki</a>, and <a href=""https://github.com/ParsePlatform/parse-server/wiki#community-links"" rel=""nofollow"">community links</a>.</p>
","android"
"410",15862745,"<p>I know of Kivi (<a href=""http://kivy.org/"" rel=""nofollow"">http://kivy.org/</a>). Going this route may help you. </p>
","android"
"411",12432679,"<p>Given the nature of what you are trying to do, you are going to have to use and Android specific wifi library, which may or may not exist. This is the closest thing I could find which includes a wifi_scan() function which will return signal strength.</p>

<p><a href=""http://python-for-android.readthedocs.org/en/latest/android/"" rel=""nofollow"">http://python-for-android.readthedocs.org/en/latest/android/</a></p>
","android"
"412",18644841,"<p>Fixed it. The problem was with the static ip that was set in the phone. Even though I had set the static ip of the android phone to 192.168.16.9, it was not so. To check this, go to sl4a->view->interpreter->shell and type 'netcfg' and press enter. Among the various things that appear i found that the ip written corresponding to 'wlan0' was 192.168.43.1.
So I set the static ip of phone to the above ip and then changed my computers ip to 192.168.43.8.
So the server should bind to
    s.bind(('192.168.43.8',port))</p>

<p>And the client should connect to the same address.</p>
","android"
"413",8311615,"<p>This is a question of OCR.</p>

<p>Try here:</p>

<p><a href=""https://code.google.com/p/pytesser/"" rel=""nofollow"">https://code.google.com/p/pytesser/</a></p>

<p>It is probably easier to access the low level user interface elements than trying to figure out what reads on the screenshot. However, the question lacks related information about used software, operating system, etc. </p>
","android"
"414",33569469,"<p>Using Kivy's <a href=""https://github.com/kivy/python-for-android"" rel=""nofollow"">python-for-android project</a> would work as a starting point that can compile the python interpreter and bundle it in an android application, but you'd need to create a new frontend (in terms of the new toolchain, a bootstrap) to actually run the python code. You could check the kivy launcher stuff (built into the pygame bootstrap) to see how to call the python interpreter from java code.</p>
","android"
"415",27616652,"<p>You have to set the font, just like you did in working example, where you are using <code>DejaVuSans</code>, since the default font, <code>DroidSans</code>, apparently doesn't support your language. You can do this through list adapter:</p>

<pre><code># -*- coding: utf-8 -*-
import kivy
from kivy.app import App
from kivy.uix.floatlayout import FloatLayout
from kivy.lang import Builder
from kivy.uix.label import Label

Builder.load_string(
'''
#:import la kivy.adapters.listadapter 
#:import lbl kivy.uix.label

&lt;TI&gt;
    but: but
    ListView:
        id: but 
        adapter: la.ListAdapter(data=[], cls=lbl.Label)

&lt;MyLabel&gt;:
    font_name: 'data/fonts/DejaVuSans.ttf'
''')

class MyLabel(Label):
    pass

class TI(FloatLayout):
    def __init__(self, **kwargs):
        super(TI, self).__init__(**kwargs)
        self.but.adapter.data = [u'<U+0633><U+0644><U+0627><U+0645> <U+062F><U+0646><U+06CC><U+0627>']
        self.but.adapter.cls = MyLabel

class MyApp(App):
    def build(self):
        return TI()


if __name__ == '__main__':
    MyApp().run()
</code></pre>
","android"
"416",27898661,"<p>I'm not quite sure what you're trying to do here, but you can send keystrokes with selenium:</p>

<pre><code>from selenium.webdriver.common import keys
textfield.send_keys(keys.Keys().ENTER)
</code></pre>

<p>Where 'textfield' is your text field element. If you look at the Keys class in selenium, you can send any of the keyboard keys. This is useful if you want to hide the keyboard - just send a tab key and it will focus elsewhere.</p>
","android"
"417",20045784,"<p>(As per my original comment)</p>

<p>Are you aware of <a href=""https://github.com/kivy/pyjnius"" rel=""nofollow"">pyjnius</a>? It is used by (for instance) the kivy python-for-android project to interact with java classes, including managing stuff like intent listening. I apologise if this is technically unsuitable, I don't know enough about this area.</p>

<p>As a minor reference, <a href=""https://github.com/kivy/python-for-android/blob/master/recipes/android/src/android/activity.py#L9"" rel=""nofollow"">listener example</a> implementing an intent listener interface in Python and registering it with Android runtime using <code>pyjnius</code>.</p>

<p>Super-simple example, calling into java.</p>

<pre><code>&gt;&gt;&gt; from jnius import autoclass
&gt;&gt;&gt; autoclass('java.lang.System').out.println('Hello world')
Hello world
</code></pre>
","android"
"418",38674286,"<p>I suggest using buildozer instead of p4a - the buildozer uses it internally. It can also automatically download specified android sdk for you.</p>

<p>Install it using pip: <code>sudo pip install buildozer</code></p>

<p>Once you have it installed, go to your project directory and type:</p>

<pre><code>buildozer init
# edit the buildozer.spec, then
buildozer android_new debug deploy run
</code></pre>

<p>Find more info <a href=""https://github.com/kivy/buildozer"" rel=""nofollow"">on the github</a>.</p>
","android"
"419",18489562,"<p>lxml is the king of xml parsing. I'm not sure if this is what you are looking for, but you could try something like this</p>

<pre><code>from lxml import etree as et

# select a parser and make it remove whitespace
# to discard xml file formatting
parser = et.XMLParser(remove_blank_text=True)

# get the element tree of both of the files
src_tree = et.parse('src.xml', parser)
dest_tree = et.parse('dest.xml', parser)

# get the root element ""resources"" as
# we want to add it a new element
dest_root = dest_tree.getroot()

# from anywhere in the source document find the ""string"" tag
# that has a ""name"" attribute with the value of ""TXT_T1""
src_tag = src_tree.find('//string[@name=""TXT_T1""]')

# append the tag
dest_root.append(src_tag)

# overwrite the xml file
et.ElementTree(dest_root).write('dest.xml', pretty_print=True, encoding='utf-8', xml_declaration=True)
</code></pre>

<p>This assumes, that the first file is called src.xml and the second dest.xml. This also assumes that the element under which you need to copy the new element is the parent element. If not, you can use the find method to find the parent you need or if you don't know the parent, search for the tag with 'TXT_T2' and use tag.getparent() to get the parent.</p>
","android"
"420",5875817,"<p>There are some bugs in monkeyrunner avoiding correct handling of extras. This <a href=""http://stackoverflow.com/questions/4891276/how-can-i-pass-an-extra-to-an-android-intent-using-monkeyrunner"">question</a> also mentions the case passing booleans, but it's not restricted to them.</p>

<p>The workaround, as monkeyrunner does not do much that invoking ADB in this cases is to use</p>

<pre><code>device.shell('am start -a android.intent.action.MAIN -n my.pkg/.MyActivity -e key val')
</code></pre>
","android"
"421",19213980,"<blockquote>
  <p>What is this Errno 11001?</p>
</blockquote>

<p>I don't know about that error, but I suggest to use the correct syntax which is</p>

<pre><code> import android
 droid = android.Android()
 droid.makeToast('my text to print should be inside the quotes')
</code></pre>

<p>see also the <a href=""http://code.google.com/p/android-scripting/wiki/AndroidFacadeAPI"" rel=""nofollow"">API Overview</a></p>
","android"
"422",13704350,"<pre><code>import Image
im = Image.load(""image.png"")
diff_colors = list(set(im.getdata()))
if len(diff_colors) == 1 and diff_colors[0] == (0, 0, 0):
    print ""all black""
</code></pre>

<p><strong>EDIT</strong> as @JonClements proposes, this will be faster and stop as soon as anything else than black is found:</p>

<pre><code>import Image
im = Image.load(""image.png"")
if all(rgb == (0,0,0) for rgb in im.getdata()):
    print ""all black""
</code></pre>
","android"
"423",7433433,"<p>It appears you cannot directly initialize a <code>MonkeyDevice</code> instance without a call to a factory function <code>waitForConnection</code>. So instead you need to assign <code>self</code> in your <code>__new__()</code> function so that <code>MonkeyDevice</code> recognizes the instance as inheriting from <code>IMonkeyDevice</code> before you call it's <code>__init__</code></p>

<p>Example:</p>

<pre><code>class TestDevice(MonkeyDevice):
    def __new__(self, serial=None):
        return MonkeyRunner.waitForConnection(deviceId=serial) 
    def __init__(self):
        MonkeyDevice.__init__(self)
</code></pre>
","android"
"424",28929758,"<p>Actually I found the answer and I found it necessary to share it at here since I could not find any possible duplicate in the same or similiar context.</p>

<p>Create a "".wgetrc"" file in your home folder and open it with a text editor. Edit and save:</p>

<pre><code>check_certificate = off
</code></pre>

<p>And wget will not check for any SSL certificate. But I don't know if it's a safe way to do this.</p>
","android"
"425",17116718,"<p>need to know the ip address of your machine .. 
Make sure both of your machines (tablet and computer) connected to same network</p>

<p>192.168.0.22 - say your machine address</p>

<p>do this :</p>

<p>192.168.0.22:8000   -- from your tablet</p>

<p>this is it !!!</p>
","android"
"426",36036225,"<p>I had the same problem, it appears that the example code will not work as the multiprocessing library starts a new process and that can't access the serial object created by the main process.</p>

<p>To fix it:</p>

<p>In the <code>serialworker.py</code> file, move the line <code>self.sp = serial.Serial(SERIAL_PORT, SERIAL_BAUDRATE)</code> from the <code>__init__</code> function to the first line of the <code>run</code> function.</p>
","android"
"427",10514851,"<p>The package name of your code must match the one you gave when you signed up for the c2dm account. For Java, if you gave com.myapp when you signed up, your c2dm calls must occur within that package. Not sure how this translates to Python, though.</p>
","android"
"428",18353203,"<p>Is it easy, no.</p>

<p>Can it be done? Yes. I believe a skilled Python / Android developer could do it in 2 to 8 hours of effort..  It's a rare and complex request.</p>

<p>Why do I think it can be done? This sample: <a href=""http://matplotlib.org/examples/pylab_examples/webapp_demo.html"" rel=""nofollow"">http://matplotlib.org/examples/pylab_examples/webapp_demo.html</a></p>

<p>Using a different library, and not abstracted for data without live hardware, this sample shows me that SL4A can do web-based graphics:
<a href=""http://www.smartphonedaq.com/android-python-ecg.page"" rel=""nofollow"">http://www.smartphonedaq.com/android-python-ecg.page</a></p>

<p>Now, if you were talking native GUI graphics in Android - then I'm focused way too much on the web methods of publishing with SL4A ;)</p>
","android"
"429",37481778,"<p>If we go step by step,your first problem is to locate the apk file.That gets created inside bin directory of the app folder if you run this command</p>

<pre><code>buildozer android debug
</code></pre>

<p>you can then copy the apk file in your android phone and manually install it by setting the option to install 3rd party app from settings.
If you want to do it automatically enable the developer mode in your android device or use an emulator and connect the device to your laptop/pc with usb and run following command after setting the log level as 2 from buildozer.spec</p>

<pre><code>buildozer -v android debug deply run
</code></pre>

<p>If you also want to see why it is crashing inside android run following command
and inspect the log.txt file created using following command</p>

<pre><code>buildozer -v android debug deply run logcat &gt; log.txt
</code></pre>

<p>or </p>

<pre><code>adb logcat &gt; log.txt
</code></pre>
","android"
"430",25447792,"<p>Run <code>buildozer --verbose android debug</code> and paste the full output. Though at a guess, this is because you lack 32 bit libraries. If so, you need something like</p>

<pre><code>sudo dpkg --add-architecture i386
sudo apt-get -qqy update
sudo apt-get -qqy install libncurses5:i386 libstdc++6:i386 zlib1g:i386
</code></pre>

<p>If this doesn't work, you should look for the right way to install these packages in your version of ubuntu, I don't remember what version this example is for.</p>
","android"
"431",28606662,"<p>Open the folder in which your file is residing in <code>ESFile Manager</code>. There is a option called <em>COPY FULL PATH</em> In <em>PROPERTIES</em>. Copy that and paste it in your code as filename.</p>

<p>It worked for me.</p>
","android"
"432",35492428,"<p>From what I gather you are try to run your tests concurrently, right?</p>

<p>If so, I haven't seen anything about threads in your post, and without threads your test will run serially.</p>

<p>The Selenium Grid doesn't round-robin connections for the same kind of resource. It simply allocates the first available machine. I.E. if test 'A' requests a specific browser/platform/device config, and runs to completion, then if test 'B' comes along and asks for the same config, it'll get the same machine that test A got. Make sense?</p>

<p>If you want to parallelize your tests, I would recommend checking out <a href=""http://pytest.org/latest/"" rel=""nofollow"">pytest</a> &amp; the <a href=""https://pypi.python.org/pypi/pytest-xdist"" rel=""nofollow"">xdist</a> plugin. This will handle all the threading/multiprocess stuff for you.</p>

<p>Fun fact, even if you wrote everything to use unittest, you don't have to rewrite everything to use pytest; just point pytest at your existing code.</p>
","android"
"433",30101505,"<p>HTTP StatusCode 401 means, that your API Key is not valid. This is a curl example to check if your API Key is valid.</p>

<pre><code># api_key=YOUR_API_KEY

# curl --header ""Authorization: key=$api_key"" \
       --header Content-Type:""application/json"" \
       https://android.googleapis.com/gcm/send \
       -d ""{\""registration_ids\"":[\""ABC\""]}""
</code></pre>

<p>See <a href=""http://developer.android.com/google/gcm/http.html"" rel=""nofollow"">http://developer.android.com/google/gcm/http.html</a></p>
","android"
"434",25795739,"<p>The screenshot is saved to the path you specify, in this case just a filename in the current directory, which is probably somewhere in <code>/data/data</code> and won't be accessible to other applications unless you have root access. You can check what the directory is within your script, probably with <code>os.getcwd()</code>.</p>

<p>You can probably just pass the external storage filepath you want to save to as the argument for <code>screenshot</code>. In general, you could query the android api with pyjnius to get the filepath android recommends your application should use.</p>
","android"
"435",29072588,"<p>Probably you are running an updated version of cython, all major release start form 0.21 and up, you have to downgrade cython to 0.20 ( sudo pip install cython==0.20 ) then removing .buildozer folder ( rm -Rf .buildozer ) and then rebuilding with 'buildozer android debug'</p>
","android"
"436",11120130,"<p>It's not possible. You can't use jython with android because the DVM doesn't understand it. DVM is not JVM.</p>
","android"
"437",6741863,"<p>If its a physical device then I do not know of a way to change the screen mode without actually physically putting the device on its side.</p>
","android"
"438",23963237,"<p>Diego is wrong in his root cause analysis. The new shell connection is not that expensive. What takes the most time is starting a new java process - since <code>device.type()</code> is executing <code>adb shell input text</code> and <code>input</code> is a console java app. </p>

<p>Monkeyrunner is faster because its device side java process starts only once. So unfortunately the persistent shell connection is not going to help you that much.</p>

<p>Also I have tried switching java runtime from <code>Dalvik</code>to <code>ART</code> hoping that it would help with java app start up times. It did cut it down about 20% (from 0.82s to 0.65s on the unit I tried it on).</p>
","android"
"439",18478492,"<p>I've found this very useful (and recent):</p>

<p><strong>Embedding Python in Android (Tutorial series)</strong></p>

<p><a href=""http://techventura.wordpress.com/2014/04/21/embedding-python-in-android-series/"">http://techventura.wordpress.com/2014/04/21/embedding-python-in-android-series/</a></p>

<p>It describes how to embed Python in an Android app, using the Kivy-related Python-for-Android, but not Kivy itself (which isn't really described in Kivy's nor Python-for-Android's documentation, as far as I found), which is useful in various scenarios (e.g. existing Java app, using native GUI directly, etc.)</p>

<p>Since Kivy's Python-for-Android is more actively developed than SL4A(ASE)'s Py4A, it seems to me the way to go.</p>

<p>(I think it would be very relevant also, and probably more appropriate, to <a href=""http://stackoverflow.com/questions/101754/is-there-any-way-to-run-python-on-android"">Is there any way to run Python on Android?</a>, but to answer requires more reputation than I currently have.)</p>

<p>To the point of the original question: the most relevant difference I see between Kivy's Python-for-Android and SL4A(ASE)'s Py4A is that the latter is still today offered as ""alpha quality"", while the former seems to be far more active.
Of course if you take Kivy as a whole, it's a cross-platform GUI library.</p>

<p>Also, the results of my research on the various solutions:</p>

<ul>
<li><strong>Google's Py4A + SL4A(ASE)</strong> : used but alpha quality, not actively developed</li>
<li><strong>Kivy</strong>:
<ul>
<li>offers Python-for-Android, to call python code from Java</li>
<li>offers Pyjnius, to call Java code from python</li>
<li>seems to be actively developed</li>
<li>there's the tutorial I linked above to embed into Java Android app</li>
<li>if interested, the cross-platform GUI (Kivy itself)</li>
</ul></li>
<li><strong>QPython</strong>:
<ul>
<li>primarily an interactive environment to launch python scripts on Android</li>
<li>based on Py4A, but Pyjnius (see above) is said to be usable</li>
<li>embedding into a Java app is available, but somewhat limited: a Python job must be started with an Intent, and results are gathered from the stdout; that means more separation that could be desirable in some scenarios, I think.</li>
</ul></li>
<li><strong>python.org</strong>: no mention at all of Android</li>
</ul>
","android"
"440",18987255,"<p>this problem is causing by PATH. adb path should put the end of the other path.</p>

<p>for example:</p>

<blockquote>
  <p>$ sudo gedit /etc/environment;</p>
  
  <p>PATH=""...:~/softAddr/adt-bundle-linux-x86_64-20140624/sdk/platform-tools:~/softAddr/adt-bundle-linux-x86_64-20140624/sdk/tools""</p>
</blockquote>

<p>not:</p>

<blockquote>
  <p>PATH=""~/softAddr/adt-bundle-linux-x86_64-20140624/sdk/platform-tools:~/softAddr/adt-bundle-linux-x86_64-20140624/sdk/tools:...""</p>
</blockquote>
","android"
"441",21511956,"<p>Try running it as sudo. That worked for me.</p>
","android"
"442",28606662,"<p>Open the folder in which your file is residing in <code>ESFile Manager</code>. There is a option called <em>COPY FULL PATH</em> In <em>PROPERTIES</em>. Copy that and paste it in your code as filename.</p>

<p>It worked for me.</p>
","android"
"443",35021043,"<p>I'm assuming you have the <code>adb</code> commands for <code>input tap X Y</code> covered already.</p>

<p>I would recommend pulling a <code>screencap</code> 1 second before and after the <code>input tap</code> and compare the screenshots to see if the screen changed. The code for screencap will look like this:</p>

<pre><code>adb shell screencap -p /sdcard/screen.png
adb pull /sdcard/screen.png
adb shell rm /sdcard/screen.png
</code></pre>

<p>There are several ways to go about comparing the images. Since you're using Python you can easily compare pixels inside the image, but another method that I would use is compare the exact file size of the two images, a .jpg screenshot of the same screen will have the exact same file size, unless the clock in the upper right hand corner updated or other notifications rolled in. If there is a major size difference between screenshots of the two windows, you can use a simple greater-than/less-than if statement to determine.</p>

<p>Hope this helps,</p>
","android"
"444",31730055,"<p>The rotation seems to only work using the ScatterLayout, as this is part of the functionalities this layout brings. In order to only rotate, but to disable user interaction (drag, zoom, rotation, etc), one can simply disable them by setting something like:</p>

<pre><code>ScatterLayout(do_scale=False, do_translation_x=False, do_translation_y=False, do_rotation=False)
</code></pre>
","android"
"445",25782392,"<p>You can try your script in command line first.</p>
","android"
"446",35691169,"<p>1) To convert your Django app from development to production, you open your settings.py file and look for the variable <code>DEBUG</code>. Set its value to <code>FALSE</code>. Now Django won't give debugging tips if some error occurs and hence its safe for production now.</p>

<p>2) Use Git. One of it's purpose is to keep adding only the new things as we upgrade our app without having to upload the whole app every time. It's very convenient.</p>

<p>3) Read <a href=""http://stackoverflow.com/a/6919386/4440874"">this</a> to understand which database you need.</p>
","android"
"447",19838474,"<p>You can use <a href=""http://github.com/pyjnius"" rel=""nofollow"">pyjnius</a> from within your kivy/non-kivy  app. Here is a session using <a href=""http://github.com/kivy/kivy-remote-shell"" rel=""nofollow"">kivy-remote-shell</a> for testing purposes.</p>

<pre><code>&gt;&gt;&gt; from jnius import autoclass, cast

&gt;&gt;&gt; PythonActivity = autoclass('org.renpy.android.PythonActivity')
&gt;&gt;&gt; Intent = autoclass('android.content.Intent') 
&gt;&gt;&gt; context = cast('android.content.Context', PythonActivity.mActivity)
&gt;&gt;&gt;
&gt;&gt;&gt; intent = Intent() 
&gt;&gt;&gt; intent.setAction(Intent.ACTION_MAIN)
&gt;&gt;&gt; intent.addCategory(Intent.CATEGORY_LAUNCHER)
&gt;&gt;&gt; lst = context.getPackageManager().queryIntentActivities(intent, 0).toArray()
&gt;&gt;&gt; print lst

[&lt;android.content.pm.ResolveInfo at 0x52454f60 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1da00696 at 0x4f75f7b0&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x525542d0 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d800686 at 0x4f75f700&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x525541e0 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d800682 at 0x4f75f720&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554240 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d80067e at 0x4f75f730&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554300 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d80067a at 0x4f75f740&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554330 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d800676 at 0x4f75f750&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554360 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x20400672 at 0x4f75f760&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554390 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d70066e at 0x4f75f3f0&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x525543c0 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d70066a at 0x4f75f780&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x525543f0 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d700666 at 0x4f75f7a0&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554420 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d700662 at 0x4f75f340&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554450 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d70065e at 0x4f75f880&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554480 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d70065a at 0x4f75f870&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x525544b0 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d700656 at 0x4f75f890&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x525544e0 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d700652 at 0x4f75f8a0&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554510 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d70064e at 0x4f75f8b0&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554540 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d70064a at 0x4f75f8c0&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554570 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d700646 at 0x4f75f8d0&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x525545a0 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d700642 at 0x4f75f8e0&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x525545d0 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d70063e at 0x4f75f8f0&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554600 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d70063a at 0x4f75f900&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554630 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d700636 at 0x4f75f910&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554660 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d700632 at 0x4f75f920&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554690 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d70062e at 0x4f75f930&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x525546c0 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d70062a at 0x4f75f940&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x525546f0 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d700626 at 0x4f75f950&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554720 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d700622 at 0x4f75f960&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554750 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d70061e at 0x4f75f970&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554780 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d70061a at 0x4f75f980&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x525547b0 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d700616 at 0x4f75f990&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x525547e0 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d700612 at 0x4f75f9a0&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554810 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d70060e at 0x4f75f9b0&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554840 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x2be0060a at 0x4f75f9c0&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554870 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x22b00606 at 0x4f75f9d0&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x525548a0 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1da00602 at 0x4f75f9e0&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x525548d0 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d8005fe at 0x4f75f9f0&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554900 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d8005fa at 0x4f75fa00&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554930 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d7005f6 at 0x4f75fa10&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554960 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d7005f2 at 0x4f75f5d0&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554990 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d7005ee at 0x4f75fa40&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x525549c0 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d7005ea at 0x4f75fa50&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x525549f0 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d7005e6 at 0x4f75fa60&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554a20 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d7005e2 at 0x4f75fa70&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554a50 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1f8005de at 0x4f75fa80&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554a80 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d6005da at 0x4f75fa90&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554ab0 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d6005d6 at 0x4f75faa0&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554ae0 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d6005d2 at 0x4f75fab0&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554b10 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d6005ce at 0x4f75fac0&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554b40 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d6005ca at 0x4f75fad0&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554b70 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d6005c6 at 0x4f75fae0&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554ba0 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d6005c2 at 0x4f75faf0&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554bd0 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d6005be at 0x4f75fb00&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554c00 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d6005ba at 0x4f75fb10&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554c30 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d6005b6 at 0x4f75fb20&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554c60 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d6005b2 at 0x4f75fb30&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554c90 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d5005ae at 0x4f75fb40&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554cc0 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d5005aa at 0x4f75fb50&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554cf0 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d5005a6 at 0x4f75fb60&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554d20 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d5005a2 at 0x4f75fb70&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554d50 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d50059e at 0x4f75fb80&gt;&gt;, &lt;android.content.pm.ResolveInfo at 0x52554d80 jclass=android/content/pm/ResolveInfo jself=&lt;LocalRef obj=0x1d50059a at 0x4f75fb90&gt;&gt;]
</code></pre>
","android"
"448",35433696,"<p>You're not posting JSON, you're passing two parameters in the query string.  Those are accessed with <code>request.args</code>.</p>

<pre><code>distance = request.args['distance']
</code></pre>
","android"
"449",28123737,"<p>I had been dealing with a build.xml error which is the main root of your cause for a while and i followed the steps in this tutorial im linking and it seemed to fix the problem. If when you finish the steps you still get a error, run in cmd android installsdk again then try to build your program.</p>

<p><a href=""https://sites.google.com/site/dustinprinehart/current-projects/float-i-pop/proof-of-concept"" rel=""nofollow"">https://sites.google.com/site/dustinprinehart/current-projects/float-i-pop/proof-of-concept</a></p>
","android"
"450",29055634,"<p>Remember that the .ab file format has a (UTF-8 text) header on it that can be variable length, with standard CRLF pairs for end-of-line.  It isn't always 24 bytes.  The last line of the header is always empty and the binary archive data starts right after.  This means you should scan from the start of the archive file until you find a CRLFCRLF sequence, then the archive data per se begins with the next byte thereafter.</p>

<p>If you actually parse the header, it says whether the data is compressed [it's technically optional] and what the encryption parameters are if any, and so on.</p>

<p>The archive format itself in a .ab file is essentially <strong>tar</strong> with modern <strong>ustar</strong>/<strong>pax</strong> extensions, though with metadata-encoded file naming rather than strictly physical paths, etc.  In particular there will often be <strong>pax</strong> extended header blocks, not just old-style <strong>tar</strong> file headers, in order to support large files or long filenames.  If you're trying to create .ab files there are also some ordering requirements between manifest metadata files for each app's data and the files themselves, but lexical ordering should take care of that for you.  Be sure to look at the archive construction code in Android's BackupManagerService.java file for reference.</p>
","android"
"451",11612169,"<p>I would suggest parsing it using an XML parser rather than plain text. </p>

<p><a href=""http://docs.python.org/library/xml.dom.minidom.html"" rel=""nofollow"">Here's some excellent documentation on minidom</a>. </p>
","android"
"452",20320125,"<p>I assume this is caused by a wrong window size.
You should look into pygame.display.Info (<a href=""http://www.pygame.org/docs/ref/display.html#pygame.display.Info"" rel=""nofollow"">http://www.pygame.org/docs/ref/display.html#pygame.display.Info</a>) to get the screen resolution.</p>

<p>See this for more details: <a href=""http://pygame.renpy.org/forum/viewtopic.php?f=4&amp;t=92#p265"" rel=""nofollow"">http://pygame.renpy.org/forum/viewtopic.php?f=4&amp;t=92#p265</a></p>

<p>You obviously have to consider this when blitting, as rather than the PyGame window being stretched to fit a larger screen, the PyGame window itself is being made larger.</p>
","android"
"453",33456804,"<p>Is there a specific reason you are trying to do this using JSON?  You can't just stuff binary data into a JSON string.</p>

<p>If you can avoid using JSON, then just POST the binary data over HTTP using a multipart/form-data request.</p>

<p>If for some reason you are stuck on using JSON, you can use base64 encoding to achieve this.  In your Android app, you need to base64 encode the binary data.  This will result in a string.  You can then send this string in your JSON to the server.  On the server side, you will then need to get this base64 encoded string from the JSON, base64 decode, and then save it to file (or whatever you want to do with the binary data).  Here's some small examples.</p>

<p>client side:</p>

<pre><code>int read;
byte[] buff = new byte[1024];
while ((read = in.read(buff)) &gt; 0) {
    out.write(buff, 0, read);
}
out.flush();
byte[] fileAudioByte = out.toByteArray();

String encodedString = Base64.encodeToString(fileAudioByte, Base64.DEFAULT);
</code></pre>

<p><code>encodedString</code> is a <code>String</code> that you will then add to your JSON to send to the server.</p>

<p>server side:</p>

<pre><code>import base64
...
audiofile_string = data['FileAudio']
audiofile_byte= base64.b64decode(audiofile_string)
# audiofile_byte now contains the bytes of the audio file, proceed to write to disk
</code></pre>
","android"
"454",10058391,"<p>Have a look at the <a href=""http://code.google.com/p/pybluez/source/browse/trunk/examples/simple/rfcomm-client.py"" rel=""nofollow"">pybluez documentation(source code) for establishing client connections</a>. </p>

<p>You can get the correct port for the supplied Bluetooth address and UUID using <strong>find_service</strong>.
Then connect your socket just as you do in your code, replacing hardcoded port value with the correct one.</p>

<p>Don't forget to vote up!</p>
","android"
"455",7433433,"<p>It seems you are trying to extend a <code>MonkeyDevice</code> instance returned by factory call <code>waitForConnection</code>.</p>

<p>When you try to substitute <code>self</code> inside the construtor you get an error (?).
I suspect you are running Jython, as CPython would not complain here, instead a local variable <code>self</code> is created and its value lost.</p>

<p>Anyway to achieve what you want you should create a class with custom <code>__new__</code> rather than <code>__init__</code>, get your <code>MonkeyDevice</code> instance from the factory and inject your stuff into the instance or it's class/bases/etc.</p>

<p>Alternatively you could wrap <code>MonkeyDevice</code> into another class and pass monkey-ish calls and member access though <code>__getattr__</code> and <code>__setattr__</code>.</p>
","android"
"456",38043274,"<p>Well, after looking for the answer in some forums I have achieved the correct way to fix the issue. In the <code>buildozer.spec</code>file I changed the sdk version to the last version avaible:</p>

<p><code># (int) Android SDK version to use 
android.sdk = 24</code></p>

<p>After that I executed buildozer and tried to download the version I've specified in the <code>.spec</code>file, and this time the creation of the apk file was well done. </p>
","android"
"457",28228978,"<p>Follow the guide on their site to a T .. <a href=""https://crosswalk-project.org/documentation/cordova/migrate_an_application.html#Migrate-using-command-line-tools"" rel=""nofollow"">Crosswalk Android Install</a></p>

<p>I found the procedure easy to follow and worked as expected, until i tried the WebRTC demo. It didn't work using the standard cordova build/run commands, so instead, I used commands found in their WebRTC demo.
<a href=""https://crosswalk-project.org/documentation/webrtc.html#How-video-calling-works-in-the-application"" rel=""nofollow"">Crosswalk Example Using Python Build Commands</a></p>

<pre><code>python make_apk.py --package=org.crosswalkproject.example \
--manifest=xwalk-webrtc/client/manifest.json
</code></pre>

<p>You'll need to grab the Android source files from their website (supports x86 and arm), and use it to generate your apk files.</p>

<p>There might be a better way to do this, but this should get you going</p>
","android"
"458",34445112,"<p>You can try <strong><a href=""https://github.com/dtmilano/AndroidViewClient"" rel=""nofollow"">AndroidViewClient/culebra</a></strong> and with barely no changes your script should work.</p>

<p>You can do as I did to test it, run</p>

<pre><code>$ culebra -uo myscript.py
</code></pre>

<p>Edit <code>myscript.py</code> to remove what's not needed (i.e. vc) and add your code at the end.</p>

<pre><code>#! /usr/bin/env python
# -*- coding: utf-8 -*-
'''
Copyright (C) 2013-2014  Diego Torres Milano
Created on 2015-12-24 by Culebra v11.0.9
                      __    __    __    __
                     /  \  /  \  /  \  /  \ 
____________________/  __\/  __\/  __\/  __\_____________________________
___________________/  /__/  /__/  /__/  /________________________________
                   | / \   / \   / \   / \   \___
                   |/   \_/   \_/   \_/   \    o \ 
                                           \_____/--&lt;
@author: Diego Torres Milano
@author: Jennifer E. Swofford (ascii art snake)
'''


import re
import sys
import os
import subprocess


try:
    sys.path.insert(0, os.path.join(os.environ['ANDROID_VIEW_CLIENT_HOME'], 'src'))
except:
    pass

from com.dtmilano.android.viewclient import ViewClient

TAG = 'CULEBRA'

_s = 5
_v = '--verbose' in sys.argv


kwargs1 = {'ignoreversioncheck': False, 'verbose': False, 'ignoresecuredevice': False}
device, serialno = ViewClient.connectToDeviceOrExit(**kwargs1)
kwargs2 = {'forceviewserveruse': False, 'useuiautomatorhelper': False, 'ignoreuiautomatorkilled': True, 'autodump': False, 'startviewserver': True, 'compresseddump': True}

proc = subprocess.Popen(['adb -e logcat'],shell=True, stdout=subprocess.PIPE)
i = 0
while 1:
    for line in proc.stdout:
        if line.find('Corona')!=-1:     
            print line
            device.press('KEYCODE_BACK')
</code></pre>

<p>However, I think you should start a new thread to read from logcat.</p>
","android"
"459",34475501,"<p>If you have this issue, it's possible that you screwed something up with your Buildozer installation. Try to use a VM Image: <a href=""https://kivy.org/docs/guide/packaging-android-vm.html"" rel=""nofollow"">https://kivy.org/docs/guide/packaging-android-vm.html</a></p>

<p>Than what I did, I removed the Buildozer cache with the following command: </p>

<pre><code>rm -rf ~/.buildozer/android/packages
</code></pre>

<p>And it worked :D </p>

<p><strong>Note:</strong> Change your log level to 2 or use</p>

<pre><code>buildozer -v android debug
</code></pre>

<p>to see more output.</p>
","android"
"460",11524586,"<p>I would redirect <code>adb logcat</code> to your python script. This would look like:</p>

<pre><code>$ adb logcat | python yourscript.py
</code></pre>

<p>Now you can read from logcat on <a href=""http://docs.python.org/library/sys.html#sys.stdin"" rel=""nofollow"">sys.stdin</a> and parse it however you like.</p>
","android"
"461",22472015,"<p>Taxellool had the right answer in the comments:</p>

<p>what you are trying to decode is already decoded. try this:</p>

<pre><code>urllib.unquote_plus(artist.encode('utf-8')).decode('utf-8')
</code></pre>
","android"
"462",34857184,"<p>Based on the <a href=""http://stackoverflow.com/questions/34857184/send-opencv-image-in-json-from-python-to-android/34857567#34857567"">answer of Avinash</a>, I managed to pack the image in a JSON object and then retrive it from the Android application. Since OpenCV provides a method for <code>Bitmap</code> to <code>Mat</code> conversion, sending the image instead of the <code>Mat</code> object si more handy.</p>

<p>Here the working code of the Python server:</p>

<pre><code>img_file = open(""image1.png"", ""r"")

# read the image file
data = img_file.read()        

# build JSON object
outjson = {}
outjson['img'] = data.encode('base64')   # data has to be encoded base64 and decode back in the Android app base64 as well
outjson['leaf'] = ""leaf""
json_data = json.dumps(outjson)

# close file pointer and send data
img_file.close()
self.request.sendall(json_data)
</code></pre>

<p>Here the working code of the Android app:</p>

<pre><code>// Read JSON from socket inputstream and rebuild the string
InputStream in = so.getInputStream();
if (in == null) return false;
BufferedReader br = new BufferedReader(new InputStreamReader(in));
sb = new StringBuilder();

String line;
while ((line = br.readLine()) != null) {
   sb.append(line);
}

...
// Convert string in JSON and retrieve raw data
JSONObject json = new JSONObject(sb.toString());
String leaf_name = json.getString(""leaf"");
String mat_string = json.getString(""img"");

// Convert raw byte data of image into Bitmap image
FileOutputStream byteBuffer = new FileOutputStream();

byte[] raw_data = Base64.decode(mat_string, Base64.DEFAULT);
Bitmap img = BitmapFactory.decodeByteArray(raw_data, 0, raw_data.length);
img.compress(Bitmap.CompressFormat.PNG, 100, byteBuffer);
</code></pre>

<p>Cheers!</p>
","android"
"463",4169771,"<p>I would use OSC, rather an midi.</p>

<p>""Open Sound Control (OSC) is a protocol for communication among computers, sound synthesizers, and other multimedia devices that is optimized for modern networking technology. Bringing the benefits of modern networking technology to the world of electronic musical instruments, OSC's advantages include interoperability, accuracy, flexibility, and enhanced organization and documentation.</p>

<p>This simple yet powerful protocol provides everything needed for real-time control of sound and other media processing while remaining flexible and easy to implement.""</p>

<p><a href=""http://opensoundcontrol.org/introduction-osc"" rel=""nofollow"">http://opensoundcontrol.org/introduction-osc</a></p>

<p>OSC will let you deliver your data over ethernet (at a much finer granularity than the ancient 3kb/s venerable snail that is MIDI). You could then convert to MIDI with one of various OSC-MIDI interfaces.</p>

<p><a href=""http://www.assembla.com/wiki/show/live-api"" rel=""nofollow"">http://www.assembla.com/wiki/show/live-api</a></p>

<p><a href=""http://monome.q3f.org/wiki/LiveOSC"" rel=""nofollow"">http://monome.q3f.org/wiki/LiveOSC</a></p>

<p>If you are very ambitious, you could use the unofficial Live Python API to control many aspects of LIVE itself. It's built for python, so you should feel at home. However, the project seems somewhat stale.</p>

<p>""FOR IMMEDIATE RELEASE:</p>

<p>CONTACT: LiveAPI.org Project</p>

<p>E-mail : press@liveapi.org</p>

<p>Website: <a href=""http://www.liveapi.org/"" rel=""nofollow"">http://www.liveapi.org/</a></p>

<p>LiveAPI.org Project Announces Third-Party Ableton Live API Python SDK</p>

<p>Santa Cruz, CA, USA, June 5th 2007 - LiveAPI.org is proud to announce the availability of the first SDK for Ableton Live's Python API.</p>

<p>LiveAPI.org is an independent open-source software development project with the aim of providing cutting-edge tools for manipulation of the Live Python API. Through reverse engineering and network programming techniques LiveAPI.org has created an SDK that will change the way you use of Ableton Live.</p>

<p>SDK components:</p>

<p>LiveOSC - A UDP network based Open Sound Control (OSC) interface that allows both sending and recieving of OSC messages through a Python callback system. Any task that can be performed with the Python API can be triggered as well as monitored. By Nathan Ramella and Rob King. Currently our updates are limited to 60ms intervals, but we hope to find ways to bring that number down. You won't be sending MIDI notes via OSC with a lot of success, but you can do so much more!</p>

<p>LiveTelnet - Telnet server access the Python CLI for exploration and programatical manipulation of the Live Python API. By Rob King</p>

<p>Ableton Live API Documentation - Full documentation on whats available in the Ableton Live Python API reprinted with permission from Ableton AG. Original extraction from runtime objects by James Andrew.</p>

<p>This announcement is to invite Ableton Live enthusiasts to visit LiveAPI.org, our source-code is free and released under the LGPL license, we have created a forum at <a href=""http://www.LiveAPI.org/forum"" rel=""nofollow"">http://www.LiveAPI.org/forum</a> for discussion of LiveAPI.org based projects, SDK techniques and bug reports.</p>

<p>About LiveAPI.org - LiveAPI.org is an open-source project formed May 2007. LiveAPI.org SDK is the creation of Nathan Ramella, Rob King and James Andrew. For additional information visit us at <a href=""http://www.LiveAPI.org"" rel=""nofollow"">http://www.LiveAPI.org</a>, direct press inquiries to to press@liveapi.org.""</p>

<p><a href=""http://forum.ableton.com/viewtopic.php?t=66118"" rel=""nofollow"">http://forum.ableton.com/viewtopic.php?t=66118</a></p>

<p>Good luck.</p>
","android"
"464",12281134,"<p>I couldn't reproduce your error while debugging your code in PyDev. However, I found a whole host of errors I had to fix because the code would even execute. After fixing them the code ran fine.</p>

<p>First, your error states that the ""handler"" in your <code>self.Bind(wx.EVT_TASKBAR_LEFT_DOWN, self.on_left_down)</code> call is <code>None</code>. In this case, it means <code>self.on_left_down</code> is <code>None</code>. However, we can see that there is a function <code>on_left_down(self, event)</code>, so that was my first hint that something was wrong with your code. The second hint was that the stack trace seemed to include that <code>Bind()</code> call as part of the line <code>self.SetIcon(self.off)</code>, which made no sense.</p>

<p>And that's when I noticed that your indentation was horrible. In languages like Java, everything between the <code>{}</code> is part of a function and thus indentation is just to make your code easier to read. In Python indentation <strong>much more important</strong>. It is how you denote something as being part of a function or not. How do you tell if a line of code is still part of a loop? You check the indentation. <code>__init__()</code>, <code>mount()</code>, and <code>unmount()</code> all contain lines that are indented too far left, thus are running even before <code>__init__()</code> has run, possibly leading to these <code>None</code> values.</p>

<p>Second, you must be using an old tutorial as <code>wx.PySimpleApp</code> is deprecated. I had to write my own simple <code>wx.App</code> before the code would execute (my entire <code>wx.App</code> was only 4 lines long including declarations. I'm sure you can find a simple example of how to do this yourself).</p>

<p>Finally, a plea: Please never ever <strong>ever</strong> blindly use code you found in a tutorial, especially if you aren't familiar in the language. You said you aren't a python programmer, so why did you choose wxPython? Do you know C? wxPython is based on wxWidgets, a GUI toolkit for C. Do you know Java? There are many GUI toolkits for Java. I'm sure you can find something that does what you need in a language you understand. By putting code that you do not understand into your application you are really just putting in a new piece that might fail and if it does then you have no way of fixing it.</p>

<p>I don't know you and I don't know your expertise so I'm giving you benefit of the doubt <em>this time</em> but I will need to see a lot more effort on your part next time or I won't post an answer.</p>

<p>Best of luck.</p>
","android"
"465",7154669,"<p>This is simple to get working, but isn't obvious or well documented.</p>

<p>First you want to get a hook to the <code>Android</code> object inside the webview. Then you can use it to register one or more callbacks. For a simple example, we'll just do one that pops an alert with a message from Python.</p>

<pre><code>    var droid = new Android();

    droid.registerCallback(""echo"", function(msg) {
        alert(msg.data)
    });
</code></pre>

<p>In this case, <code>echo</code> is the name of the event type you want this callback to handle. So this will handle 'echo events'. The event names are arbitrary strings, just call them whatever makes sense.</p>

<p>In the Python script that launched the webview, you can now post events to the registered handler whenever you like.</p>

<pre><code>droid.eventPost(""echo"", ""hello world"")
</code></pre>

<p>The second argument here is the message you want to pass to the JavaScript callback.</p>

<p>Note that although you pass the message back as a string, it arrives in the JavaScript function as an object. That object, we're calling it <code>msg</code> above, has an attribute called <code>data</code> which contains the string you passed from the Python side.</p>
","android"
"466",13444534,"<p>SL4A is a ridiculously excellent library/sdk/app for android and gives you a way to install a number of language/scripting runtimes and a thin veneer for accessing android functionality via the scripting frameworks.</p>

<p>It so happens that Python is an option, and I've used it with cherrypy (python framework) on Android.  I haven't tried it with flask or Django but with some work it should be possible.</p>

<p>The app provides a way to download python, install it, and then a way to launch a python console or even just run python scripts.</p>

<p><a href=""http://code.google.com/p/android-scripting/"" rel=""nofollow"">http://code.google.com/p/android-scripting/</a></p>

<p>There was a downside to the python support originally, due to a silly bug/limitation in the Android SDK.  This restricted the use of apk assets with _ underscore in the name.  The details are faint in my mind, but I am subscribed to the issue in Android so I can follow up with the details about this issue.  This would present a problem with many of the python frameworks, as underscores are part of python style.</p>
","android"
"467",31628667,"<pre><code>Check if virtualenv is present
Tool virtualenv is missing
</code></pre>

<p>Install virtualenv.</p>

<p>Edit: Since you edited your question:</p>

<pre><code>No matching distribution found for nmap (from -r requirements.txt (line 1))
</code></pre>

<p>There is no module named nmap on pypi (and therefore installable with pip). If your module isn't installable this way, you can't just put it in the requirements line. If this is the case, copy the module to your app dir and it will be included with the app.</p>
","android"
"468",24467526,"<p>I build successfully on MaC OS X Yosemite. The problem was SDK. </p>

<ol>
<li>Then i followed the instruction to <a href=""https://developer.android.com/sdk/index.html"" rel=""nofollow"">install full  SDK including Eclipse</a></li>
<li>Then launch eclipse and follow the instruction to install the <a href=""https://developer.android.com/sdk/installing/adding-packages.html"" rel=""nofollow"">SDK packages</a></li>
<li>In your buildozer.spec file, uncomment the line <code>android.sdk_path =</code> and add the path to the sdk folder from your install. </li>
</ol>

<p>With those steps, I can build and deploy to my Sony Xperia Z1 device.</p>
","android"
"469",23778474,"<p>I understand you install it using</p>

<pre><code>$ sudo easy_install --upgrade androidviewclient
</code></pre>

<p>Then, you should do</p>

<pre><code>$ export ANDROID_HOME=/Users/Flo/Documents/adt-bundle-mac-x86_64-20130729/sdk/
</code></pre>

<p>add it to <code>~/.bash_profile</code> if you want it to be persistent.</p>

<p>Then you should be able to execute <code>dump</code> without problems.
The tools are trying to find <code>adb</code> at some know locations or at <code>$ANDROID_HOME/platform-tools/adb</code>. Check to be sure that <code>adb</code> is there and is executable.</p>
","android"
"470",8768593,"<p>You need to implement the server-side authentication flow: <a href=""http://developers.facebook.com/docs/authentication/"" rel=""nofollow"">http://developers.facebook.com/docs/authentication/</a></p>

<p>I implemented it in Java: see the <a href=""http://www.lean-engine.com"" rel=""nofollow"">LeanEngine</a> oss project. You could probably reuse the android client part: the <a href=""https://github.com/leanengine/LeanEngine-Android/blob/master/lean-android-lib/src/main/java/com/leanengine/LoginDialog.java"" rel=""nofollow"">login dialog</a>.</p>
","android"
"471",29909600,"<p>readLine read IO need data end with \r\n , bluetooth send data need to add end tag with \r\n</p>
","android"
"472",33511359,"<p>You can develop qpython project as other python projects with your pc or MC, and upload the project into your mobile's /sdcard/com.hipipal.qpyplus/projects/ then run it in qpython.</p>

<p>The qpython project should contain the main.py which is used for the project first launch script.</p>

<p>Besides adb (android develop tool), you can use the qpython's FTP service ( You could find it in setting page ) or other FTP app to upload the project into your mobile.</p>

<p>GOOD NEWS: In the newest qpython(1.2.2), it contains a qedit4web.py which allow you develop from browser and edit and run code from your mobile.</p>
","android"
"473",27947531,"<p>After testing on my device, it appears that QPython has blocked write permissions from the application. Here's a way of getting a version which allows for it*:</p>

<ol>
<li>Download SL4A, and install it. This is what launches the Python script.</li>
<li>Download PY4A, this is the Android version of Python. You can download both 2.x and 3.x from <a href=""https://code.google.com/p/python-for-android/downloads/list"" rel=""nofollow"">here</a>.</li>
<li>You'll need a text editor now. DroidEdit is my personal favourite, and you can launch a script straight from the app.</li>
<li>Then you can write in your code, save it, and run it!</li>
</ol>

<p>Of course, there's no real substitute for a real desktop, at least in my opinion, but this is (again, in my opinion) the best setup I've found so far. </p>

<p>*I don't know where the files are saved, but you can read and write from them, wherever the saved file's directory may be.</p>
","android"
"474",14752387,"<p>Execute? You don't execute modules, normally a module has an entry point for example</p>

<pre><code>import module
module.main()
</code></pre>
","android"
"475",30040938,"<pre><code>size= 4
X = np.array([np.zeros(size), np.ones(size)])
Y = X.copy().T
</code></pre>

<p>will get the output you want. But if you're using <code>meshgrid</code>, aren't you feeding functions that expect the format <code>meshgrid</code> produces? </p>
","android"
"476",30795758,"<p>I just wrote this code to give you a path. Do advancements as per your requirment :</p>

<p><strong>Xml:</strong></p>

<pre><code>&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent"" &gt;

    &lt;TextView
        android:id=""@+id/tv_email""
        android:layout_width=""match_parent""
        android:layout_height=""40dp""
        android:background=""@color/Black""
        android:text=""Email""
        android:textColor=""@color/White"" /&gt;

    &lt;TextView
        android:id=""@+id/tv_pass""
        android:layout_width=""match_parent""
        android:layout_height=""40dp""
        android:background=""@color/Black""
        android:layout_below=""@+id/tv_email""
        android:text=""Password""
        android:textColor=""@color/White"" /&gt;

    &lt;FrameLayout 
        android:id=""@+id/frame_for_email_error""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_alignParentRight=""true""
        android:layout_below=""@+id/tv_email""
        android:visibility=""gone""&gt;

        &lt;TextView
        android:id=""@+id/tv_pass""
        android:layout_width=""match_parent""
        android:layout_height=""40dp""
        android:background=""@color/Gray""
        android:text=""Field cannot be empty""
        android:textColor=""@color/Black"" /&gt;

    &lt;/FrameLayout&gt;

&lt;/RelativeLayout&gt;
</code></pre>

<p>And when your Email is !(email.length>0) do like this:</p>

<p><strong>Java code:</strong></p>

<pre><code>FrameLayout frame = (FrameLayout) findviewbyid(R.id.frame_for_email_error);

frame.setvisibility(View.Visible);
</code></pre>
","android"
"477",11612169,"<p>I would suggest parsing it using an XML parser rather than plain text. </p>

<p><a href=""http://docs.python.org/library/xml.dom.minidom.html"" rel=""nofollow"">Here's some excellent documentation on minidom</a>. </p>
","android"
"478",6009852,"<p>This is a common problem with layers of abstraction. The layer doesn't abstract a specific functionality, tool, or case you'd like to use. In this case, however, it appears that not all hope is lost. It appears that the android scripting api is an open-source project. Why not contribute a patch that would provide this ability to the project? </p>

<p>I may contribute such a patch at some point in the future, but if it's important to you, you could do the same before I do, and be on your way! </p>
","android"
"479",26712961,"<p>Haha I'm answering the question from myself :-) I hope my answer is right and it's useful for others</p>

<p>The ddms output is filtered by ""kivycatalog"". Today I restudied it and looked at the full ddms output, and found error: no module named pygment. I don't know why it's filtered out. (I'm not familiar with android development now, thanks for viewing!)</p>
","android"
"480",15862745,"<p>I know of Kivi (<a href=""http://kivy.org/"" rel=""nofollow"">http://kivy.org/</a>). Going this route may help you. </p>
","android"
"481",33323796,"<p>Yes it is possible to automate.I'm using Appium, so that i can use ANDROID 5.0.2 version also. </p>

<p>You need following things in your system</p>

<pre><code>•   Android SDK
•   Java Development Kit 1.8
•   APPIUM for windows
•   Eclipse with ‘APPIUM-Web driver’ framework configured
•   Android device (&gt; 4.2 version) and its respective device manager should be installed in your system
</code></pre>

<p>Im using that with java so i mentioned JDK</p>
","android"
"482",9688971,"<p>Yes, attributes can have namespaces. The best known example of attribute namespace is the namespace declaration itself:</p>

<pre><code>xmlns:someNamespace=""someUri""
</code></pre>

<p>The only advantage in using namespaces that I see, is that the same attribute name may be used more than once, when assigned separate namespaces, such as in</p>

<pre><code>&lt;x xmlns:n1=""http://www.w3.org"" 
   xmlns:n2=""http://www.my.org"" &gt;
  &lt;good n1:a=""1""  n2:a=""2"" /&gt;
&lt;/x&gt;
</code></pre>

<p>Not sure what one would need that for though...</p>

<p>Now for selecting namespaced attributes.
In XSLT/Xpath this is done in normal fashion, including the namespace of course; don't forget the @ character. Example for the above XML:</p>

<pre><code>&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;
&lt;xsl:stylesheet
    version=""1.0""
    xmlns:xsl=""http://www.w3.org/1999/XSL/Transform""
    xmlns:n1=""http://www.w3.org""
    xmlns:n2=""http://www.my.org""&gt;
    &lt;xsl:output method=""xml"" version=""1.0"" encoding=""UTF-8"" indent=""yes""/&gt;
    &lt;xsl:template match=""//good""&gt;
        &lt;root&gt;
            &lt;n1&gt;&lt;xsl:value-of select=""./@n1:a""/&gt;&lt;/n1&gt;
            &lt;n2&gt;&lt;xsl:value-of select=""./@n2:a""/&gt;&lt;/n2&gt;
        &lt;/root&gt;
    &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</code></pre>

<p>gives</p>

<pre><code>&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;
&lt;root xmlns:n1=""http://www.w3.org"" xmlns:n2=""http://www.my.org""&gt;
    &lt;n1&gt;1&lt;/n1&gt;
    &lt;n2&gt;2&lt;/n2&gt;
&lt;/root&gt;
</code></pre>
","android"
"483",37433212,"<blockquote>
  <p>Parse has provided <a href=""https://medium.com/google-cloud/deploying-parse-server-to-google-app-engine-6bc0b7451d50#.rxdprcf4g"" rel=""nofollow"">detailed information</a> regarding the migration
  process and how to move our app from their serviers to a seperately
  hosted mongoDB instance and cloud company. Parse suggests the
  migration be made in two steps:</p>
  
  <ul>
  <li>The database is migrated to a service like MongoLab or ObjectRocket.</li>
  <li>The server be migrated to a cloud hosting company like AWS, Google    App Engine, or Heroku.</li>
  </ul>
</blockquote>

<p>Parse has also put suggested deadlines in place: </p>

<blockquote>
  <p>they suggest that by April 28, 2016 the database be migrated and by
  July 28, 2016, the server be migrated properly.</p>
</blockquote>

<p>This will give you ample time to work out any bugs and ensure your app functions properly with no downtime!</p>

<p>A <code>Backend-as-a-Service</code> like <code>parse.com</code> coupled two aspects of what’s known as a backend into one: the <code>server</code> and <code>database</code>. The server, which manipulates the database, performs queries, fetches information, and other work-intensive tasks, interacts with the database. The two work hand-in-hand to form a backend. </p>

<blockquote>
  <p>With Parse going away, we must deal with the server and database
  seperately.</p>
</blockquote>

<p>Parse has already provided <a href=""https://parse.com/migration#database"" rel=""nofollow"">detailed info and easy migration tool</a> for database to Mongodb hosted on any cloud. </p>

<p>Also it is easy to setup the node based parse server on any cloud platform including Google App Engine:</p>

<p>The easiest way to get Parse server running on Google Cloud is to start with the <a href=""https://github.com/GoogleCloudPlatform/nodejs-docs-samples.git"" rel=""nofollow"">sample out on GitHub</a>.</p>

<p><a href=""http://i.stack.imgur.com/5VkqJ.png"" rel=""nofollow""><img src=""http://i.stack.imgur.com/5VkqJ.png"" alt=""enter image description here""></a></p>
","android"
"484",8030965,"<p>Switch RX-TX for the blueSMiRF when it shall talk with the arduino board.</p>

<p>If you are able to connect to the blueSMiRF through the PC it has RX-TX setup as the arduino-board.</p>

<p>PC to blueSMiRF setup:<br>
PC TX --> Arduino RX --> blueSMiRF RX<br>
PC RX &lt;-- Arduino TX &lt;-- blueSMiRF TX<br></p>

<p>Arduino to blueSMiRF setup:<br>
Arduino RX --> blueSMiRF <b>TX</b><br>
Arduino TX &lt;-- blueSMiRF <b>RX</b><br></p>
","android"
"485",29932547,"<p>To do this you need to call the relevant part of the android api using pyjnius (which lets you do so from python).</p>

<p>The easiest way for this particular task is to use <a href=""https://github.com/kivy/plyer"" rel=""nofollow"">plyer</a>, which abstracts platform specific apis to a pythonic interface. It already supports notifications, and you can check the source to see how it works.</p>
","android"
"486",31102475,"<p>I don't think that kv lang supports exceptions. Move your code to your Python class:</p>

<pre><code>from kivy.app import App
from kivy.uix.floatlayout import FloatLayout
from kivy.lang import Builder

Builder.load_string(""""""
&lt;Test&gt;:
    Button:
        text: ""...""
        on_press: root.react()
"""""")

class Test(FloatLayout):
    def react(self):
        try:
            print(""first action"")
            print(""second action"")
        except:
            print(""there was an error"")

class TabbedPanelApp(App):
    def build(self):
        return Test()

if __name__ == '__main__':
    TabbedPanelApp().run()
</code></pre>

<p>Simply printing several times is easy:</p>

<pre><code>Builder.load_string(""""""
&lt;Test&gt;:
    Button:
        text: ""...""
        on_press:
            print(""first action"")
            print(""second action"")            
"""""")
</code></pre>
","android"
"487",26966905,"<p>You can do it.</p>

<ol>
<li>Simply copy your working database file in assets.</li>
<li>Then once application runs, copy the database file through code bytes by bytes and discard some bytes while copying, you will get a corrupted database.</li>
</ol>

<p>You can try something else as well : </p>

<p>Just create a text file.  Then rename it to *.db file and try to open the file in android assuming its a database file. I hope you will get the same exception.</p>
","android"
"488",13704350,"<p>I am no expert in Python but I saw that there is a PNG module that you can use.
Load the PNG and export it to an RGB(A) array.</p>

<p>Checking if it is totally black should then be simple. Run through the array and make sure nothing differs from 0.</p>

<p>I think this should work.</p>

<p>Out of curiosity, why would you want to check if the image is black?</p>
","android"
"489",30990268,"<p>I think it is best to generate the data at the moment the request is made to your server. You can either extend your python script with socket functionality to listen on a certain port and then generate the data or have another service running which will call the python script and sends back it's result.</p>

<p>I prefer JSON over XML since it's in my opinion a cleaner syntax and easier to parse in the Android and iOS application. </p>

<p>--EDIT--</p>

<p>To create a python web service, you can use the web framework. I have to admit I have very little experience with python, but I believe <a href=""http://www.dreamsyssoft.com/python-scripting-tutorial/create-simple-rest-web-service-with-python.php"" rel=""nofollow"">this tutorial</a> will point you in the right direction.</p>

<p>To call your python script from for example a php file, you could do something like this:</p>

<pre><code>$storeTimes = system('python storescript.py myargs', $retval); 
</code></pre>

<p>You could then place the php file in your web directory and access it via HTTP. Make sure you output your data in JSON.</p>

<p>Note that above to options are by far not a complete RESTfull webservice. I do not know details about the scale of your application, but if you want to learn more you could read <a href=""http://www.ibm.com/developerworks/library/ws-restful/"" rel=""nofollow"">this explanation</a></p>
","android"
"490",8659663,"<p>I'd probably look at calculating some simple statistics over the image.  You really don't need opencv to do this properly.  I'd take into account average brightness, and variance over the image.</p>

<p>Here is a simple formula to do average brightness:</p>

<p><a href=""http://stackoverflow.com/questions/596216/formula-to-determine-brightness-of-rgb-color"">Formula to determine brightness of RGB color</a></p>

<p>That coupled with a range of min/max could tell you if you have a mostly black image.  Histogram might help here as well, but you might not need the full histogram.  And this can all be calculated in Java pretty easily on the phone.</p>

<p>If you wanted to get really fancy you could do the stats calculation, and tell the user it's not bright enough.  Then do a brightness adjustment to normalize the image for them.  It's a very simple process:</p>

<p><a href=""http://en.wikipedia.org/wiki/Normalization_(image_processing"" rel=""nofollow"">http://en.wikipedia.org/wiki/Normalization_(image_processing</a>)</p>

<p>Then run image stats on that, and see if it helped adjust the image enough for it to be allowed to upload it.</p>
","android"
"491",38155321,"<p><code>outs</code> is the stuff that the process prints to standard output.  As such, it will be a string, not an int.  Since they are different types, the comparison will always fail.</p>

<p>Perhaps your condition should be something like:</p>

<pre><code>if outs.strip() == '1':
    ...
</code></pre>
","android"
"492",21446351,"<p>From Python's documentation:</p>

<blockquote>
  <p>Changes to <code>sys.stdin</code>, etc. are not reflected in the environment of the
  executed command.</p>
</blockquote>

<p><code>os.system</code> has limitations. The <a href=""http://docs.python.org/2/library/subprocess.html#module-subprocess"" rel=""nofollow""><code>subprocess</code></a> module is preferable.</p>

<p>Try:</p>

<pre><code>import subprocess

cmd = ""android create avd -n avd1 -t android-19 -s QVGA -b x86""
subprocess.call(cmd.split())
</code></pre>
","android"
"493",20584889,"<p>this seems like a string format error.</p>

<p>i guess, code should be something like this ctype.WinDll('%1' % dllPath), but string not format as expected, so ctype treat '%1' like a dll path.</p>

<p>just guess.</p>
","android"
"494",20280526,"<p>There is also <a href=""http://ignifuga.org"" rel=""nofollow"">Ignifuga, but it's only for 2D games</a>.</p>

<p>I think you should go with javascript+HTML5 instead, <a href=""http://jswiki.org/game-engines.html"" rel=""nofollow"">there are so many libs for games dev</a>.</p>
","android"
"495",24945148,"<p>Let java send the extra character. It did in my case too. 
I used - </p>

<p>data2 = data.strip() </p>

<p>if data2 == ""(your desired data)""</p>

<p>//execution instructions</p>

<p>and so on.</p>
","android"
"496",6258935,"<p>TLS could be used to securely transmit data in a compatible way.</p>

<p><a href=""http://docs.python.org/dev/library/ssl.html#server-side-operation"" rel=""nofollow"">Python ssl server-side</a></p>

<p>If additionally you use http protocol for the communication then there are already high-level libraries that might hide all gory details from you; just provide client/server certificates and make appropriate requests. </p>

<p><a href=""http://stackoverflow.com/questions/995514/https-connection-android"">Https Connection Android</a></p>

<p>It might save you from reimplementing poorly many security features such as <a href=""http://vincent.bernat.im/en/blog/2011-ssl-perfect-forward-secrecy.html"" rel=""nofollow"">forward secrecy</a>.</p>
","android"
"497",28915195,"<p>Try to name your ScrollView so you can reference to it. For example if you called it 'scrollview' the code should look like this:</p>

<pre><code>def add_line(self):
    self.height += self.line_height
    scrollview.scroll_y=0
</code></pre>

<p>However you will see this is not working a 100% properly, the scroll_y attribute of ScrollView gives you the only control over scrolling. That's what the documentation says about it:</p>

<p>""Y scrolling value, between 0 and 1. If 0, the content’s bottom side will touch the bottom side of the ScrollView. If 1, the content’s top side will touch the top side.""</p>
","android"
"498",25537494,"<p>If I understand you correctly, you just want to get those buttons onto the white rectangle. That can be easily done by using <code>BoxLayout</code>, as you have mentioned. Just change this line</p>

<pre><code>class GraphToolBar(Widget):
</code></pre>

<p>to this line</p>

<pre><code>class GraphToolBar(BoxLayout):
</code></pre>
","android"
"499",25795739,"<p>The screenshot is saved to the path you specify, in this case just a filename in the current directory, which is probably somewhere in <code>/data/data</code> and won't be accessible to other applications unless you have root access. You can check what the directory is within your script, probably with <code>os.getcwd()</code>.</p>

<p>You can probably just pass the external storage filepath you want to save to as the argument for <code>screenshot</code>. In general, you could query the android api with pyjnius to get the filepath android recommends your application should use.</p>
","android"
"500",26559660,"<p>Okay, so I'm now answering my own question :D</p>

<p>The issue was with the <code>path</code> variable in the <code>URL string</code>.<br>
This is the format of one of the URL constructors based on this <a href=""http://developer.android.com/reference/java/net/URL.html"" rel=""nofollow"">document</a>.<br>
<code>URL(String protocol, String host, int port, String file)</code></p>

<p>Since I am posting the <strong>JSON</strong> to the <code>/user</code> path, that's the one I insert into the constructor as the <code>directory.</code><br>
So, my URL was formed like so:<br>
<code>URL url= new URL(""http"",cons.SERVER,cons.PORT,""/user/"");</code></p>

<p>My mistake in the beginning was using <code>/user</code> instead of <code>/user/</code>
but other than that, the <strong>URL structure and connections</strong> are all alright.</p>
","android"
"501",11463456,"<p>You'd better start with an <a href=""http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ExecutorService.html"" rel=""nofollow"">ExecutorService</a> instead of going directly with raw threads.
It provides pooling, completion detection, and there are subclasses which also have some scheduling. For instance:</p>

<pre><code>...
// Create a simple instance with a single thread in the pool
ExecutorService executor = Executors.newFixedThreadPool(1); 
...
Future&lt;Integer&gt; future = executor.submit(new Callable&lt;Integer&gt;() {
    @Override
    public Integer call() {
        return YourFunction();
    }
});
...

// To wait for YourFunction() to finish, and get the result:
Integer result = future.get();
</code></pre>

<p>You can submit as many asynchronous tasks to the ExecutorService as you like; they will be executed in parallel, or sequentially, depending on the implementation you choose, on the number of threads in the backing thread pool, etc.</p>
","java"
"502",13073957,"<p>Hope this little program helps to explain the exclusive-or operator better using the examples it prints:</p>

<pre><code>&gt;&gt;&gt; for x, y in ((x, y) for x in range(11) for y in range(x, 11)):
    print('''{0} ^ {1} = {2} (Why?)
Because:
{0:04b} = {0}
^^^^
{1:04b} = {1}
====
{2:04b} = {2}
'''.format(x, y, x ^ y))


0 ^ 0 = 0 (Why?)
Because:
0000 = 0
^^^^
0000 = 0
====
0000 = 0

0 ^ 1 = 1 (Why?)
Because:
0000 = 0
^^^^
0001 = 1
====
0001 = 1

0 ^ 2 = 2 (Why?)
Because:
0000 = 0
^^^^
0010 = 2
====
0010 = 2

0 ^ 3 = 3 (Why?)
Because:
0000 = 0
^^^^
0011 = 3
====
0011 = 3

0 ^ 4 = 4 (Why?)
Because:
0000 = 0
^^^^
0100 = 4
====
0100 = 4

0 ^ 5 = 5 (Why?)
Because:
0000 = 0
^^^^
0101 = 5
====
0101 = 5

0 ^ 6 = 6 (Why?)
Because:
0000 = 0
^^^^
0110 = 6
====
0110 = 6

0 ^ 7 = 7 (Why?)
Because:
0000 = 0
^^^^
0111 = 7
====
0111 = 7

0 ^ 8 = 8 (Why?)
Because:
0000 = 0
^^^^
1000 = 8
====
1000 = 8

0 ^ 9 = 9 (Why?)
Because:
0000 = 0
^^^^
1001 = 9
====
1001 = 9

0 ^ 10 = 10 (Why?)
Because:
0000 = 0
^^^^
1010 = 10
====
1010 = 10

1 ^ 1 = 0 (Why?)
Because:
0001 = 1
^^^^
0001 = 1
====
0000 = 0

1 ^ 2 = 3 (Why?)
Because:
0001 = 1
^^^^
0010 = 2
====
0011 = 3

1 ^ 3 = 2 (Why?)
Because:
0001 = 1
^^^^
0011 = 3
====
0010 = 2

1 ^ 4 = 5 (Why?)
Because:
0001 = 1
^^^^
0100 = 4
====
0101 = 5

1 ^ 5 = 4 (Why?)
Because:
0001 = 1
^^^^
0101 = 5
====
0100 = 4

1 ^ 6 = 7 (Why?)
Because:
0001 = 1
^^^^
0110 = 6
====
0111 = 7

1 ^ 7 = 6 (Why?)
Because:
0001 = 1
^^^^
0111 = 7
====
0110 = 6

1 ^ 8 = 9 (Why?)
Because:
0001 = 1
^^^^
1000 = 8
====
1001 = 9

1 ^ 9 = 8 (Why?)
Because:
0001 = 1
^^^^
1001 = 9
====
1000 = 8

1 ^ 10 = 11 (Why?)
Because:
0001 = 1
^^^^
1010 = 10
====
1011 = 11

2 ^ 2 = 0 (Why?)
Because:
0010 = 2
^^^^
0010 = 2
====
0000 = 0

2 ^ 3 = 1 (Why?)
Because:
0010 = 2
^^^^
0011 = 3
====
0001 = 1

2 ^ 4 = 6 (Why?)
Because:
0010 = 2
^^^^
0100 = 4
====
0110 = 6

2 ^ 5 = 7 (Why?)
Because:
0010 = 2
^^^^
0101 = 5
====
0111 = 7

2 ^ 6 = 4 (Why?)
Because:
0010 = 2
^^^^
0110 = 6
====
0100 = 4

2 ^ 7 = 5 (Why?)
Because:
0010 = 2
^^^^
0111 = 7
====
0101 = 5

2 ^ 8 = 10 (Why?)
Because:
0010 = 2
^^^^
1000 = 8
====
1010 = 10

2 ^ 9 = 11 (Why?)
Because:
0010 = 2
^^^^
1001 = 9
====
1011 = 11

2 ^ 10 = 8 (Why?)
Because:
0010 = 2
^^^^
1010 = 10
====
1000 = 8

3 ^ 3 = 0 (Why?)
Because:
0011 = 3
^^^^
0011 = 3
====
0000 = 0

3 ^ 4 = 7 (Why?)
Because:
0011 = 3
^^^^
0100 = 4
====
0111 = 7

3 ^ 5 = 6 (Why?)
Because:
0011 = 3
^^^^
0101 = 5
====
0110 = 6

3 ^ 6 = 5 (Why?)
Because:
0011 = 3
^^^^
0110 = 6
====
0101 = 5

3 ^ 7 = 4 (Why?)
Because:
0011 = 3
^^^^
0111 = 7
====
0100 = 4

3 ^ 8 = 11 (Why?)
Because:
0011 = 3
^^^^
1000 = 8
====
1011 = 11

3 ^ 9 = 10 (Why?)
Because:
0011 = 3
^^^^
1001 = 9
====
1010 = 10

3 ^ 10 = 9 (Why?)
Because:
0011 = 3
^^^^
1010 = 10
====
1001 = 9

4 ^ 4 = 0 (Why?)
Because:
0100 = 4
^^^^
0100 = 4
====
0000 = 0

4 ^ 5 = 1 (Why?)
Because:
0100 = 4
^^^^
0101 = 5
====
0001 = 1

4 ^ 6 = 2 (Why?)
Because:
0100 = 4
^^^^
0110 = 6
====
0010 = 2

4 ^ 7 = 3 (Why?)
Because:
0100 = 4
^^^^
0111 = 7
====
0011 = 3

4 ^ 8 = 12 (Why?)
Because:
0100 = 4
^^^^
1000 = 8
====
1100 = 12

4 ^ 9 = 13 (Why?)
Because:
0100 = 4
^^^^
1001 = 9
====
1101 = 13

4 ^ 10 = 14 (Why?)
Because:
0100 = 4
^^^^
1010 = 10
====
1110 = 14

5 ^ 5 = 0 (Why?)
Because:
0101 = 5
^^^^
0101 = 5
====
0000 = 0

5 ^ 6 = 3 (Why?)
Because:
0101 = 5
^^^^
0110 = 6
====
0011 = 3

5 ^ 7 = 2 (Why?)
Because:
0101 = 5
^^^^
0111 = 7
====
0010 = 2

5 ^ 8 = 13 (Why?)
Because:
0101 = 5
^^^^
1000 = 8
====
1101 = 13

5 ^ 9 = 12 (Why?)
Because:
0101 = 5
^^^^
1001 = 9
====
1100 = 12

5 ^ 10 = 15 (Why?)
Because:
0101 = 5
^^^^
1010 = 10
====
1111 = 15

6 ^ 6 = 0 (Why?)
Because:
0110 = 6
^^^^
0110 = 6
====
0000 = 0

6 ^ 7 = 1 (Why?)
Because:
0110 = 6
^^^^
0111 = 7
====
0001 = 1

6 ^ 8 = 14 (Why?)
Because:
0110 = 6
^^^^
1000 = 8
====
1110 = 14

6 ^ 9 = 15 (Why?)
Because:
0110 = 6
^^^^
1001 = 9
====
1111 = 15

6 ^ 10 = 12 (Why?)
Because:
0110 = 6
^^^^
1010 = 10
====
1100 = 12

7 ^ 7 = 0 (Why?)
Because:
0111 = 7
^^^^
0111 = 7
====
0000 = 0

7 ^ 8 = 15 (Why?)
Because:
0111 = 7
^^^^
1000 = 8
====
1111 = 15

7 ^ 9 = 14 (Why?)
Because:
0111 = 7
^^^^
1001 = 9
====
1110 = 14

7 ^ 10 = 13 (Why?)
Because:
0111 = 7
^^^^
1010 = 10
====
1101 = 13

8 ^ 8 = 0 (Why?)
Because:
1000 = 8
^^^^
1000 = 8
====
0000 = 0

8 ^ 9 = 1 (Why?)
Because:
1000 = 8
^^^^
1001 = 9
====
0001 = 1

8 ^ 10 = 2 (Why?)
Because:
1000 = 8
^^^^
1010 = 10
====
0010 = 2

9 ^ 9 = 0 (Why?)
Because:
1001 = 9
^^^^
1001 = 9
====
0000 = 0

9 ^ 10 = 3 (Why?)
Because:
1001 = 9
^^^^
1010 = 10
====
0011 = 3

10 ^ 10 = 0 (Why?)
Because:
1010 = 10
^^^^
1010 = 10
====
0000 = 0

&gt;&gt;&gt; 
</code></pre>
","java"
"503",30434305,"<p>The data-structure this question addresses is called <a href=""http://en.wikipedia.org/wiki/Interval_tree"" rel=""nofollow""><strong>Interval tree</strong></a> : </p>

<blockquote>
  <p>An ordered tree data structure to hold intervals,  it allows one to
  efficiently find all intervals that overlap with any given interval or
  point.</p>
</blockquote>

<p>Two effective approaches:</p>

<ul>
<li>using an <a href=""http://en.wikipedia.org/wiki/Interval_tree#Augmented_tree"" rel=""nofollow"">augmented tree </a></li>
<li>using a <a href=""http://en.wikipedia.org/wiki/Interval_tree#Medial-_or_length-oriented_tree"" rel=""nofollow""> Medial- or length-oriented tree</a></li>
</ul>

<p>The proposed algorithm in the link for searching for all overlapping intervals is expected to be faster than a traditional interval tree (augmented tree) for search operations, adding elements is a little slower.</p>

<p>Various approaches to implementing an interval tree:</p>

<ul>
<li>Standford has a <a href=""http://nlp.stanford.edu/nlp/javadoc/javanlp/edu/stanford/nlp/util/IntervalTree.html"" rel=""nofollow"">an implementation of IntervalTree </a> in a general purpose utility package edu.stanford.nlp.util with a lot of useful methods</li>
<li><a href=""http://algs4.cs.princeton.edu/93intersection/IntervalST.java.html"" rel=""nofollow"">Sample code for an interval tree where Given n closed intervals [ai, bi] it finds all pairs of intervals that overlap  - Algorithms, 4th Edition</a></li>
<li><a href=""http://www.sanfoundry.com/java-program-implement-interval-tree/"" rel=""nofollow"">Another interval tree implementation </a></li>
</ul>

<p>When implementing a solution you should know the <a href=""http://infotechgems.blogspot.ro/2011/11/java-collections-performance-time.html"" rel=""nofollow"">performance of java collections processing </a></p>
","java"
"504",2314399,"<p>Fossill,</p>

<p>I recommend that you do not bother to learn SOAP for this. Ws-* has a very high learning curve and the (unnecessary) complexity will likely eat you alive.</p>

<p>Looking at your skill set (Java, Perl, Python, C++) you should be very satisfied with a REST (or at least HTTP-based) approach. And: you'll get results very fast.</p>

<p>As S.Lott said, do not worry about the code generation. You'll not need it.</p>

<p>For questions, I suggest you join rest-discuss on Yahoo groups:
<a href=""http://tech.groups.yahoo.com/group/rest-discuss/"" rel=""nofollow"">http://tech.groups.yahoo.com/group/rest-discuss/</a>
You usually get immediate help with all things REST there.</p>

<p>Personally, I have yet to see any use case that could benefit from using WS-*.</p>

<p>Jan</p>
","java"
"505",13745168,"<p>If you're certain a real database engine running with a properly-normalized schema can't do the job (I'd test this, myself, database-engine guys have been thinking about how to solve puzzles like this for a while now), then try this:</p>

<p>Batch up enough records that the data for the smallest field for the collection occupies at least a large-ish handful of sectors.  Write the data for the fields in those records to separate contiguous chunks starting at 4KB boundaries, with a header at the front of each set saying where to find the chunk boundaries.  Then read only the chunks for the fields you want.</p>

<p>If you really need performance but you still have spinny things, place the chunks in separate files on separate disks.  Skipping's as slow as reading on those things until you're skipping really large chunks of data.</p>

<p>Edit: I see you don't want to change the on-disk format, but since you're trying to avoid reading unwanted data there really isn't a choice.</p>
","java"
"506",5616325,"<p>This call seems to be out of place</p>

<pre><code>setContentView(shell);
</code></pre>

<p>I'm assuming that R.id.shell is in your main XML, because otherwise you couldn't do this:</p>

<pre><code>setContentView(R.layout.main);
shell = (EditText) findViewById(R.id.shell);
</code></pre>

<p>If that is correct, there is no reason for the setContentView, as it is allready in the main you've just set.</p>
","java"
"507",30429786,"<p>I actually think graphs are the appropriate structure for this problem. Note that
A and (E or C) &lt;==> (A and E) or (A and C). Thus, we can represent X = A and (E or C) with the following set of directed edges: </p>

<pre><code>A &lt;- K1
E &lt;- K1
A &lt;- K2
C &lt;- K2
K1 &lt;- X
K2 &lt;- X
</code></pre>

<p>Essentially, we're just decomposing the logic of the statement and using ""dummy"" nodes to represent the ANDs. </p>

<p>Suppose we decompose all the logical statements in this fashion (dummy Ki nodes for ANDS and directed edges otherwise). Then, we can represent the input as a DAG and recursively traverse the DAG. I think the following recursive algorithm could solve the problem:</p>

<p>Definitions:<br/>
Node u - Current Node. <br/>
S - The visited set of nodes. <br/>
children(x) - Returns the out neighbors of x.</p>

<p>Algorithm:</p>

<pre><code>shortestPath u S = 
if (u has no children) {
    add u to S
    return 1
} else if (u is a dummy node) {
  (a,b) = children(u)
  if (a and b are in S) {
    return 0
  } else if (b is in S) { 
    x = shortestPath a S
    add a to S
    return x
  } else if (a in S) {
    y = shortestPath b S
    add b to S
    return y
  } else {
    x = shortestPath a S
    add a to S
    if (b in S) return x
    else {
        y = shortestPath b S
        add b to S
        return x + y
    }
  }
} else {
  min = Int.Max
  min_node = m
  for (x in children(u)){
    if (x is not in S) {
      S_1 = S
      k = shortestPath x S_1
      if (k &lt; min) min = k, min_node = x
    } else {
      min = 1
      min_node = x
    }
  }
  return 1 + min
}
</code></pre>

<p>Analysis: 
This is an entirely sequential algorithm that (I think) traverses each edge at most once. </p>
","java"
"508",15515298,"<p>The simple answer is to also read <code>Process.getErrorStream</code>.</p>

<p>The more complicated answer is that what you call Python likely refers to CPython which is just one implementation of the language. There is another implementation, Jython, which basically compiles Python into Java bytecode to be run on a JVM. This would allow tighter integration than simply invoking CPython via Java's <code>Runtime.exec</code></p>

<p>P.S. <code>Runtime.exec</code> is sort of the old way of doing things. <code>ProcessBuilder</code> is often a much cleaner and more intuitive way of starting a sub-process in Java.</p>
","java"
"509",4704558,"<p>There is some automated resource management in Python. Most objects who open resources will close them when they get garbage collected. When that happens is undefined, and it may not happen at all, so this only works if you don't use very many resources, don't care if they are open long and the resources will be closed by the operating system when the program exits.</p>

<p>Otherwise, use context managers and the with statement as per Matthews answer.</p>

<p>Here is a simple example that redirects stdout:</p>

<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; class redirect_stdout:
...     def __init__(self, target):
...         self.stdout = sys.stdout
...         self.target = target
...
...     def __enter__(self):
...         sys.stdout = self.target
...
...     def __exit__(self, type, value, tb):
...         sys.stdout = self.stdout
...
&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; out = StringIO()
&gt;&gt;&gt; with redirect_stdout(out):
...     print 'Test'
...
&gt;&gt;&gt; out.getvalue() == 'Test\n'
True
</code></pre>
","java"
"510",4652530,"<p>Why not ask at Wikipedia? There are various dumps available, including tools on the toolserver that may be of use. Your best bet is asking at <a href=""http://en.wikipedia.org/wiki/Wikipedia%3aVPT"" rel=""nofollow"">the technical pump</a>.</p>
","java"
"511",14508605,"<p><strong>Edit:</strong></p>

<p><strong>1. nested <code>for</code> loops corrected</strong></p>

<p><strong>2. <code>.java</code> files now fetched recursively</strong></p>

<p><strong>Note:</strong></p>

<blockquote>
  <p>When you are confident with the code, replace line 45: <code>open( hanw , ""+&gt;"".$file."".txt"" );</code></p>
  
  <p>with this line: <code>open( hanw , ""+&gt;"".$file );</code></p>
</blockquote>

<p><em><strong>application.pl</em></strong></p>

<pre><code>use strict;
use File::Find qw( finddepth );
our $root = ""src/"";
our $file_data = {};
our @java_files;

finddepth( sub {
  if( $_ eq '.' || $_ eq '..' ) {
    return;
  } else {
    if( /\.java$/i ) {
      push( @java_files , $File::Find::name );
    }
  }
} , $root );

sub clean {
  my $file = shift;
  open( hanr , $file );
  my @input_lines = &lt;hanr&gt;;
  my $inside_for = 0;

  foreach( @input_lines ) {
    if( $_ =~ /(\s){0,}for(\s){0,}\((.*)\)(\s){0,}\{(\s){0,}/ ) {
      $inside_for++;
      push( @{$file_data-&gt;{$file}} , $_ );
    } elsif( $inside_for &gt; 0 ) {
        if( $_ =~ /(\s){0,}System\.out\.println\(.*/ ) {
        } elsif( $_ =~ /(\s){0,}\}(\s){0,}/ ) {
          $inside_for--;
          push( @{$file_data-&gt;{$file}} , $_ );
        } else {
          push( @{$file_data-&gt;{$file}} , $_ );
        }
    } else {
      push( @{$file_data-&gt;{$file}} , $_ );
    }
  }
}

foreach ( @java_files ) {
  $file_data-&gt;{$_} = [];
  clean( $_ );
}

foreach my $file ( keys %$file_data ) {
  open( hanw , ""+&gt;"".$file."".txt"" );
  foreach( @{$file_data-&gt;{$file}} ) {
    print hanw $_;
  }
}
</code></pre>

<p><em><strong>data1.java</em></strong></p>

<pre><code>class Employee {
  /* code */
  public void Employee() {
    System.out.println(""string"");
    for( ... ) {
      System.out.println(""string"");
      /* code */
      System.out.println(""string"");
      for( ... ) {
        System.out.println(""string"");
        /* code */
        System.out.println(""string"");
      }
    }
  }
}

for( ... ) {
  System.out.println(""string"");
  /* code */
  System.out.println(""string"");
}
</code></pre>

<p><em><strong>data2.java</em></strong></p>

<pre><code>for( ... ) {
  /* code */
  System.out.println(""string"");
  /* code */
  System.out.println(""string"");
  /* code */
  for( ... ) {
    System.out.println(""string"");
    /* code */
    System.out.println(""string"");
    for( ... ) {
      System.out.println(""string"");
      /* code */
      System.out.println(""string"");
    }
  }
}

public void display() {
  /* code */
  System.out.println(""string"");
  for( ... ) {
    System.out.println(""string"");
    /* code */
    System.out.println(""string"");
    for( ... ) {
      System.out.println(""string"");
      /* code */
      System.out.println(""string"");
    }
  }
}
</code></pre>

<p><em><strong>data1.java.txt</em></strong></p>

<pre><code>class Employee {
  /* code */
  public void Employee() {
    System.out.println(""string"");
    for( ... ) {
      /* code */
      for( ... ) {
        /* code */
      }
    }
  }
}

for( ... ) {
  /* code */
}
</code></pre>

<p><em><strong>data2.java.txt</em></strong></p>

<pre><code>for( ... ) {
  /* code */
  /* code */
  /* code */
  for( ... ) {
    /* code */
    for( ... ) {
      /* code */
    }
  }
}

public void display() {
  /* code */
  System.out.println(""string"");
  for( ... ) {
    /* code */
    for( ... ) {
      /* code */
    }
  }
}
</code></pre>

<p><img src=""http://i.stack.imgur.com/VfYW4.png"" alt=""image-1""></p>
","java"
"512",10891434,"<p>Try that :</p>

<pre><code>    Collections.sort(files,new Comparator&lt;File&gt;()
    {
        Collator myCollator = Collator.getInstance();
        @Override
        public int compare(File o1, File o2)
        {
            return myCollator.compare(o1.getName(),o2.getName());
        }
    });
</code></pre>

<p>The difference was because Windows is case insensitive. If you look at the doc of the <a href=""http://docs.oracle.com/javase/6/docs/api/java/text/Collator.html"" rel=""nofollow"">Collator</a> it says : </p>

<blockquote>
  <p>The Collator class performs locale-sensitive String comparison.</p>
</blockquote>

<p>You just have to do a comparator with that. If your List is not a list of files but a list of strings it is even easier since the compartor already exists : <a href=""http://docs.oracle.com/javase/6/docs/api/java/lang/String.html#CASE_INSENSITIVE_ORDER"" rel=""nofollow"">http://docs.oracle.com/javase/6/docs/api/java/lang/String.html#CASE_INSENSITIVE_ORDER</a></p>
","java"
"513",34271776,"<p>I got the answer from bartdag from the issue at <a href=""https://github.com/bartdag/py4j/issues/180"" rel=""nofollow"">https://github.com/bartdag/py4j/issues/180</a>, he pointed out that specifying the GatewayParameter instance to the argument ""gateway_parameters"" it works. </p>

<pre><code># This produces the error 
gateway = JavaGateway(GatewayParameters(address='192.168.99.100', port=25333))
</code></pre>

<p>But adding the argument name makes it work:</p>

<pre><code># This solves it the error 
gateway = JavaGateway(gateway_parameters=GatewayParameters(address='192.168.99.100', port=25333))
</code></pre>
","java"
"514",16574339,"<p>Here is the documentation for <a href=""https://docs.jboss.org/jbpm/v6.1/userguide/jBPMRemoteAPI.html"" rel=""nofollow"">jBPM 6.1 Remote REST API</a>.</p>

<p>The REST docs for 6.1 states:</p>

<pre><code>[POST] /runtime/{deploymentId}/process/{processDefId}/start
</code></pre>

<p>According to the docs, it does the following:</p>

<ul>
<li>Starts a process.</li>
<li>Returns a <em>JaxbProcessInstanceResponse</em> instance, that contains basic information about the process instance.</li>
<li>The <em>prodessDefIdcomponent</em> of the URL must conform to the following regex: [_a-zA-Z0-9-:.]+
This operation takes <em>map query parameters</em> (see above), which will be used as parameters for the process instance.</li>
</ul>
","java"
"515",10805356,"<p>If your image is coming out with a color-cast (the pink tint), the photographer's approach to fixing it would be to adjust the white balance of the image.</p>

<p>There is a good discussion of implementing an automatic white balance correction algorithm here: <a href=""http://stackoverflow.com/questions/1175393/white-balance-algorithm"">White balance algorithm</a></p>

<p>As you have already generated a file containing your binary RGB values I'm assuming you are able to re-parse this into a data structure for further processing. Once you have your RGB pixels in a buffer you will want to convert them into their HSB (hue, saturation, brightness) equivalents as altering the color tint of an image is essentially a global operation on the hue of each pixel. The Java <a href=""http://docs.oracle.com/javase/6/docs/api/java/awt/Color.html"" rel=""nofollow"">Color</a> class contains methods for performing HSB&lt;->RGB conversion.</p>
","java"
"516",23190746,"<p>True, see <a href=""http://jira.pentaho.com/browse/PDI-11959"" rel=""nofollow"">http://jira.pentaho.com/browse/PDI-11959</a></p>

<p>While using hadoop-streaming-2.6.0.jar, I faced the same difficulty for customized partitioner class. I got it working by</p>

<ol>
<li>importing org.apache.hadoop.mapred packages instead of respective mapreduce packages.</li>
<li>implementing Partitioner interface, instead of extending Partitioner class</li>
</ol>

<p>Guess, that's same as older api.</p>
","java"
"517",32850082,"<p>You don't see the output because both stdout and stderr are captured by <code>check_output(stderr=STDOUT)</code> and <code>java</code> exits with a non-zero exit status that leads to the exception and that is why you see "".. failed"" message. </p>

<p>To get subprocess' output in the exception handler <code>except CalledProcessErrror as e:</code>, access <code>e.output</code> attribute.</p>

<p>If you don't need to capture the output then just call <code>call()</code> instead:</p>

<pre><code>import subprocess

subprocess.check_call(cmd)
</code></pre>
","java"
"518",7535716,"<p>Call Netpbm programs
<a href=""http://netpbm.sourceforge.net/"" rel=""nofollow"">http://netpbm.sourceforge.net/</a>
from a Python script using the following commands:</p>

<pre><code>$ pngtopnm test.png | pnmquant 16 | pnmtopng &gt; test16.png

$ file test16.png
test16.png: PNG image data, 700 x 303, 4-bit colormap, non-interlaced
</code></pre>

<p>And GIMP reports test16.png as having <code>Color space: Indexed color (16 colors)</code>,
which I guess is what you want.</p>

<p>This is not a pure Python solution but PIL is also not pure Python and has dependencies on shared libraries too.  I think you cannot avoid a dependency on some external image software.</p>
","java"
"519",35914852,"<p>Well after a lot of debugging I found out what was the problem.</p>

<p>The topic <code>$SYS/broker/load/messages/received/1min</code> was reporting more messages as I was sending. Probably is counting the protocol messages as messages. It is so that in idle this topic is reporting 3.22 with one subscriber. So I thought I was sending 1459.5055 per/sec, this reported by mosquitto. But I was sending just the 485.5458333333333. </p>

<p>So do not trust this topic for application messages payload! </p>
","java"
"520",9006520,"<p>Instead of String for the command, split it to chunks and make a String[]. No need to state <code>cmd /c</code>, I think.</p>

<p>This is a sample code from my application:</p>

<pre><code>//Running on windows
command = new String[4];
command[0]=directory.getCanonicalPath()+""/data/ExtenalApp.exe""; //extenal commandline app, not placed in path, but in subfolder
command[1]=directory.getCanonicalPath()+""/data/SomeFile.txt""; //file needed for the external app, sent as an argument
command[2]=arg1; //argument for the app
command[3]=arg2; //argument for the app

//Running on Mac
command = new String[6];
command[0]=""python"";
command[1]=directory.getCanonicalPath()+""/data/wp.py""; //path to the script
command[2]=""-F""; //argument/Flag/option
command[3]=""--dir=""+path; //argument/option
command[4]=""--filename=""+filename; //argument/option 
command[5]=argument; //argument/option


Process process = Runtime.getRuntime().exec(command);
process.waitFor();
process.destroy();
</code></pre>

<p>I don't handle the Input/Output streams because the script/app doesn't require input, and outputs only when finished, nothing important. Which might not be the case for you.</p>
","java"
"521",1195893,"<p>Google App Engine allows you to write web services that return any type of HTTP response content.  This includes xml, json, text, etc.</p>

<p>For instance, take a look at the <a href=""http://code.google.com/appengine/docs/java/gettingstarted/"">guestbook sample project</a> offered by Google which shows the HTTP response coming back as text/plain:</p>

<pre><code>    public class GuestbookServlet extends HttpServlet {
        public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
            UserService userService = UserServiceFactory.getUserService();
            User user = userService.getCurrentUser();

            if (user != null) {
                resp.setContentType(""text/plain"");
                resp.getWriter().println(""Hello, "" + user.getNickname());
            } else {
                resp.sendRedirect(userService.createLoginURL(req.getRequestURI()));
            }
        }
   }
</code></pre>

<p>Additionally, the <a href=""http://groups.google.com/group/google-appengine"">app engine google group</a> is a great place to learn more, ask questions, and see sample code.</p>
","java"
"522",4567692,"<p>You can define the abilities in interfaces and implement them in your classes.</p>
","java"
"523",31747686,"<p>For <code>protected Dice dice;</code> it's like a declaration of a place holder. It's only a definition. You says: Here's my class, and I will put maybe a Dice instance there, named 'dice'.</p>

<p>Same thing for <code>protected Movement[] movements;</code></p>

<p>Under the hood, it define a variable that contain a pointer. That pointer will eventually contain a value (a memory location) that contains the instance of the object (like a Dice object)</p>
","java"
"524",32144358,"<p>If you Know Java for the server side you cab create an application that hosts a RestFull API running on a tomcat server that you call with a local address (such as <a href=""http://ip_adress:port/appname"">http://ip_adress:port/appname</a>)</p>

<p>Tomcat can run on Windows, Linux or Mac.</p>

<p>If you need more informations just ask</p>
","java"
"525",1925360,"<p>In your search for RETE based rules engine in Python either <a href=""http://pyke.sourceforge.net/"" rel=""nofollow"">Pyke</a> or <a href=""http://pyclips.sourceforge.net/web/"" rel=""nofollow"">PyCLIPS</a> could be the one you would want to use. </p>

<p>PS: I had left a comment to S.Lott's answer about Pyke. I have posted a separate answer as per his suggestion and also to let other readers readily know that the rules engine mentioned in this answer could be a probable choice if they are searching for one.</p>
","java"
"526",26620663,"<p>It would only be possible if you had a list of IP addresses of Akamai's Points-of-Presence where you'd like to monitor discrepancies. Akamai would not, reasonably, publish this information, but you can do some sort of intelligence tricks, for example match IP addresses from here:</p>

<p><a href=""http://bgp.he.net/search?search[search]=akamai&amp;commit=Search"" rel=""nofollow"">http://bgp.he.net/search?search[search]=akamai&amp;commit=Search</a></p>

<p>against maxmind geoIP database, and then try request the content you need via IP addresses selected in such cross-matching pre-processing. So you can have a hundred IP addresses for a chosen location, but ounly few of them corresponds to a service map Akamai uses for your specific RSS acceleration, so you have to try all hundred to find out.</p>

<p>Specific RSS is identified inside Akamai by FQDN. So to probe the IPs you do this:</p>

<pre><code>curl -H ""Host: FQDN"" http(s)://IP/uri
</code></pre>

<p>If this returns HTTP 200 OK, you have your RSS content for this specific area.</p>
","java"
"527",12945278,"<p>Honestly, I'd start with classic LAMP. Take a stock Apache server, and a mysql database, and put your Python scripts in the cgi-bin directory. The fact that they're sending and receiving JSON instead of HTTP doesn't make much difference.</p>

<p>This is obviously not going to be the most flexible or scalable solution, of course, but it forces you to confront the actual problems as early as possible.</p>

<p>The first problem you're going to run into is game state. You claim there is no shared state, but that's not right—the cards in the deck, the bets on the table, whose turn it is—that's all state, shared between multiple players, managed on the server. How else could any of those commands work? So, you need some way to share state between separate instances of the CGI script. The classic solution is to store the state in the database.</p>

<p>Of course you also need to deal with user sessions in the first place. The details depend on which session-management scheme you pick, but the big problem is how to propagate a disconnect/timeout from the lower level up to the application level. What happens if someone puts $20 on the table and then disconnects? You have to think through all of the possible use cases.</p>

<p>Next, you need to think about scalability. You want millions of games? Well, if there's a single database with all the game state, you can have as many web servers in front of it as you want—John Doe may be on server1 while Joe Schmoe is on server2, but they can be in the same game. On the other hand, you can a separate database for each server, as long as you have some way to force people in the same game to meet on the same server. Which one makes more sense? Either way, how do you load-balance between the servers. (You not only want to keep them all busy, you want to avoid the situation where 4 players are all ready to go, but they're on 3 different servers, so they can't play each other…).</p>

<p>The end result of this process is going to be a huge mess of a server that runs at 1% of the capacity you hoped for, that you have no idea how to maintain. But you'll have thought through your problem space in more detail, and you'll also have learned the basics of server development, both of which are probably more important in the long run.</p>

<p>If you've got the time, I'd next throw the whole thing out and rewrite everything from scratch by designing a custom TCP protocol, implementing a server for it in something like Twisted, keeping game state in memory, and writing a simple custom broker instead of a standard load balancer.</p>
","java"
"528",29656649,"<p>A more low-level solution using bitwise arithmetic to count subsets that should be easy to translate to Java:</p>

<pre><code>def sublists(xs):
    l = len(xs)
    for i in range(1 &lt;&lt; l):
        incl, excl = [], []
        for j in range(l):
            if i &amp; (1 &lt;&lt; j):
                incl.append(xs[j])
            else:
                excl.append(xs[j])
        yield (incl, excl)
</code></pre>
","java"
"529",26577310,"<p>As wenzul said try running it as admin, open an elevated command prompt (search cmd, right click, select run as admin).</p>
","java"
"530",140758,"<p>Use os.path.walk if you want subdirectories as well.</p>

<pre>walk(top, func, arg)

        Directory tree walk with callback function.

        For each directory in the directory tree rooted at top (including top
        itself, but excluding '.' and '..'), call func(arg, dirname, fnames).
        dirname is the name of the directory, and fnames a list of the names of
        the files and subdirectories in dirname (excluding '.' and '..').  func
        may modify the fnames list in-place (e.g. via del or slice assignment),
        and walk will only recurse into the subdirectories whose names remain in
        fnames; this can be used to implement a filter, or to impose a specific
        order of visiting.  No semantics are defined for, or required of, arg,
        beyond that arg is always passed to func.  It can be used, e.g., to pass
        a filename pattern, or a mutable object designed to accumulate
        statistics.  Passing None for arg is common.
</pre>
","java"
"531",30123789,"<p>Yes, it works on different machines. If you want to connect from a different computer just pass a different Host to your ConnectionFactory.</p>

<p>If you can't connect from a different machine due to configuration problems, perhaps you are using the <code>guest:guest</code> user, which can only connect from localhost? <a href=""https://www.rabbitmq.com/access-control.html"" rel=""nofollow"">https://www.rabbitmq.com/access-control.html</a></p>
","java"
"532",433945,"<p>Easiest way I ever found to do this (using PyGTK and <a href=""http://async.com.br/projects/kiwi"" rel=""nofollow"">Kiwi</a>):</p>

<pre><code>from kiwi.ui.dialogs import open as open_dialog

chosen_path = open_dialog('Select a file', folder='/start/folder')

if chosen_path is not None:
    # do something ...
</code></pre>
","java"
"533",17099581,"<p>I know it's late but, i've an experimental java api which can communicate with Lync 2013 UCWA. <a href=""https://github.com/mtorak/java-lync-client"" rel=""nofollow"">Here is the github page</a></p>

<p>You are welcome to fork it.</p>
","java"
"534",271488,"<p>I agree with the Idea of coding first in a high level language such as Python,  Profiling and then Implementing any code that needs speeding up in C / C++ and wrapping it for use in the high level language.</p>

<p>As an alternative to boost I would like to suggest <a href=""http://www.swig.org/"">SWIG</a> for creating Python callable code from C. Its reasonably painless to use, and will compile callable modules for a wide range of languages. (Python, Ruby, Java, Lua. to name a few) from C code.</p>

<p>The wrapping process is semi automated, so there is no need to add new functions to the base C code, making a smoother work flow. </p>
","java"
"535",29615997,"<p>I didn't try, but to my mind, the socket should not be closed between the send and receive action, one socket means one connection to the server. 
The python server will most likely try to answer on the given socket, which will be closed, and the java client will wait on another.</p>

<p>Try something like that: creating the socket in the constructor and closing it at the end of the receive (if you are sure you might call the send/receive pair only one time)</p>

<pre><code>import java.net.*;
import java.io.*;

class GpcSocket {
  private Socket socket;
  // default value
  private int SERVER_PORT = 9999;
  private String SERVER_IP = ""192.168.3.100"";
  OutputStream out = null;
  InputStream in = null;
  byte[] buffer = new byte[157*10];

  public GpcSocket(String serverIP, int serverPort) {
    this.SERVER_PORT = serverPort;
    this.SERVER_IP = serverIP;
    InetAddress serverAddr = InetAddress.getByName(SERVER_IP);
    socket = new Socket(serverAddr, SERVER_PORT);
  }

  public int send(byte[] str) throws IOException {
    out = socket.getOutputStream();
    out.write(str);
    out.flush();
    // out.close();
    return str.length;
  }

  public byte[] receive() throws IOException {
    in = socket.getInputStream();
    in.read(buffer);
    in.close();
    socket.close()
    return this.buffer;
  }
}
</code></pre>
","java"
"536",39007823,"<p>Figured out that jpype appends an <code>""_""</code> at the end for those methods/fields in its source code. So you can access it by Jpype.JClass(""Foo"").pass_</p>

<p>Wish it's documented somewhere </p>
","java"
"537",4567692,"<p>It depends on your actual use case, but have you already considered decorators?</p>

<p><a href=""http://en.wikipedia.org/wiki/Decorator_pattern"" rel=""nofollow"">http://en.wikipedia.org/wiki/Decorator_pattern</a></p>
","java"
"538",36164031,"<p>You should either split the command line into a list or use shell e.g.</p>

<pre><code>subprocess.call(['java'] + drun.split())
</code></pre>

<p>or</p>

<pre><code>subprocess.call('java' + drun, shell=True)
</code></pre>
","java"
"539",37600192,"<p>So in java the structure is generally </p>

<pre><code>Class
      private data (aka the ""struct"")
      public data
      constructors (__init__ in python)
      functions etc
</code></pre>

<p>its very similar in python. same structure just for any functions working with the data you need to put self as an argument. where java it didn't have to take arguments. </p>

<p>Also it seems in python all data is public by default so you don't need to use getters and setters like in java. </p>

<p>personally I find a Python class more of a C-Struct with some added features, where java everything is thrown into a class. </p>
","java"
"540",1624570,"<p>I would call Tcl/Tk a natural choice for the features you listed.</p>

<p>But might be called old fashioned.</p>

<ul>
<li>GUI - Tk, well integrated, looks okay if you know what your doing, you can also use Qt or gtk but thats a bit less common.</li>
<li>Multithreading - Tcl has both CoRoutines for cooperative multitasking, message passing based threads that do not have a global interpreter lock and scale nicely and in addition a built in event loop to make you need threads less</li>
<li>Test manipulation: you get a really flexible language to do test automation, add in the expect package and you have the tool of choice used for testing things like lots of routers, or with in the frame of DejaGnu the GCC testsuite for example.</li>
</ul>

<p>Its usually easy to learn and has some cool features, but you won't usually find a job with it.
<a href=""http://wiki.tcl.tk"" rel=""nofollow"">The Tcl'ers Wiki</a> is a good starting point, other points of interest might be <a href=""http://tkdocs.com"" rel=""nofollow"">The tkdocs</a> homepage or the official language page at <a href=""http://www.tcl.tk"" rel=""nofollow"">www.tcl.tk</a></p>
","java"
"541",16152965,"<p>Since these are academic papers, you should also really look at <a href=""https://github.com/BMKEG/lapdftext"" rel=""nofollow"">lapdftext</a></p>

<blockquote>
  <p>LA-PDFText is a system for extracting accurate text from PDF-based
  research articles (and an interface to be able to improve performance
  where needed). The system is open-source and provides a simple
  baseline function for extracting text from primary research articles
  using rules that developers can customize.</p>
</blockquote>
","java"
"542",14469884,"<p>You could use a serialisation library like <a href=""http://wiki.fasterxml.com/JacksonHome"" rel=""nofollow"">Jackson</a> which serialises POJOs to JSON.  </p>

<p>An example from the <a href=""http://wiki.fasterxml.com/JacksonInFiveMinutes"" rel=""nofollow"">tutorial</a>:</p>

<blockquote>
  <p>Jackson's org.codehaus.jackson.map.ObjectMapper ""just works"" for
  mapping JSON data into plain old Java objects (""POJOs""). For example,
  given JSON data</p>
</blockquote>

<pre><code>{
  ""name"" : { ""first"" : ""Joe"", ""last"" : ""Sixpack"" },
  ""gender"" : ""MALE"",
  ""verified"" : false,
  ""userImage"" : ""Rm9vYmFyIQ==""
}
</code></pre>

<blockquote>
  <p>It takes two lines of Java to turn it into a User instance:</p>
</blockquote>

<pre><code>ObjectMapper mapper = new ObjectMapper(); // can reuse, share globally
User user = mapper.readValue(new File(""user.json""), User.class);
</code></pre>

<blockquote>
  <p>Where the User class looks something like this (from an <a href=""http://www.cowtowncoder.com/blog/archives/2008/12/entry_121.html"" rel=""nofollow"">entry</a> on Tatu's blog):</p>
</blockquote>

<pre><code>public class User {
    public enum Gender { MALE, FEMALE };

    public static class Name {
      private String _first, _last;

      public String getFirst() { return _first; }
      public String getLast() { return _last; }

      public void setFirst(String s) { _first = s; }
      public void setLast(String s) { _last = s; }
    }

    private Gender _gender;
    private Name _name;
    private boolean _isVerified;
    private byte[] _userImage;

    public Name getName() { return _name; }
    public boolean isVerified() { return _isVerified; }
    public Gender getGender() { return _gender; }
    public byte[] getUserImage() { return _userImage; }

    public void setName(Name n) { _name = n; }
    public void setVerified(boolean b) { _isVerified = b; }
    public void setGender(Gender g) { _gender = g; }
    public void setUserImage(byte[] b) { _userImage = b; }
}
</code></pre>
","java"
"543",12366268,"<p>You'll need to turn your dictionary into a series of keys and values:</p>

<pre><code>def chainDict(mapping):
    items = []
    for item in mapping.iteritems():
        items.extend(item)
    return items

event = portTest.event(chainDict(myDict))
</code></pre>

<p>This'll pass a list of <code>[keyFoo, valueFoo keyBar, valueBar]</code> to the <code>event</code> method, where keys and values are paired but in arbitrary order.</p>

<p>If you don't have an <code>itertools</code> module available, <code>chain</code> can be defined as:</p>
","java"
"544",9333665,"<p>For reading files I would suggest following this site: <a href=""http://www.roseindia.net/java/beginners/java-read-file-line-by-line.shtml"" rel=""nofollow"">Read File With Java.</a></p>

<p>As for arguments, I'm not sure if you mean into the program itself (command line arguments) or are talking about more input with the scanner. If you are talking about command line arguments, I would follow the <a href=""http://docs.oracle.com/javase/tutorial/essential/environment/cmdLineArgs.html"" rel=""nofollow"">Oracle Docs.</a></p>

<p>Good luck.</p>
","java"
"545",5750281,"<p>To answer your question, I've not heard of any such a framework.</p>

<p>From the limited amount that I understand and have heard about this topic, I'd say that this is beyond the state of the art ... certainly if you are trying to do this across multiple languages.</p>

<p>Here are some relevant resources:</p>

<ul>
<li><a href=""http://www.project-open.com/whitepapers/oss-l10n/"" rel=""nofollow"">""Open-Source Software and Localization""</a> by Frank Bergman [2005]</li>
<li>Plural forms in GNU gettext - <a href=""http://www.gnu.org/software/hello/manual/gettext/Plural-forms.html"" rel=""nofollow"">http://www.gnu.org/software/hello/manual/gettext/Plural-forms.html</a></li>
</ul>
","java"
"546",4842451,"<p>The <code>%d</code> is a Python string formatter similar to that found in <code>C</code>. What it says is put the thing that comes after the closing quote in place of the formatter, in this case <code>96</code> in place of <code>%d</code>. The <code>%d</code> specifies a signed integer decimal.</p>

<p>The <code>'&gt;%dL'%96</code> is an instruction to <code>struct.unpack</code> to say that the thing it needs to unpack is a big endian unsigned long with an unsigned integer decimal inside it. Before the <code>'&gt;%dL'</code> is passed to <code>unpack</code> however the string formatter is resolved and <code>'&gt;%dL'</code> becomes <code>'&gt;96L'</code>. Have a look at the format strings section in `struct.unpack docs </p>

<p><a href=""http://docs.python.org/library/stdtypes.html#string-formatting"" rel=""nofollow"">http://docs.python.org/library/stdtypes.html#string-formatting</a></p>

<p><a href=""http://docs.python.org/library/struct.html?highlight=struct.unpack#format-strings"" rel=""nofollow"">http://docs.python.org/library/struct.html?highlight=struct.unpack#format-strings</a></p>
","java"
"547",697594,"<p>A similar question was asked about integrating with xulrunner applications. Apparently there is a commandline version that can be used:</p>

<p><a href=""http://stackoverflow.com/questions/169512/what-is-the-simplest-way-to-set-up-a-birt-report-viewer-for-a-xulrunner-applicati"">What is the simplest way to set up a BIRT report viewer for a xulrunner application?</a></p>
","java"
"548",14508605,"<p>So you are looking to parse Java. A quick Google search reveals, <a href=""http://code.google.com/p/javaparser/"" rel=""nofollow"">javaparser</a>, a Java 1.5 parser written in Java.</p>
","java"
"549",1257264,"<p>You've got to tell us what type of object you're working with.  I'm assuming you're talking about a socket read.  Either you read the socket with blocking or you read without blocking.  You can measure how you have just read in a non-blocking read, if you are interested in that.  However, it sounds like you are trying to bend python into a java.io style stream-buffer paradigm that it just doesn't support in detail.</p>
","java"
"550",28085154,"<p>As suggested in the filename, <code>en-ner-person.bin</code> only identifies persons.  There are other available OpenNLP NER models for other kinds of entities.</p>
","java"
"551",8611211,"<p>The relevant distinction may be the programming paradigm emphasized by language. <a href=""http://en.wikipedia.org/wiki/Functional_programming"" rel=""nofollow"">Functional</a> languages such as Haskell &amp; Clojure aim to eliminate side effects and emphasize determinism; encapsulating mutability or state in thinks like monads. This is in contrast to <a href=""http://en.wikipedia.org/wiki/Imperative_programming"" rel=""nofollow"">Imperative</a> languages. Perl &amp; PHP are multi-paradigm languages, so it is possible to implement imperative styles such as procedural and object oriented coding, or even emulate functional styles.</p>

<p>In collaborating with imperative programmers it might be worth focusing on loose coupling and side effect free design patterns such as <a href=""http://martinfowler.com/articles/injection.html"" rel=""nofollow"">Dependency Injection</a>.</p>
","java"
"552",6984264,"<p>As alternative to NLTK, you can use <a href=""http://wordnet.rkbexplorer.com/sparql/"" rel=""nofollow"">one</a> of available WordNet SPARQL endpoints to retrieve such information. Query example:</p>

<pre><code>PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
PREFIX wordnet: &lt;http://www.w3.org/2006/03/wn/wn20/schema/&gt;

SELECT DISTINCT ?label {
  ?input_word a wordnet:WordSense;
     rdfs:label ?input_label.
  FILTER (?input_label = 'run')
  ?synset wordnet:containsWordSense ?input_word.
  ?synset wordnet:containsWordSense ?synonym.
  ?synonym rdfs:label ?label.
} LIMIT 100
</code></pre>

<p>In Java universe, <a href=""http://jena.sourceforge.net"" rel=""nofollow"">Jena</a> and <a href=""http://www.openrdf.org"" rel=""nofollow"">Sesame</a> frameworks can be used.</p>
","java"
"553",23870859,"<p>Using <a href=""https://docs.python.org/2/library/struct.html#struct.pack"" rel=""nofollow""><code>struct.pack</code></a> and <a href=""https://docs.python.org/2/library/struct.html#struct.unpack"" rel=""nofollow""><code>struct.unpack</code></a>:</p>

<pre><code>&gt;&gt;&gt; struct.unpack('2b', struct.pack('&gt;h', 1000))
(3, -24)
&gt;&gt;&gt; struct.unpack('4b', struct.pack('&gt;I', 1000))
(0, 0, 3, -24)
&gt;&gt;&gt; struct.unpack('8b', struct.pack('&gt;Q', 1000))
(0, 0, 0, 0, 0, 0, 3, -24)
</code></pre>

<p>Unfortunately, you can't get abitrary length byte array using <code>struct.pack</code>/<code>struct.unpack</code>.</p>
","java"
"554",11839603,"<p>In order to send an receive ObjectMessage types over Stomp you need to use the message <a href=""http://activemq.apache.org/stomp.html"" rel=""nofollow"">transformation feature</a> of ActiveMQ to have the object payload delivered in a form a STOMP client can understand.  ActiveMQ provides XML and JSON transformation support out of the box however you can add your own transformer to get whatever format you want on the content.  </p>
","java"
"555",8808104,"<p>If you're doing this on Linux, you should consider using a TUN/TAP device, which is a very handy tool for intercepting network traffic for custom processing.  Here's a basic tutorial if you're unfamiliar  <a href=""http://backreference.org/2010/03/26/tuntap-interface-tutorial/"" rel=""nofollow"">http://backreference.org/2010/03/26/tuntap-interface-tutorial/</a></p>
","java"
"556",36765331,"<p>How does the receiver know where image1 ends? In your code, the client keeps calling <code>client_socket.recv</code> until a null string is returned. This doesn't happen until the socket is closed. So what is happening is that you are transmitting both images and the client is writing the content of both to the first file. </p>

<p>The second loop will never receive any data because, once closed, you will never receive more data from the socket.</p>

<p>You need to either (a) open a new socket to transmit the second file, or (b) send the length of each file as part of your protocol so that the client knows how much to write to <code>pathImage1</code> before moving on to <code>pathImage2</code>.</p>
","java"
"557",19365390,"<p>You need to look at the result returned by running the command instead of just catching exceptions. </p>

<p>Take a look at the <code>exitValue()</code> and methods to get the output and error streams on your <a href=""http://docs.oracle.com/javase/7/docs/api/java/lang/Process.html"" rel=""nofollow"">Process</a> object. </p>

<p>My guess is that python isn't able to find your program because ../ is resolved by your shell and programs launched using exec aren't run from a shell.</p>
","java"
"558",26463783,"<p>In python set:</p>

<pre><code>nltk.internals.config_java(options='-Xmx3024m')
</code></pre>
","java"
"559",14989100,"<p>As pointed by miku:</p>

<ol>
<li><p>Objects can be serialized by picke module, but there is not an interface to be implemented, Python is not Java.</p></li>
<li><p>There is no private attribute in python, usually people use <strong>bar</strong> (the underscore) to mean private attributes, but they can be accessed from external world. Getters and setters are waste of time of both CPU and programmers.</p></li>
<li><p>Nothing to add to miku answer.</p></li>
</ol>

<p>about properties: <a href=""http://stackoverflow.com/questions/6304040/real-world-example-about-how-to-use-property-feature-in-python"">Real world example about how to use property feature in python?</a></p>

<p>good text: <a href=""http://dirtsimple.org/2004/12/python-is-not-java.html"" rel=""nofollow"">http://dirtsimple.org/2004/12/python-is-not-java.html</a></p>
","java"
"560",33067606,"<pre><code>c= 10
for i in range(1,10,1):
   for j in range(1,10,1):
       pass
</code></pre>

<p>The range takes 3 parameters(start,stop,step)
start - from where to begin a for loop, when to stop the loop and how much to step</p>

<p>in the above code snippet the loop will begin at 1, stop at 10 and will step by 1 every time just like i++ in java</p>
","java"
"561",10272374,"<p>For a general solution: you could embed <a href=""http://mvel.codehaus.org/"" rel=""nofollow"">MVEL</a> in your program, pass the formula as a string, bind the parameters and evaluate it. From the linked page:</p>

<blockquote>
  <p>MVEL is a powerful expression language for Java-based applications. It provides a plethora of features and is suited for everything from the smallest property binding and extraction, to full blown scripts.</p>
</blockquote>
","java"
"562",15347136,"<p>Python decorators are just syntactic sugar for passing a function to another function and replacing the first function with the result:</p>

<pre><code>@decorator
def function():
    pass
</code></pre>

<p>is syntactic sugar for</p>

<pre><code>def function():
    pass
function = decorator(function)
</code></pre>

<p>Java annotations by themselves just store metadata, you must have something that inspects them to add behaviour.</p>

<p>&nbsp;</p>

<p>Java AOP systems are huge things built on top of Java, decorators are just language syntax with little to no semantics attached, you can't really compare them.</p>
","java"
"563",23817840,"<p>There can be some workarounds to this.</p>

<p>You can use an <code>AtomicInteger</code> that you will increment each time you go through an element of the stream</p>

<pre><code>final AtomicInteger atom = new AtomicInteger(); 
list.stream().forEach(i -&gt; System.out.println(i+""-""+atom.getAndIncrement()));
</code></pre>

<p>Or using an iterator from another stream for the indexes (a bit like your original idea) but more efficient as you don't call <code>get</code> on the list.</p>

<pre><code>final Iterator&lt;Integer&gt; a = IntStream.range(0, list.size()).iterator();
list.stream().forEach(i -&gt; System.out.println(i+""-""+a.next()));
</code></pre>

<p>Well I'm not sure is there exist other nicer alternatives to this (certainly) but that's what I think for the moment.</p>

<p>Note that it's assuming that you are not using a parallel stream. In the latter case that would not be possible to do it like that to obtain a mapping of the elements with their original indexes in the list.</p>
","java"
"564",15646004,"<p>I use <a href=""http://en.wikipedia.org/wiki/Ternary_operator"" rel=""nofollow"">ternary operators</a> when handling this on my sites. It looks like many c-based programming languages support ternary operators. It is as easy as this in php:</p>

<pre><code>&lt;?= $views . ' view' . ($views == 1 ? '' : 's'); ?&gt;
</code></pre>
","java"
"565",9309536,"<p>I think this does the same thing as your initial code with a similar syntax...</p>

<pre><code>public class MultiArgs {

    public static void main(String[] args) {
        int a = 1;
        String b = ""abc"";
        double c = 1.0;
        List&lt;?&gt; list = Arrays.asList(a, b, c);

        System.out.println(function(a, b, c)); // 1 :: abc :: 1.000000
        System.out.println(function(list.toArray())); // 1 :: abc :: 1.000000
    }

    private static &lt;T extends Object&gt; String function(T... objects) {
        return String.format(""%d :: %s :: %f"", objects);
    }
}
</code></pre>
","java"
"566",17352469,"<p>To simplify answers based on Conditional Random Fields a bit...context is huge here. You will want to pick out in those tweets that clearly show Apple the company vs apple the fruit. Let me outline a list of features here that might be useful for you to start with. For more information look up noun phrase chunking, and something called BIO labels. See (<a href=""http://www.cis.upenn.edu/~pereira/papers/crf.pdf"" rel=""nofollow"">http://www.cis.upenn.edu/~pereira/papers/crf.pdf</a>) </p>

<p>Surrounding words: Build a feature vector for the previous word and the next word, or if you want more features perhaps the previous 2 and next 2 words. You don't want too many words in the model or it won't match the data very well. 
In Natural Language Processing, you are going to want to keep this as general as possible.</p>

<p>Other features to get from surrounding words include the following:</p>

<p>Whether the first character is a capital</p>

<p>Whether the last character in the word is a period</p>

<p>The part of speech of the word (Look up part of speech tagging)</p>

<p>The text itself of the word</p>

<p>I don't advise this, but to give more examples of features specifically for Apple:</p>

<p>WordIs(Apple)</p>

<p>NextWordIs(Inc.)</p>

<p>You get the point. Think of Named Entity Recognition as describing a sequence, and then using some math to tell a computer how to calculate that.</p>

<p>Keep in mind that natural language processing is a pipeline based system. Typically, you break things in to sentences, move to tokenization, then do part of speech tagging or even dependency parsing.</p>

<p>This is all to get you a list of features you can use in your model to identify what you're looking for.</p>
","java"
"567",12946684,"<p>I was unable to discern the issues. I believe it was the python server code though.</p>

<p>I decided to re-implement the server as a GET with arguments instead of a Get and a POST. I import urlparse to grab the keys appended to the url (<a href=""http://stackoverflow.com/questions/5239547/fetching-http-get-variables-in-python"">source</a>). Then I just look for w/e keys I expect.</p>

<p>Here is my new server code... (the expected arguments are 'up_address':'10.0.1.2').</p>

<pre><code>import string,cgi,time, urlparse
from os import curdir, sep
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
#import pri

class MyHandler(BaseHTTPRequestHandler):

    # our servers current set ip address that clients should look for.
    server_address = ""0.0.0.0""

    def do_GET(self):
    qs = {}
    path = self.path
    if '?' in path:
        path, tmp = path.split('?', 1)
        qs = urlparse.parse_qs(tmp)
        MyHandler.server_address = qs['up_address']
        print 'new server address: ', MyHandler.server_address


def main():
    try:
        server = HTTPServer(('', 8080), MyHandler)
        print 'started httpserver...'
        server.serve_forever()
    except KeyboardInterrupt:
        print '^C received, shutting down server'
        server.socket.close()

if __name__ == '__main__':
    main()
</code></pre>

<p>This seems to work just fine for my project's needs.</p>
","java"
"568",454182,"<p>Never tried it. But I recently <a href=""http://www.miketec.org/serendipity/index.php?/archives/9-Sure,-Change-Jobs!.html"" rel=""nofollow"">stumbled</a> on a <a href=""http://jepp.sourceforge.net/"" rel=""nofollow"">project named Jepp</a> that may be of interest to you.</p>

<blockquote>
  <p>Jepp embeds CPython in Java. It is safe to use in a heavily threaded environment, it is quite fast and its stability is a main feature and goal. </p>
</blockquote>
","java"
"569",35464976,"<p><strong>pycrypto</strong> has a hash function <a href=""https://pypi.python.org/pypi/pycrypto"" rel=""nofollow"">https://pypi.python.org/pypi/pycrypto</a></p>

<p>because of <em>ValueError: Invalid header value 'XXXXXXXXXX'</em> see this thread <a href=""http://stackoverflow.com/questions/33345675/valueerror-invalid-header-value-h2o-python-client-2-7-9-default-apr-2-2015"">ValueError: Invalid header value &#39;H2O Python client/2.7.9 (default, Apr 2 2015, 15:33:21) \n[GCC 4.9.2]&#39;</a></p>

<p>maybe the header in your post is not compatible with the library you use for the post</p>

<p>what libraries do you import in the python code ?</p>
","java"
"570",16489667,"<p>I've recently used the SAXParser and it was pretty straight forward and simple to implement.</p>

<p>In particular the XMLReader was very easy to implement and the XMLStreamReader was only slightly more time consuming to implement.</p>

<p>The benefit of the Reader is you can jump from one xml tag to the next and extract the data right there. The StreamReader as a little more setup time but its more flexible.</p>

<p>If I were you I would just read up on the differences between the SAXParser and the DOMParsers and decide which fits your situation best and run with it. </p>
","java"
"571",14423705,"<p>Mongo DB comes in an embeddable version: <a href=""https://github.com/flapdoodle-oss/embedmongo.flapdoodle.de"" rel=""nofollow"">https://github.com/flapdoodle-oss/embedmongo.flapdoodle.de</a>  </p>

<p>I've used it for integration testing (mocking a Mongo server) and it works really well!</p>

<p>Anytime I read document and search, I also think of Solr: <a href=""http://lucene.apache.org/solr/"" rel=""nofollow"">http://lucene.apache.org/solr/</a></p>
","java"
"572",12028908,"<p>For Java, you can search JNI (Java Native Interface), there're a lot of guides telling how to use it.</p>
","java"
"573",8786842,"<p><a href=""http://www.brython.info/"" rel=""nofollow"">Brython</a> is your alternative. It allows you to define <code>""text/python""</code> scripts.</p>
","java"
"574",6653961,"<blockquote>
  <p>Does string interning actually provide any significant benefits in the general case?</p>
</blockquote>

<p>Yes.  It's huge.  Try it in java.</p>

<p>Write simple tests that compare 1,000's of semi-random strings for equality with and without interning.  </p>

<pre><code>a.equals( b )  is slow

a == b is fast.
</code></pre>
","java"
"575",35539111,"<p>You get an object from <code>sumDouble</code> class, but you never invoke it's <code>sumDouble</code> method:</p>

<pre><code>sumDouble sum = new sumDouble();
</code></pre>

<p>change this to:</p>

<pre><code>sumDouble sd = new sumDouble();
int sum = sd.sumDouble(a,b);
</code></pre>
","java"
"576",10111381,"<p>You need a service on the remote machine, for example an http server that is configured to run this script on demand (eg via cgi) or an ssh server you can connect to to issue the command.</p>

<p>Since you're using windows (I assume) then PsExec may be the service you need.</p>

<p><a href=""http://technet.microsoft.com/en-us/sysinternals/bb897553"" rel=""nofollow"">http://technet.microsoft.com/en-us/sysinternals/bb897553</a></p>
","java"
"577",38532919,"<p>Yes, you went from <code>O(n^2)</code> to <code>O(n)</code>. You might want to look into the space complexity as well, you would have to store the graph for one of them while for the other one  you would use less space. A HashMap looks ideal for this situation if you do not care about memory, or any other array if it's easier to implement.</p>
","java"
"578",35791418,"<p>What you want to do is really simple and requires minimal code on your part, therefore I suggest you code it yourself. Here is an example implementation:</p>

<pre><code>List&lt;String[]&gt; rowList = new ArrayList&lt;String[]&gt;();
try (BufferedReader br = new BufferedReader(new FileReader(""pathtocsvfile.csv""))) {
    String line;
    while ((line = br.readLine()) != null) {
        String[] lineItems = line.split("","");
        rowList.add(lineItems);
    }
    br.close();
}
catch(Exception e){
    // Handle any I/O problems
}
String[][] matrix = new String[rowList.size()][];
for (int i = 0; i &lt; rowList.size(); i++) {
    String[] row = rowList.get(i);
    matrix[i] = row;
}
</code></pre>

<p>What this does is really simple: It opens a buffered reader that will read the csv file line by line and paste the contents to an array of Strings after splitting them based on comma (which is your delimiter). Then it will add them to a list of arrays. I know this might not be perfect, so afterwards I take the contents of that list of arrays and turn it into a neat 2D matrix. Hope this helps. </p>

<p>Hint: there are a lot of improvements that could be made to this little piece of code (i.e. take care of trailing and leading spaces, add user-defined delimiters etc.), but this should be a good starting point.</p>
","java"
"579",12902264,"<p>For geometric queries like you are asking(closest point) KD Tree is excellent data structure. Besides not very tough to implement. I have a Java implementation. Not sure how efficient it would be for you. It was my assignment. <code>Point2D</code> and other utility classes are implemented <a href=""http://algs4.cs.princeton.edu/code/index.php"" rel=""nofollow"">here</a>. You can view their source code there. <code>RectHV</code> is another utility class needed. It is written by me.</p>

<pre><code>public class RectHV {
    private final double xmin, ymin;   // minimum x- and y-coordinates
    private final double xmax, ymax;   // maximum x- and y-coordinates

    // construct the axis-aligned rectangle [xmin, xmax] x [ymin, ymax]
    public RectHV(double xmin, double ymin, double xmax, double ymax) {
        if (xmax &lt; xmin || ymax &lt; ymin) {
            throw new IllegalArgumentException(""Invalid rectangle"");
        }
        this.xmin = xmin;
        this.ymin = ymin;
        this.xmax = xmax;
        this.ymax = ymax;
    }

    // accessor methods for 4 coordinates
    public double xmin() { return xmin; }
    public double ymin() { return ymin; }
    public double xmax() { return xmax; }
    public double ymax() { return ymax; }

    // width and height of rectangle
    public double width()  { return xmax - xmin; }
    public double height() { return ymax - ymin; }

    // does this axis-aligned rectangle intersect that one?
    public boolean intersects(RectHV that) {
        return this.xmax &gt;= that.xmin &amp;&amp; this.ymax &gt;= that.ymin
            &amp;&amp; that.xmax &gt;= this.xmin &amp;&amp; that.ymax &gt;= this.ymin;
    }

    // draw this axis-aligned rectangle
    public void draw() {
        StdDraw.line(xmin, ymin, xmax, ymin);
        StdDraw.line(xmax, ymin, xmax, ymax);
        StdDraw.line(xmax, ymax, xmin, ymax);
        StdDraw.line(xmin, ymax, xmin, ymin);
    }

    // distance from p to closest point on this axis-aligned rectangle
    public double distanceTo(Point2D p) {
        return Math.sqrt(this.distanceSquaredTo(p));
    }

    // distance squared from p to closest point on this axis-aligned rectangle
    public double distanceSquaredTo(Point2D p) {
        double dx = 0.0, dy = 0.0;
        if      (p.x() &lt; xmin) dx = p.x() - xmin;
        else if (p.x() &gt; xmax) dx = p.x() - xmax;
        if      (p.y() &lt; ymin) dy = p.y() - ymin;
        else if (p.y() &gt; ymax) dy = p.y() - ymax;
        return dx*dx + dy*dy;
    }

    // does this axis-aligned rectangle contain p?
    public boolean contains(Point2D p) {
        return (p.x() &gt;= xmin) &amp;&amp; (p.x() &lt;= xmax)
            &amp;&amp; (p.y() &gt;= ymin) &amp;&amp; (p.y() &lt;= ymax);
    }

    // are the two axis-aligned rectangles equal?
    public boolean equals(Object y) {
        if (y == this) return true;
        if (y == null) return false;
        if (y.getClass() != this.getClass()) return false;
        RectHV that = (RectHV) y;
        if (this.xmin != that.xmin) return false;
        if (this.ymin != that.ymin) return false;
        if (this.xmax != that.xmax) return false;
        if (this.ymax != that.ymax) return false;
        return true;
    }

    // return a string representation of this axis-aligned rectangle
    public String toString() {
        return ""["" + xmin + "", "" + xmax + ""] x ["" + ymin + "", "" + ymax + ""]"";
    }

}
</code></pre>

<p>Here is KD tree:</p>

<pre><code>public class KdTree {

    private static class Node {
        private Point2D p;      // the point
        private RectHV rect;    // the axis-aligned rectangle corresponding to this node
        private Node lb;        // the left/bottom subtree
        private Node rt;        // the right/top subtree

        Node() {
            p = null;
            rect = null;
            lb = null;
            rt = null;
        }
    }

    private Node tree;
    private Point2D nearestPoint, infinitePoint;
    private int sz;
    private double nearestDist;


    // construct an empty set of points
    public KdTree() {
        tree = new Node();
        sz = 0;
        infinitePoint = new Point2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
    }



    // is the set empty?
    public boolean isEmpty() {
        return (sz == 0);
    }



    // number of points in the set
    public int size() {
        return sz;
    }



    ////////////////////////////////////////////////
    // private function for inserting any element //
    ////////////////////////////////////////////////
    private void privateInsert( Node nd, Point2D p, int lv, double xmin, double ymin, double xmax, double ymax) {
        if(nd.p == null) {
          nd.p = p;
          nd.rect = new RectHV(xmin, ymin, xmax, ymax);
          nd.lb = new Node();
          nd.rt = new Node();
          sz = sz + 1;
        }
        else if( lv % 2 == 0 ) {
            double X = nd.p.x();
            double x = p.x();
            if( x &lt;= X ) {
                xmax = X;
                privateInsert(nd.lb, p, lv+1, xmin, ymin, xmax, ymax);
            }
            else {
                xmin = X;
                privateInsert(nd.rt, p, lv+1, xmin, ymin, xmax, ymax);
            }
        }
        else {
            double Y = nd.p.y();
            double y = p.y();
            if( y &lt;= Y ) {
                ymax = Y;
                privateInsert(nd.lb, p, lv+1, xmin, ymin, xmax, ymax);
            }
            else {
                ymin = Y;
                privateInsert(nd.rt, p, lv+1, xmin, ymin, xmax, ymax);
            }
        }
    }



    ////////////////////////////////////////////////
    // private function for searching any element //
    ////////////////////////////////////////////////
    private Node privateSearch( Node nd, Point2D p, int lv ) {
        if( nd.p == null ) return nd;
        else if( p.equals( nd.p ) == true ) return nd;
        if(lv % 2 == 0) {
            double X = nd.p.x();
            double x = p.x();
            if( x &lt;= X ) {
                return privateSearch( nd.lb, p, lv+1 );
            }
            else {
                return privateSearch( nd.rt, p, lv+1);
            }
        }
        else {
            double Y = nd.p.y();
            double y = p.y();
            if( y &lt;= Y ) {
                return privateSearch(nd.lb, p, lv+1);
            }
            else {
                return privateSearch(nd.rt, p, lv+1);
            }
        }
    }


    /////////////////////////////////////////////////
    // private function for drawing all the points //
    /////////////////////////////////////////////////
    private void privateDraw (Node nd) {
        if(nd.p == null) return;
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.setPenRadius(.01);
        double x = nd.p.x();
        double y = nd.p.y();
        StdDraw.point( x, y );
        privateDraw( nd.lb );
        privateDraw( nd.rt );
    }



    //////////////////////////////////////////
    // private function for range searching //
    //////////////////////////////////////////
    private void privateRange(Node nd, RectHV rect, Queue&lt;Point2D&gt; que){
        if(nd.p == null) return;
        if( rect.contains( nd.p ) == true ) que.enqueue( nd.p );
        if( nd.rect.intersects(rect) == true ) {
            privateRange(nd.lb, rect, que);
            privateRange(nd.rt, rect, que);
            return;
        }
        else return;
    }




    //////////////////////////////////////////////////////
    // private function for searching nearest neighbour //
    //////////////////////////////////////////////////////
    private void privateNearest( Node nd, Point2D p ) {
        if(nd.p == null) return;
        double d = p.distanceSquaredTo(nd.p);
        if(d &lt; nearestDist) {
            nearestDist = d;
            nearestPoint = nd.p;
        }
        if(nd.lb.p != null &amp;&amp; ( nd.lb.rect.distanceSquaredTo(p) &lt; nearestDist) ) privateNearest(nd.lb, p);
        if(nd.rt.p != null &amp;&amp; ( nd.rt.rect.distanceSquaredTo(p) &lt; nearestDist) ) privateNearest(nd.rt, p);
    }



    // add the point p to the set (if it is not already in the set)
    public void insert(Point2D p) {
        if( contains( p ) == true ) {
            return;
        }
        else {
            privateInsert(tree, p, 0, 0.00, 0.00, 1.00, 1.00);
        }
    }



    // does the set contain the point p?
    public boolean contains(Point2D p) {
        Node nd = privateSearch(tree, p, 0);
        if(nd.p == null) return false;
        else return true;
    }



    // draw all of the points to standard draw
    public void draw() {
        privateDraw(tree);
    }



    // all points in the set that are inside the rectangle
    public Iterable&lt;Point2D&gt; range( RectHV rect ) {
        Queue&lt;Point2D&gt; que = new Queue&lt;Point2D&gt;();
        privateRange(tree, rect, que);
        return que;
    }



    // a nearest neighbor in the set to p; null if set is empty
    public Point2D nearest(Point2D p) {
        nearestPoint = infinitePoint;
        nearestDist = Double.POSITIVE_INFINITY;
        privateNearest(tree, p);
        return nearestPoint;
        //return p;
    }
}
</code></pre>
","java"
"580",11797663,"<p>you need older version of ffnet (0.6.5 i guess), then you use:</p>

<pre><code>exportnet(net, ""filename.java"", lang=""java"")
</code></pre>
","java"
"581",32998167,"<p>Per <a href=""https://stackoverflow.com/questions/30061490/whats-the-difference-between-jython-standalone-2-7-0-jar-and-jython-2-7-0-jar"">this question</a>, using <code>jython-standalone.jar</code> rather than <code>jython.jar</code> returns a non-null engine:</p>

<pre><code>andrew@asimov:~$ export CLASSPATH=jython-standalone-2.7.0.jar:.
andrew@asimov:~$ java Engines | tail -11
Engine name: jython
    Version: 2.7.0
    Language: python
    Engine supports the following extensions:
            py
    Engine has the following short names:
            python
            jython
=========================
python engine is null: false
javascript engine is null: false
andrew@asimov:~$
</code></pre>

<p>(In my pom.xml, I used <code>&lt;artifactId&gt;jython-standalone&lt;/artifactId&gt;</code>)</p>

<p>Curious, but at least I can move on. Thanks for reading!</p>
","java"
"582",15319561,"<p>Isn't a perfectly balanced binary search tree (BST) a median heap?  It is true that even red-black BSTs aren't always perfectly balanced, but it might be close enough for your purposes. And log(n) performance is guaranteed!</p>

<p><a href=""http://en.wikipedia.org/wiki/AVL_tree"" rel=""nofollow"">AVL trees</a> are more tighly balanced than red-black BSTs so they come even closer to being a true median heap.</p>
","java"
"583",31841151,"<p>Ran into this today as well: The problem is that the testrig expects the generated java source code. But since you're on Python you don't have it unless you explicitly run <code>antlr4</code> twice: Once for target language Python2 (or 3) and once for <code>-Dlanguage=java</code>.</p>

<p>See <a href=""http://stackoverflow.com/a/23316075/923794"">this answer</a> which suggests to run the <code>language=java</code> target first. Then the comment on <a href=""http://stackoverflow.com/questions/23315302/antlr4-cant-load-hello-as-lexer-or-parser"">the question itself</a> to compile the java files.</p>

<p>And for completeness and before it's forgotten: Ensure your <code>$CLASSPATH</code> env variable is set up so that it includes both a dot <code>'.'</code> and the path to the <code>antlr*.jar</code> file. <a href=""http://stackoverflow.com/questions/23315302/antlr4-cant-load-hello-as-lexer-or-parser"">For example on unix</a>:</p>

<pre><code>export CLASSPATH="".:/&lt;Mydirectory&gt;/antlr-4.2.2-complete.jar:$CLASSPATH""
</code></pre>

<p>Here's a step by step of what I guess you have to do once the <code>$CLASSPATH</code> is set correctly:</p>

<p>Compile for java:</p>

<pre><code>&gt; antlr4 -Dlanguage=java HelloWorld.g4
# or:  java org.antlr.v4.Tool -Dlanguage=java HelloWorld.g4
</code></pre>

<p>Note that I have the <code>options { language=Python3 }</code> in my grammar file and the <code>-D</code> override did not work as expected. So I removed the option block and specify the language target on the command line now.</p>

<p>Then compile the <code>*.java</code> files into <code>*.class</code> files:</p>

<pre><code>&gt; javac -g *.java
</code></pre>

<p>Then run the testrig:</p>

<pre><code>&gt; grun HelloWorld message
# or: java org.antlr.v4.gui.TestRig HelloWorld message -gui &lt; input.txt
</code></pre>
","java"
"584",9944568,"<p>I gather your confusion is over the definition of the free energy function in the reference python code. If this isn't what your asking I apologize.</p>

<p>First off, this is <em>not</em> an approximation. It looks like they're assuming the hidden units are binary valued. Remember, the free energy is just the (log of) the energy with hidden variables marginalized out. So, the inner sum in the free energy equation you listed above is just a sum over the values the i^th hidden unit can take on which, in this case, are {0,1}. Since exp(0) = 1 that inner sum just becomes 1+exp(...). See the ""RBMs With Binary Units"" section in the <a href=""http://deeplearning.net/tutorial/rbm.html?goback=.gmr_70219.gde_70219_member_104223473#equation-free_energy_grad"" rel=""nofollow"">link you provided</a>.</p>

<p>I'm not familiar with the apache commons math library in java so I can't be a huge amount of help there, but the implementation should be a straightforward translation from that python function.</p>
","java"
"585",12772001,"<p>You can look up the definitions of <em>all</em> Java methods in the <a href=""http://docs.oracle.com/javase/6/docs/api/"" rel=""nofollow"">API reference</a>.</p>

<p><a href=""http://docs.oracle.com/javase/6/docs/api/java/util/Vector.html#add%28int,%32E%29"" rel=""nofollow""><code>Vector.add(int index, E element)</code></a></p>

<blockquote>
  <p>Inserts the specified element at the specified position in this Vector.</p>
</blockquote>

<p><a href=""http://docs.oracle.com/javase/6/docs/api/java/util/Vector.html#set%28int,%32E%29"" rel=""nofollow""><code>Vector.set(int index, E element)</code></a></p>

<blockquote>
  <p>Replaces the element at the specified position in this Vector with the specified element.</p>
</blockquote>

<p>The equivalent Python code would be</p>

<pre><code>if len(pv) - 2 &lt; j:
     pv.insert(j+1, localpv[j])
else:
     pv[j+1] = localpv[j]
</code></pre>
","java"
"586",29106586,"<p>Add <code>#!/bin/bash</code> or <code>#!/usr/bin/env bash</code> as the very first line of the script that you're executing.</p>
","java"
"587",4121790,"<p>I wrote a C version of the naive Fibonacci function and compiled it to assembler in gcc (4.3.2 Linux).  I then compiled it with gcc -O3.  </p>

<p>The unoptimised version was 34 lines long and looked like a straight translation of the C code.  </p>

<p>The optimised version was 190 lines long and (it was difficult to tell but) it appeared to inline at least the calls for values up to about 5.</p>
","java"
"588",20534779,"<p>You could use Rscript from a shell. How to run multiple simultaneous commands is shell-specific. For instance, this would work on the bash shell:</p>

<pre><code>Rscript file1.R &amp;
Rscript file2.R &amp;
</code></pre>
","java"
"589",918359,"<p>There's a number of issues here which I'd like to bring together.</p>

<p>First if it's a program that you are only going to run once, does it matter it takes an extra few seconds?</p>

<p>Secondly, this is just one microbenchmarks. Microbenchmarks are pointless for comparing performance.</p>

<p>Startup has a number of issues.</p>

<p>The Java runtime is much bigger than Python so takes longer to load from disk and takes up more memory which may be important if you are swapping.</p>

<p>If you haven't set <code>-Xms</code> you may be running the GC only to resize the heap. Might as well have the heap properly sized at the start.</p>

<p>It is true that Java starts off interpreting and then compiles. Around 1,500 iterations for Sun client [C1] Hotspot and 10,000 for server [C2]. Server Hotspot will give you better performance eventually, but take more memory. We may see client Hotspot use server for very frequently executed code for best of both worlds. However, this should not usually be a question of seconds.</p>

<p><strong>Most importantly you may be creating two objects per iteration. For most code, you wouldn't be creating these tiny objects for such a proportion of the execution. TreeSet may be better on number of objects score, with 6u14 and Harmony getting even better.</strong></p>

<p>Python may possibly be winning by storing small integer objects in references instead of actually have an object. That is undoubtably a good optimisation.</p>

<p>A problem with a lot of benchmarks is you are mixing a lot of different code up in one method. You wouldn't write code you cared about like that, would you? So why are you attempting to performance test which is unlike code you would actually like to run fast?</p>

<p>Better data structure: Something like <code>BitSet</code> would seem to make sense (although that has ynchronisation on it, which may or may not impact performance).</p>
","java"
"590",9725916,"<p>An entity in the datastore can optionally have a parent entity; the ""parent key"" is the key of the parent entity.</p>

<p>Originally (and still, in the master-slave datastore), transactions were only possible among entities in the same entity group, which is the set of entities with a common ancestor entity. In the HR datastore, cross-entity-group transactions are available, although only across a maximum of 5 entity groups. </p>

<p>So parent entities are used to create entity groups to be used in transactions. Note that having too-large entity groups can seriously hinder write speeds, since when writing to one entity in a group the entire group is essentially locked; trying to make too many writes to a single entity group results in datastore contention exemptions.</p>
","java"
"591",38731535,"<p>Here is a document, which contains some RnD on video compression:
<a href=""https://drive.google.com/file/d/0BySTUFVtfzJmM3pYeVRiWmxSLVU/view"" rel=""nofollow"">https://drive.google.com/file/d/0BySTUFVtfzJmM3pYeVRiWmxSLVU/view</a></p>

<p>It also contains a sample code for quick compression of videos in objective-C.
It uses <code>AVAssetExportSession</code> for compressing videos.</p>
","java"
"592",22917436,"<p>A1. sure ... thats reasonable to say if you are talking about numbers ... </p>

<p>A2. Same with python (0x10,010(0o10 in py3),0b1101) and reversing you just call <code>int('01011',base)</code> where base is between 2 and 32 (inclusive)</p>

<p>A3. the same I think, Im not really sure what you are asking.  and theres always the decimal class (which stores it as 2 integers)</p>

<p>Q4. no ... python has no single character ... only strings  (you can do something like <code>chr(ascii_val)</code> or <code>unichr(unicode_ordinal)</code> ) ... in python2 its normal bytestrings in python3 its unicode strings.  you will need to tell it how to decode the bytestring from external sources ... most people use utf8</p>
","java"
"593",36963076,"<p>Yes this is possible.</p>

<p>Use a spring RestTemplate to make your GET request.
Retrieve the result as a string and path it to python.</p>

<p>This tutorial shows <a href=""https://bytes.com/topic/python/insights/949995-three-ways-run-python-programs-java"" rel=""nofollow"">three ways to run python from java</a></p>
","java"
"594",27703847,"<p>Got the answer:</p>

<pre><code>import suds

class Client:
def __init__(self):
    self.client = suds.client.Client(""http://localhost:9999/ws/hello?wsdl"")

def getHelloWorldAsString(self):
    return self.client.service.getHelloWorldAsString(""name"")

if(__name__ == ""__main__""):
client = Client()
result = client.getHelloWorldAsString()
print result
</code></pre>

<p>Source:-<a href=""http://www.codeproject.com/Articles/238778/Web-Services-in-Ruby-Python-and-Java"" rel=""nofollow"">http://www.codeproject.com/Articles/238778/Web-Services-in-Ruby-Python-and-Java</a></p>
","java"
"595",20913440,"<p>Well, I discovered that the java client hangs because the messages sent by the python server were not explicitly finished with \r\n, so the python code should have been something like this:</p>

<pre><code>     HOST=''
     PORT=12000
     s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
     s.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADRR,1)
     s.bind((HOST,PORT))
     s.listen(5)
     device=variador()
     while True:

       conn,addr=s.accept()
       if data==""turn_on\r\n"":
        respuesta=device.send_order(variador.start_order)
        conn.send(respuesta+'\r\n')
       conn.close()
</code></pre>

<p>I know it should have been quite obvious from the name of the methods in java, readline() and println, both suggesting that java ends strings with the sequence \r\n</p>
","java"
"596",8298018,"<p>Generally, Python tries to avoid using conditions with side-effects. That is, the condition should be just a test, and operations that change data should happen on their own.</p>

<p>I agree that it's sometimes convenient to use a side-effect in a condition, but no, in this case, you need to:</p>

<pre><code>z = set()
if y not in z:
    z.add(y)
    print something
</code></pre>

<p>Personally I like the simple expressiveness of <code>if y not in z:</code>, even if it takes up one more line of code, and it's one less thing to mentally parse when reading the the code at a later date.</p>
","java"
"597",2657882,"<p>Did you look into <a href=""http://www.jython.org/"" rel=""nofollow"">Jython</a>?</p>
","java"
"598",27932473,"<p>Suppose your structure looks like below after you add two more rows:</p>

<pre><code>&lt;table&gt;
&lt;tbody&gt;
    &lt;tr class=""OddRow""&gt;
        &lt;td class=""TimeField""&gt;
        7:20 AM
        &lt;/td&gt;
        &lt;td class=""TextField""&gt;&lt;/td&gt;
        &lt;td id=""Price_2_1"" class=""MoneyField""&gt;&lt;/td&gt;
        &lt;td class=""LinkField""&gt;
            &lt;a id=""basketControl_2_1"" class=""sr_AddToBasket""&gt;
                Add to Basket
            &lt;/a&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=""EvenRow""&gt;
        &lt;td class=""TimeField""&gt;&lt;/td&gt;
        &lt;td class=""TextField""&gt;&lt;/td&gt;
        &lt;td id=""Price_2_2"" class=""MoneyField""&gt;&lt;/td&gt;
        &lt;td class=""LinkField""&gt;&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr class=""OddRow""&gt;
        &lt;td class=""TimeField""&gt;&lt;/td&gt;
        &lt;td class=""TextField""&gt;&lt;/td&gt;
        &lt;td id=""Price_2_1"" class=""MoneyField""&gt;&lt;/td&gt;
        &lt;td class=""LinkField""&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=""EvenRow""&gt;
        &lt;td class=""TimeField""&gt;
        9:00 PM
        &lt;/td&gt;
        &lt;td class=""TextField""&gt;&lt;/td&gt;
        &lt;td id=""Price_2_2"" class=""MoneyField""&gt;&lt;/td&gt;
        &lt;td class=""LinkField""&gt;
            &lt;a id=""basketControl_2_1"" class=""sr_AddToBasket""&gt;
                Add to Basket
            &lt;/a&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</code></pre>

<p>So, now say <strong>you want to click on the 2nd link</strong>, then please use the <strong>below Java code</strong>:</p>

<pre><code>driver.findElement(By.xpath(""//td[@class='TimeField' and contains(text(),'9:00 PM')]/following-sibling::td/a[@class='sr_AddToBasket']"")).click();
</code></pre>

<p><strong>You can replace the '9:00 PM' above with your value.</strong></p>
","java"
"599",10404921,"<p>If you for some reason decide to use an SQL database as a backend, I would not use MySQL as it requires polling (well and would not use it for lots of other reasons), but PostgreSQL supports <a href=""http://www.postgresql.org/docs/9.1/static/sql-notify.html"" rel=""nofollow"">LISTEN/NOTIFY</a> for signalling other clients so that they do not have to poll for changes. However, it signals all listening clients at once, so you still would require a mechanism for choosing a winning listener.</p>

<p>As a sidenote I am not sure if a promote/demote mechanism would be useful; it would be better to schedule the jobs appropriately while inserting...</p>
","java"
"600",1673729,"<p>If you can't define your data (""The words can be anything, I there is no way to know beforehand a dictionary of what any individual list can contain. They will not be only numbers... it could be a list of anything"") then you have serious problems.</p>

<p>Specifically, if you can't define your data, your problem cannot be solved.</p>

<p>You can try playing with <a href=""http://www.nltk.org/"" rel=""nofollow"">nltk</a>.</p>

<p>You may be able to discard the ""noise words"" ("","", ""."", ""i"", ""start"", ""with"", ""then"", ""do"", etc.)  What's left may be this undefinable ""words can be anything"" that's left over. </p>

<p>Until you can better define your data, you're probably doomed to a lot of struggle.</p>
","java"
"601",39666644,"<p>I have been having the same problem. I've narrowed it down to the bs4 library, at the moment i havent got to the bottom of it but i think it is something to do with mixing python 2.7 ans python 3. Anyway the first link is to my (so far) unsolved question.</p>

<p><a href=""http://stackoverflow.com/questions/39880264/kivy-app-build-with-buildozer-apk-crash"">Kivy App build with Buildozer. APK crash</a></p>

<p>The following link is to a set of instructions that may help you find your problem.</p>

<p><strong>adb install instructions:-</strong></p>

<p><a href=""http://lifehacker.com/the-easiest-way-to-install-androids-adb-and-fastboot-to-1586992378"" rel=""nofollow"">http://lifehacker.com/the-easiest-way-to-install-androids-adb-and-fastboot-to-1586992378</a></p>

<p><strong>adb logcat fault finding:-</strong></p>

<p><a href=""http://stackoverflow.com/questions/10005509/adb-logcat-hangs-with-waiting-for-device-message"">adb logcat hangs with &quot;waiting for device&quot; message</a></p>

<p>Hope this helps.</p>
","java"
"602",3189012,"<p>You have a few options:</p>

<ul>
<li>Rather than force a user to create a spreadsheet that you verify, you can email them a form to fill out with <a href=""http://docs.google.com/support/bin/answer.py?hl=en&amp;answer=87809"" rel=""nofollow"">Google forms</a>, and the answers get aggregated back on your spreadsheet.</li>
<li>Use the docs API to <a href=""http://code.google.com/apis/documents/docs/3.0/developers_guide_protocol.html#CopyingDocs"" rel=""nofollow"">copy documents</a>.</li>
<li>Use <a href=""http://www.google.com/google-d-s/scripts/scripts.html"" rel=""nofollow"">Google Apps Script</a> to automate the process (it's essentially javascript).</li>
</ul>
","java"
"603",34686859,"<p>Honestly it looks like the bug is in <code>tarfile.py</code>'s <code>nti</code> function:</p>

<pre><code>n = int(nts(s) or ""0"", 8)
</code></pre>

<p>The fall-through logic (<code>or ""0""</code>) is not working because <code>s</code> is spaces, not <code>None</code>, so <code>int()</code> blows up. </p>

<p>I copied <code>tarfile.py</code> from <code>/var/lib/python2.7/</code> and wrapped that particular line with a try/catch, which fixed me up:</p>

<pre><code>    try:
        obj.uid = nti(buf[108:116])
    except InvalidHeaderError:
        obj.uid = 0
</code></pre>

<p>It's a hack solution, though. Really I'd prefer that the python folk took a look at it and fixed the ""<code>or ""0""</code> logic.</p>

<p><strong>Update</strong></p>

<p>Turns out the tarball was created by the <code>maven-assembly-plugin</code> in a Java 6 project that had just been upgraded to Java 7. The issue was resolved by upgrading the <code>maven-assembly-plugin</code> to <code>2.5.3</code>.</p>
","java"
"604",27603545,"<p>A friend solved that problem. My computer's language was Turkish. After I changed it from regional settings as English, the problem solved. Thanks,</p>
","java"
"605",19829604,"<p>(Putting my comment as the answer)</p>

<p><strong>The expressions are not the same</strong>. In python it looks like <code>-(e**someNum)</code>. In java it looks like <code>(-e)**someNum</code>.</p>

<p>Think about it (in a pretty raw fashion), what would you get when you mutliply a negative number some irrational number of times. Thats why you get a NaN.</p>

<hr>

<p>What you want in Java is this:</p>

<pre><code>public static double f(float x) {
    return 7 - Math.pow(Math.E, -((-Math.log(7)/100)*(100-x)));
}
</code></pre>
","java"
"606",6776448,"<p>Mockito supports <a href=""http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#16"" rel=""nofollow"">partial mocks</a> as well as <a href=""http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#13"" rel=""nofollow"">mocking out a method in a real class</a>. The latter looks more similar to your Python example.</p>

<p>I believe EasyMock supports the same thing but I'm having trouble finding where it is in the documentation.</p>
","java"
"607",1859865,"<p>Quoting <a href=""http://en.wikipedia.org/wiki/Jython"">Wikipedia</a>:</p>

<blockquote>
  <p>Jython, successor of JPython, is an implementation of the Python programming language written in Java.</p>
</blockquote>

<p>As for what uses it may have:</p>

<blockquote>
  <p>Jython programs can seamlessly import and use any Java class. Except for some standard modules, Jython programs use Java classes instead of Python modules.</p>
</blockquote>

<p>Performance measurements of Jython, IronPython and CPython show that both Jython and IronPython outperform CPython for some cases with large datasets.</p>
","java"
"608",7799610,"<p>There is no right or wrong answer to this. Exception handling is a neutral control flow construct, and the best use of it depends on context and style.</p>

<p>In this case, both Java and Python do the same thing, for the same reasons: <code>java.util.Iterator</code>'s <a href=""http://download.oracle.com/javase/1,5.0/docs/api/java/util/Iterator.html#next%28%29"" rel=""nofollow""><code>next()</code></a> uses <code>NoSuchElementException</code> to signal end-of-iterator. This is simply good style, in both languages: the alternative of using a special sentinel return value is is much worse, for various reasons.</p>

<p>As a rule of thumb, you should consider the use of exceptions whenever you write a function that wants to signal <em>more than one kind of control flow return</em>. This includes abnormal error conditions, but good use of exception signalling is certainly not limited to that.</p>
","java"
"609",36632434,"<p>I suspect this could be because of the <code>sys.exit()</code> call in your python code. What happens when you don't call <code>sys.exit()</code> ?</p>
","java"
"610",8655187,"<p>You are not showing the value of <code>command</code> used in the Python code. Maybe you are sending different commands?</p>

<p>The only other difference I can see is that in Python you use <code>socket.send' while in java you use</code>OutputStream.write`:</p>

<p>The different behavior happens when there is not enough buffer space to write all the data:</p>

<ul>
<li><code>send</code> sends only the amount of data it can send without blocking and returns the number of bytes sent. If no bytes can be send, then it blocks.</li>
<li><code>write</code> blocks until all the bytes are sent.</li>
</ul>

<p>Admittedly, I find this unlikely because you are sending a very short command...</p>

<p>You can test easily for this event changing your Python code to:</p>

<pre><code>for i in range(0, 10):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((HOST, PORT))
    sent = s.send(command)
    if sent != len(command):
        print 'Some bytes not sent!!!\n'
    data = s.recv(1024)
    data = data[2:]
    print 'Received', ""---&gt;%s&lt;--"" % data.decode()
</code></pre>
","java"
"611",17672874,"<p>According to me, in order to identify who is who in each frame, you will have to use a greater dimension. For example if you want to know which point is where between two frame (considering your extracted point are same), you will have to build vectors or simplex and then deduce an organisation between your points (like angles values). </p>

<p>The main problem is that combinations increase with point number. If your camera is a fixed point then, you could use background as a reference in order to deduce object rotations and translations, i mean build vectors between background interest points and object points in order to clearly identify them.
hope that help go forward.</p>
","java"
"612",2945359,"<p>As tzaman said, the secret is using finally; generally:</p>

<pre><code>Resource r = allocateResource();
try {
    // use resource
}
finally {
    r.dispose();
}
</code></pre>

<p>Things to note here:</p>

<ul>
<li>try and finally each create a variable scope. So allocating your resource within the try clause won't work, as it won't be visible in the finally clause- you've got to declare the resource's variable before the try statement.</li>
</ul>

<p>If you have several resources to allocate, the general pattern applies cleanly, but this is often not evident to beginners:</p>

<pre><code>Resource1 r1 = allocateResource1();
try {
    // code using r1, but which does not need r2
    Resource r2 = allocateResource2();
    try {
        // code using r1 and r2
    }
    finally {
        r2.dispose();
    }
}
finally {
    r1.dispose();
}
</code></pre>

<p>, and so on and so forth if you have more resources to allocate. If you have a couple of them, you will surely be tempted to try and avoid deep nesting of try... finally statements. Don't. You can get resource deallocation and exception handling right without nesting so many try... finally statements, but getting it right without nesting try... finally is even uglier than deep nesting.</p>

<p>If you frequently need to use a set of resources, you can implement a functor-based method to avoid the repetition, something like:</p>

<pre><code>interface WithResources {
    public void doStuff(Resource1 r1, Resource2 r2);
}

public static void doWithResources(WithResources withResources) {
    Resource r1 = allocateResource1();
    try {
        Resource r2 = allocateResource2();
        try {
            withResources.doStuff(r1, r2);
        }
        finally {
            r2.dispose();
        }
    }
    finally {
        r1.dispose();
    }
}
</code></pre>

<p>Which then you can use like this:</p>

<pre><code>doWithResources(new WithResources() {
    public void doStuff(Resource1 r1, Resource2 r2) {
        // code goes here
    }
});
</code></pre>

<p>doWithResources will automatically handle allocation and deallocation correctly, and your code will have less repetition (which is a good thing). However:</p>

<ul>
<li>Java's syntax for anonymous classes is excessively verbose</li>
<li>Checked exceptions within doStuff complicate things too much</li>
</ul>

<p>, two points which I hope will be solved in Java 7.</p>

<p>You can find this kind of code throughout Spring, for instance:</p>

<ul>
<li><a href=""http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/classic-spring.html#orm-hibernate-template"" rel=""nofollow"">http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/classic-spring.html#orm-hibernate-template</a> ; doInHibernate thingy.</li>
</ul>
","java"
"613",918359,"<p>Another possible explanation is that sets in Python are implemented natively in C code, while HashSet's in Java are implemented in Java itself.  So, sets in Python should be inherently much faster.</p>
","java"
"614",215542,"<p>Rather than manipulate the config files, you can use <a href=""http://perl.apache.org/"" rel=""nofollow"">mod_perl</a> to embed Perl directly into the config files. This could allow you, for example, to read required vhosts out of a database.</p>

<p>See  <a href=""http://perl.apache.org/start/tips/config.html"" rel=""nofollow"">Configure Apache with Perl Example</a> for quick example and <a href=""http://perl.apache.org/docs/1.0/guide/config.html#Apache_Configuration_in_Perl"" rel=""nofollow"">Apache Configuration in Perl</a> for all the details.</p>
","java"
"615",4090891,"<ol>
<li><p>the thread your create is not daemonic, so it doesn't exit when the parent thread exits;</p></li>
<li><p>the main exits right after it starts the child thread, python process waits for the child thread to be terminated;</p></li>
<li><p>offtop: do not forget to close the sockets;</p></li>
<li><p>you should implement some stop mechanism for the child thread. A simple workround: check some <code>stopped</code> flag in the while loop that accepts client connections (use a module-level, or extend the <code>threading.Thread</code> class to encapsulate it), set that flag to True and kick the server socket (by connecting) on Ctrl+C and/or Ctrl+Z or without them; wait in the main block for <code>while t.isAlive(): time.sleep(1)</code>. Here is a sample code:</p></li>
</ol>

<p><PRE></p>

<p>import threading, sys, socket, signal, time</p>

<p>class Server(threading.Thread):
  def <strong>init</strong>(self):
    threading.Thread.<strong>init</strong>(self)
    self._<em>stop = False
    self.</em>_port =12345</p>

<p>def stop(self):
    self.__stop = True
    self.kick()</p>

<p>def kick(self):
    try:
      s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      s.connect(('', self.__port))
      s.close()
    except IOError, e:
      print ""Failed to kick the server:"", e</p>

<p>def run(self):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(('', self._<em>port))
    s.listen(1)
    try:
      while True:
        csock, caddr = s.accept()
        if self.</em>_stop:
          print ""Stopped, breaking""
          break
        print ""client connected from"", caddr
        try:
          csock.sendall('Get off my lawn kids...\n')
        finally:
          csock.close()
    finally:
      s.close()</p>

<p>if <strong>name</strong> == '<strong>main</strong>':
  t = Server()
  # if it is failed to stop the thread properly, it will exit 
  t.setDaemon(True)
  t.start()
  try:
    while t.isAlive():
      time.sleep(1)
  except: # Ctrl+C brings us here
    print ""Maybe, you have interrupted this thing?""
  t.stop()
  # t.join() may be called here, or another synchronization should appear to
  # make sure the server stopped correctly</p>

<p></PRE></p>

<p>I don't know why it show stop,kick,run methods as module-level and puts more than one newlines, sorry</p>
","java"
"616",22917436,"<p>A1. sure ... thats reasonable to say if you are talking about numbers ... </p>

<p>A2. Same with python (0x10,010(0o10 in py3),0b1101) and reversing you just call <code>int('01011',base)</code> where base is between 2 and 32 (inclusive)</p>

<p>A3. the same I think, Im not really sure what you are asking.  and theres always the decimal class (which stores it as 2 integers)</p>

<p>Q4. no ... python has no single character ... only strings  (you can do something like <code>chr(ascii_val)</code> or <code>unichr(unicode_ordinal)</code> ) ... in python2 its normal bytestrings in python3 its unicode strings.  you will need to tell it how to decode the bytestring from external sources ... most people use utf8</p>
","java"
"617",2302761,"<p>Typically when doing client-server communication you need to establish some kind of protocol.  One very simple protocol is to send the String ""COMMAND"" before you send any commands and the String ""ERROR"" before you send any errors.  This doubles the number of Strings you have to send but gives more flexibility.</p>

<p>There are also a number of more sophisticated protocols already developed.  Rather than sending Strings you could construct a Request object which you then serialize and send to the client.  The client can then reconstruct the Request object and perform the request whether it's performing an error or running a command.</p>
","java"
"618",301493,"<p>For quick turnaround I've found <a href=""http://groovy.codehaus.org/Processing+XML"" rel=""nofollow"">Groovy</a> very useful.</p>
","java"
"619",7592565,"<p>If you have more than one thread calling into CPython, and one of those threads is ""busy"", then the global lock will probably be locked, and CPython has no choice except to hang until that lock is released.</p>

<p>What threads do you have calling into python - additionally - what is python doing in those threads?</p>
","java"
"620",199556,"<p>Using an automated tool to ""port"" the web application will almost certainly guarantee that future programming efficiency will be minimised -- not improved.</p>

<p>A good scripting language can help programming efficiency when used by good programmers who understand good coding practices in that language.  Automated tools are usually not designed to output code that is elegent or well-written, only code that works.</p>

<p>You'll only get an improvement in programming efficiency after you've put in the effort to re-implement the web app -- which, due to the time required for the reimplementation, may or may not result in an improvement overall.</p>
","java"
"621",38836312,"<p>Another option is to just use a list comprehension:</p>

<pre><code>print(' '.join([i for i in range(10) if i % 3 == 0])
</code></pre>
","java"
"622",15136499,"<p>So, as discussed in comments to the question, it is a bit hard to access Windows shares in Python. So, a hacky way of checking whether a file exists in a remote location not understood by Python, but understood by Windows' tools would be invoking these tools and parsing their output. </p>

<p>For example:</p>

<pre><code>import subprocess

def file_exists(path):        
    res = subprocess.check_output(['IF', 'EXIST', path, 'ECHO', ""1""])
    return res.strip() == '1'
</code></pre>

<p>Usage:</p>

<pre><code>path = r'\\serverA\f$\dir\Test.pdf'
print(file_exists(path))
</code></pre>
","java"
"623",5022777,"<p>If you have a list of names in the same order the files are produced, in Python it goes like this untested fragment:</p>

<pre><code>#!/usr/bin/python
import os

f = open('list.txt', 'r')
for n, name in enumerate(f):
    original_name = 'BusinessCard_%02d_Blue.pdf' % (n + 1)
    new_name = 'BusinessCard_%02d_%s_Blue.pdf' % (
                             n, ''.join(name.title().split()))
    if os.path.isfile(original_name):
        print ""Renaming %s to %s"" % (original_name, new_name),
        os.rename(original_name, new_name)
        print ""OK!""
    else:
        print ""File %s not found."" % original_name
</code></pre>
","java"
"624",20222411,"<p>I suspect you're making this rather more work for yourself than you really need to, but here goes.</p>

<p>If you're going to go for a line-by-line port, then <em>do that</em>.</p>

<ol>
<li><p>Don't declare result as an array of strings.  That'll just give you a headache.  Make it either a <code>StringBuilder</code> or a plain <code>String</code> as I do here (<code>StringBuilder</code> will be more efficient, admittedly, but this is probably easier to understand).  This is also more similar to the python code you already have.</p></li>
<li><p>Understand what your python code is doing.  It's taking a string in hex format, parsing it to an integer, adding a value (<code>theShift</code>), converting <em>back</em> into hex, and then getting just the numeric part of the string (without the leading <code>0x</code>).  So in Java, that loop goes like this.  (<strong>NOTE</strong>: in Java <code>Integer.toString(x, 16)</code> does <em>not</em> print the leading <code>0x</code>, so we don't need to chop it off).</p>

<pre><code>String result = """";
for (String thisHex : theHexArray) {
    result += Integer.toString(Integer.parseInt(thisHex, 16) + theShift, 16) + "" "";
}
</code></pre></li>
<li><p>Lose the <code>toText</code> method.  At this point you have the string you wanted, so that method doesn't really do anything anymore.</p></li>
</ol>
","java"
"625",17056441,"<p>This is as much a question about Maven as it is about Storm and its deployment model. You have to <a href=""https://github.com/nathanmarz/storm/blob/8cd0c067a5f176e07d66c90c5c4fa3624c0199f6/bin/storm"" rel=""nofollow"">check out what the <code>storm</code> command actually does</a>. First of all, it's actually a Python script that ultimately calls <code>java</code>.</p>

<p>If you look at the function <code>get_classpath(extrajars)</code>, you'll note that it does not use the <code>$CLASSPATH</code> evironment variable at all. Rather, it loads the core Storm jars and any jars that you have under a directory <code>lib/</code> relative to your working directory, as well as config files under <code>~/.storm</code></p>

<p>(You will find that ignoring <code>$CLASSPATH</code> is very common in many Java applications. Usually the first thing a ""launch script"" does is overwrite the CLASSPATH or not use it at all. This is to prevent unknown / unsupported / earlier versions of your jars from causing problems in your application).</p>

<p>As to your application fails when jsoup is declared ""provided"": when you declare the jar as a provided dependency, it will not be packaged in your ""jar with dependencies"" assembly.  See this question for a good explanation: <a href=""http://stackoverflow.com/questions/6646959/difference-between-maven-scope-compile-and-provided-for-jar-packaging"">Difference between maven scope compile and provided for JAR packaging</a> </p>

<p>The tl;dr explanation is that compile scope is shipped with your uber-jar, provided scope isn't, because it's expected to be ""provided"" by the container you are deploying to. Typically, the ""container"" is a Java web server, like Tomcat (hence, you should never have to ship JSP or Servlet jars with your web apps in Java). In this case, the ""container"" that you are expecting to ""provide"" classes is Storm. However, jsoup is not provided by Storm, hence your error.</p>

<p>Compile-scope classes still need to be shipped with your application because your application will be instantiating / using interfaces, enums, etc. </p>

<p>My recommendation is to just declare  jsoup ""compile"" scope and move on. The alternative will be to write your own bespoke deployment script and/or assembly that puts jsoup under <code>lib/</code> - essentially the same thing in the end.</p>
","java"
"626",28601962,"<p>I don't know about Java... In <em>python</em>, I might do something like:</p>



<pre class=""lang-python prettyprint-override""><code>class ProcessorSelector(object):
    def __init__(self):
        self._processor_map = {}

    def register(self, type, processor):
        # type checking goes here if you're worried about it...
        # e.g. `if not isinstance(processor, Processor): raise TypeError`
        self._processor_map[type] = processor

    def select(self, type):
        return self._processor_pam[type]

selector = ProcessorSelector()
selector.register('jpg', JpgProcessor)
cls = selector.select('jpg')
processor = cls()
processor.process(file)
</code></pre>

<p>Of course, you don't actually <em>need</em> the <code>ProcessorSelector</code> class at all...  You could just use a regular dictionary :-).</p>
","java"
"627",18330916,"<p>It sounds like you're using Django REST Framework in which case TokenAuthentication might be suitable.
From the docs:</p>

<blockquote>
  <p>This authentication scheme uses a simple token-based HTTP
  Authentication scheme. Token authentication is appropriate for
  client-server setups, such as native desktop and mobile clients</p>
</blockquote>

<p>You don't need to pre-generate the tokens as clients can ask for one using the built-in view <code>obtain_auth_token</code> which you configure in your urls.py.</p>

<p>Once the client has obtained the token for the session they can provide it on subsequent API calls using the <code>Authorization:</code> HTTP header.</p>

<p>Check out the docs for more info: <a href=""http://www.django-rest-framework.org/api-guide/authentication/#tokenauthentication"" rel=""nofollow"">http://www.django-rest-framework.org/api-guide/authentication/#tokenauthentication</a></p>
","java"
"628",2178532,"<p>If you import <code>JFrame</code> into the local namespace, use it without the full namespace:</p>

<pre><code>frame = JFrame(""Hello Jython"")
</code></pre>

<p>Same with JLabel, but remember to import it first.</p>

<p>To use the full namespace you need <code>import javax.swing</code> instead of <code>from javax.swing import JFrame</code>.</p>
","java"
"629",4857163,"<p>5f5f444f4e455f5fa is an ODD number of hex characters. Looks like it should be 5f5f444f4e455f5fa0 i.e. <code>""__DONE__\xA0""</code> rather than the <code>""__DONE__""</code> that you wrote. If not, why is that 'a0' in the incoming packet?</p>

<p>Isn't sending a 1024-byte packet padded out with NULs a bit wasteful? Perhaps you should be talking to the source of the packets.</p>
","java"
"630",20843236,"<p>There were couple of issues. </p>

<p>1) String queueName = channel.queueDeclare().getQueue() command was returning wrong queue name. I changed the queuename to ""celery"" and it worked fine.
2) The format of json has to be of this type:-
    {""id"": ""4cc7438e-afd4-4f8f-a2f3-f46567e7ca77"",
     ""task"": ""celery.task.PingTask"",
     ""args"": [],
     ""kwargs"": {},
     ""retries"": 0,
     ""eta"": ""2009-11-17T12:30:56.527191""}</p>

<p>as seen in <a href=""http://docs.celeryproject.org/en/latest/internals/protocol.html"" rel=""nofollow"">http://docs.celeryproject.org/en/latest/internals/protocol.html</a></p>

<p>It worked fine after these two changes.</p>

<p>-Amit</p>
","java"
"631",33117529,"<p>I have has similar issues in my project. In IE, clicking drop down values does not work. I have a pretty weird and unexpected solution for this. Find the element before performing the operations. I am assuming that this is required because when you move to element1 and when trying to find element the IE Xpath processor messes up the focus.</p>

<pre><code>WebElement element=driver.findElement(By.xpath(""/html/body/div/span/form[2]/div[1]/div[1]/div[3]/div[2]/ul/span[3]/li/a""));

WebElement element2=driver.findElement(By.xpath(""/html/body/div/span/form[2]/div[1]/div[1]/div[3]/div[2]/ul/span[3]/li/ul/span[1]/li/a""));

Actions act=new Actions(driver);
act.moveToElement(element).build().perform();
act.moveToElement(element2).click(element2).build().perform();
</code></pre>

<p>Please try this and let me know if this works for you too!!</p>

<p>Also, consider using relative XPaths instead of the absolute XPaths you have used. The second Action is not required. One action should do the trick.</p>

<p><strong>EDIT Based on user comment</strong></p>

<p>Move to element1 is working and the list is getting displayed. So I am assuming that element2 is visible and so we can directly click on it without using the <code>Actions</code> class</p>

<pre><code>Actions act=new Actions(driver);
act.moveToElement(element).build().perform();
element2.click();
</code></pre>
","java"
"632",7814351,"<p>This isn't exactly on point, but I'm in the middle of the process of converting from Linux gcc/make to MSVS myself. The paradigm shift can be tricky. I'll just share last week's <em>aha</em>! moment.</p>

<p><br>MSVS is all too willing to store absolute path names in project metadata, leading to frustration when you try to e.g. move to another computer. The macro feature allows you to specify various root directories symbolically in places like extra include or library directories. Use them.</p>
","java"
"633",28659743,"<p>For ""open ended"", you use mid instead of mid+1, and you check for &lt; high index instead of &lt;= high index.</p>

<p>In this thread are examples of somewhat optimized top down and bottom up merge sorts, both of them ""open ended"". Both examples are passed a second array to use for the merge sort (as opposed to the top down approach that dynamically allocates, copies, and frees sub-arrays, which is significantly slower).</p>

<p><a href=""http://stackoverflow.com/questions/28244634/merge-sort-using-vectors-works-well-with-less-than-9-inputs/28247782#28247782"">merge_sort using vectors works well with less than 9 inputs</a></p>
","java"
"634",28823052,"<blockquote>
  <p>python: </p>

<pre><code>p.stdin.write(""haha"")
</code></pre>
  
  <p>java:</p>

<pre><code>Scanner in = new Scanner(System.in)
data = in.next()
</code></pre>
</blockquote>

<p>From the <a href=""http://docs.oracle.com/javase/tutorial/essential/io/scanning.html"" rel=""nofollow"">Java Scanner docs</a>:</p>

<blockquote>
  <p>By default, a scanner uses white space to separate tokens. (White
  space characters include blanks, tabs, and line terminators.</p>
</blockquote>

<p>Your python code does not write anything that a Scanner recognizes as the end of a <em>token</em>, so the Scanner sits there waiting to read more data.  In other words, <code>next()</code> reads input until it encounters a whitespace character, then it returns the data read in, minus the terminating whitespace.</p>

<p>This python code:</p>

<pre><code>import subprocess

p = subprocess.Popen(
    [
        'java',  
        '-cp',
        '/Users/7stud/java_programs/myjar.jar',
        'MyProg'
    ],
    stdout = subprocess.PIPE, 
    stdin = subprocess.PIPE,
)


p.stdin.write(""haha\n"")
print ""i am done"" 
print p.stdout.readline().rstrip()
</code></pre>

<p>...with this java code:</p>

<pre><code>public class MyProg {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String data = in.next();

        System.out.println(""Java program received: "" + data);
    }
}
</code></pre>

<p>...produces this output:</p>

<pre><code>i am done
Java program received: haha
</code></pre>
","java"
"635",22905896,"<p>Kivy uses <a href=""https://github.com/kivy/python-for-android"" rel=""nofollow"">python-for-android</a> to compile APKs for you. It also provides <a href=""https://github.com/kivy/pyjnius"" rel=""nofollow"">pyjnius</a> to wrap Android/Java API calls. This lets you access things like the Location API. The <a href=""https://github.com/kivy/plyer"" rel=""nofollow"">Plyer</a> project is a cross platform layer that uses pyjnius for the Android part. There is a <a href=""https://github.com/kivy/plyer/tree/master/examples/gps"" rel=""nofollow"">GPS example</a> in Plyer which you can compile and use on Android if you have Kivy and Buildozer set up properly. Or you can read <a href=""https://github.com/kivy/plyer/blob/master/plyer/platforms/android/gps.py"" rel=""nofollow"">the source code of the GPS for Android part of Plyer</a> to make your calls via pyjnius.</p>
","java"
"636",24658756,"<p>You could write a second, simpler function that evaluates the difference between the desired value y and the output of <em>function</em>, then evaluate a new x as a proportion of the difference. For example, in Python</p>

<pre><code>while abs(y-desired) &gt; *whatever accuracy you need*:
   y = function(x)
   x = x + (x*((desired - y)/desired))
return x
</code></pre>

<p>By finding (desired - y), you find how far off the answer was, as well as making the change positive if y is too small or negative if y is too big. This difference is divided by desired to make the difference a percent error. Finally, the percent is multiplied by x to make the percent error into a change proportional to the range of x, whatever that may be.</p>

<p>The formula may need to be changed slightly based on the specifics of your case, but I think this should help you get a more accurate answer with many fewer runs through the big function.</p>
","java"
"637",3356554,"<p>This is the opensource solution Google uses to do IPC between Java and Python.
<a href=""https://code.google.com/p/protobuf/"" rel=""nofollow"">https://code.google.com/p/protobuf/</a></p>

<p>Recommended.</p>
","java"
"638",32080897,"<p>You can't. The composite video phono socket is an output device.</p>
","java"
"639",12220269,"<p>This should be easier to convert to Java:</p>

<pre><code>while len(m) != 0:
      for arr in m:
          queue.put(arr) # yield arr
      newm = []
      for arr in m:
          for mat in (u,a,d):
              i = multiply_array_matrix(arr, mat).getA1()
              if max_ is None or sum(i) &lt;= max_:
                 newm.append(i)
      m = newm
</code></pre>
","java"
"640",17851096,"<p>You haven't given a lot of details about what you're trying to do. If your middleware runs in a separate process then it probably won't make a lot of difference what language your middleware is written in as long as they can talk to each other—and you can do that with ZMQ as you suggested.</p>

<p>If you're actually just making calls into Java/Scala libraries from a layer you're wanting to write in Python, I'd go with Jython. ""Not being able to load all the modules"" is only an issue if you were planning on using some of the modules that aren't available. Even for those modules that aren't available, you should be able to find suitable Java substitutes you can call.</p>

<p>Finally, if you really want to directly interface between Python and Java, you could look into <a href=""http://computation.llnl.gov/casc/components/#page=home"" rel=""nofollow"">Babel</a>. I know some people who have used it for interfacing C, Java and Python programs successfully, and it seemed to work quite well for them.</p>
","java"
"641",1195893,"<p>Most python apps just write a handler that outputs the shaped xml directly... this example serves any GET requests submitted to the root url (""/""): </p>

<pre><code>import wsgiref.handlers

from google.appengine.ext import webapp

class MainHandler(webapp.RequestHandler):

  def get(self):
    self.response.out.write('&lt;myXml&gt;&lt;node id=1 /&gt;&lt;/myXml&gt;')

def main():
  application = webapp.WSGIApplication([('/', MainHandler)],
                                       debug=True)
  wsgiref.handlers.CGIHandler().run(application)

if __name__ == '__main__':
  main()
</code></pre>
","java"
"642",32543734,"<p>The Hadoop streaming jar is still available in the latest release of EMR Hadoop.  Starting with EMR release 4.0.0 it can be found at <code>/usr/lib/hadoop-mapreduce/hadoop-streaming.jar</code>.</p>

<p>Another good resource for differences between versions can be found at <a href=""http://docs.aws.amazon.com/ElasticMapReduce/latest/ReleaseGuide/emr-release-differences.html"" rel=""nofollow"">http://docs.aws.amazon.com/ElasticMapReduce/latest/ReleaseGuide/emr-release-differences.html</a>.</p>
","java"
"643",4704558,"<p>There is a try: except: finally: in python. </p>

<p>You can also use the with: statement, which I believe is what you are after for ARM. These are called context managers.  <a href=""http://www.python.org/dev/peps/pep-0343/"" rel=""nofollow"">http://www.python.org/dev/peps/pep-0343/</a></p>
","java"
"644",28742802,"<p>Java doesn't support ""run this file as a class"" directly. Instead, you need to add the class to the classpath and then call it using the Java Fully Qualified name:</p>

<pre><code>java -classpath $JENKINS_HOME/jobs/$JOB_NAME/builds/$BUILD_NUMBER com.foo.Class ...
</code></pre>

<p>would run the Java code in <code>.../builds/$BUILD_NUMBER/com/foo/Class.class</code></p>

<p>Note: Avoid <code>call()</code> with a string. Instead build a list of command plus arguments. That way, you can replace variables correctly and spaces in file names won't cause unexpected/hard to find problems:</p>

<pre><code>classpath = os.path.join(os.genenv(""JENKINS_HOME), ""jobs"", ...)
cmd = [
   ""java"",
   ""-classpath"",
   classpath,
   ""Class"",
   ...
]

call(cmd)
</code></pre>
","java"
"645",3412073,"<p>Try <a href=""http://itextpdf.com/"" rel=""nofollow"">iText</a> (Java). I found this example, try it (you may add generics, if supported):</p>

<pre><code>PdfReader reader = new PdfReader(""yourpdf.pdf"");
HashMap map= reader.getInfo();
Set keys = map.keySet();
Iterator i = keys.iterator();

while(i.hasNext()) {
    String thiskey = (String)i.next();
    System.out.println(thiskey + "":"" + (String)map.get(thiskey));
}
</code></pre>
","java"
"646",23330462,"<p>The key here is <em>acyclic</em> directed graph. If you relax (i.e., set d(w) = min(d(w), d(v) + length(v->w))) the arcs in <a href=""http://en.wikipedia.org/wiki/Topological_sorting"" rel=""nofollow"">topological order</a>, then every arc, once relaxed, stays relaxed. By the correctness proof of Bellman--Ford, this means that the distance labels d are correct.</p>
","java"
"647",16159985,"<p>Jython is python language spec inside of the JVM much like JRuby.</p>

<p>NetworkX source code is C or fortran (don't remember which).
Numpy/Scipy are C based (great packages for scientific computing).
Matplotlib is c (for display of the graphs).</p>

<p>NetworkX will help create graphs, matplotlib will help display them but both may not work in Jython.</p>

<p>If you need c based resources try jpype; its older (python 2.7) but will allow some functionality between c and java using JNI (java native interface).</p>

<p>What I have done is create graphs in python then switch over to Gephi to visualize and display the graphs.  Gephi is java based and a up and coming free tool.</p>
","java"
"648",32979715,"<p>It sounds just a concurrent issue. How about this?</p>

<pre class=""lang-java prettyprint-override""><code>private final Object onMessageLock = new Object();

@OnMessage
public void onMessage(String message, Session session)
{
    synchronized (onMessageLock)
    {
        // Handle the message here.
    }
}
</code></pre>
","java"
"649",29048568,"<p>to extend a little the answer: </p>

<p>Python manage lifetime by reference counting. When an object has no references it'll be destructed or finalized and released. 
In Java I think that happens exactly the same</p>
","java"
"650",3356554,"<p>This is the opensource solution Google uses to do IPC between Java and Python.
<a href=""https://code.google.com/p/protobuf/"" rel=""nofollow"">https://code.google.com/p/protobuf/</a></p>

<p>Recommended.</p>
","java"
"651",1801459,"<p><strong>One line solution in Python</strong>.<br>
Using lists-comprehesion:</p>

<pre><code>&gt;&gt;&gt; L = [2, 1, 4, 3, 5, 1, 2, 1, 1, 6, 5]
&gt;&gt;&gt; M = []
&gt;&gt;&gt; zip(*[(e,M.append(e)) for e in L if not e in M])[0]
(2, 1, 4, 3, 5, 6)
</code></pre>
","java"
"652",5705378,"<p>If I take 30K points and 5 dimensions, which is 100x more work.</p>

<pre><code>int number_of_points = 30000;
int dimensions = 5;
double SOME_THRESHOLD = 0.1;

long start = System.nanoTime();
double random_points[][] = new double[number_of_points][dimensions];
for (int i = 0; i &lt; number_of_points; i++)
    for (int d = 0; d &lt; dimensions; d++)
        random_points[i][d] = Math.random();

double p1[], p2[];
Comparator&lt;double[]&gt; compareX = new Comparator&lt;double[]&gt;() {
    @Override
    public int compare(double[] o1, double[] o2) {
        return Double.compare(o1[0], o2[0]);
    }
};
Arrays.sort(random_points, compareX);

double[] key = new double[dimensions];
int count = 0;
for (int i = 0; i &lt; number_of_points; i++) {
    p1 = random_points[i];
    key[0] = p1[0] + SOME_THRESHOLD;
    int index = Arrays.binarySearch(random_points, key, compareX);
    if (index &lt; 0) index = ~index;
    NEXT: for (int j = i + 1; j &lt; index; j++) {
        p2 = random_points[j];

        double sum_of_squares = 0;
        for (int d = 0; d &lt; dimensions; d++) {
            sum_of_squares += (p2[d] - p1[d]) * (p2[d] - p1[d]);
            if (sum_of_squares &gt; SOME_THRESHOLD * SOME_THRESHOLD) 
                continue NEXT;
        }

        //...else do something with p1 and p2
        count++;
    }
}
long time = System.nanoTime() - start;
System.out.println(""Took "" + time / 1000 / 1000 + "" ms. count= "" + count);
</code></pre>

<p>Prints</p>

<pre><code>Took 1549 ms. count= 20197
</code></pre>
","java"
"653",3584945,"<p>If strings are mutable, then many consumers of a string will have to to make copies of it.  If strings are immutable, this is far less important (unless immutability is enforced by hardware interlocks, it might not be a bad idea for some security-conscious consumers of a string to make their own copies in case the strings they're given aren't as immutable as they should be).</p>

<p>The StringBuilder class is pretty good, though I think it would be nicer if it had a ""Value"" property (read would be equivalent to ToString, but it would show up in object inspectors; write would allow direct setting of the whole content) and a default widening conversion to a string.  It would have been nice in theory to have MutableString type descended from a common ancestor with String, so a mutable string could be passed to a function which didn't care whether a string was mutable, though I suspect that optimizations which rely on the fact that Strings have a certain fixed implementation would have been less effective.</p>
","java"
"654",4083554,"<p>This kind of question can get very argumentative... For enterprise software most of time the key factor is political, not technical.</p>

<p>If you own the business, stick with the technology that best fits your vision. If not, use Java - it is politically safer.</p>

<p>On the technical field, it is almost a tie. </p>
","java"
"655",4279560,"<p>I ran into this problem, too.  There's a gotcha that the other answerers are unaware of.  If the Java <em>class</em> doesn't have the keyword <code>public</code>, then its static methods will not be available to Jython.  This is confusing because it's independent of whether the methods themselves are public, and other ways of accessing the not-explicitly-public class work, such as instantiation.  In summary, do this:</p>

<pre><code>public class foo {
    public static void bar() { ... }
}
</code></pre>

<p>not this:</p>

<pre><code>class foo {
    public static void bar() { ... }
}
</code></pre>
","java"
"656",5468889,"<ul>
<li><p>With Java, I would start from <a href=""http://commons.apache.org/net/api/org/apache/commons/net/ftp/FTPClient.html"" rel=""nofollow"">Apache Commons FTPClient</a>.</p></li>
<li><p>With Python, I would start form <a href=""http://docs.python.org/library/ftplib.html"" rel=""nofollow"">ftplib</a>.</p></li>
<li><p>With C++, you may find the answer <a href=""http://stackoverflow.com/questions/1244095/c-ftp-library"">here on SO</a>.</p></li>
</ul>
","java"
"657",6970359,"<blockquote>
  <p>1) Do you think that would work for cpu-demanding and highly repetitive tasks? Or would the overhead added by the pipe-communication be too heavy?</p>
</blockquote>

<p>Depends on your task. If this is a typical NLP app where you have a large model loaded in memory and you only communicate relatively small pieces of data (strings in, label sequences/parse trees out), it may work. Pipe communication is hard to get right, though, since there's a lot of buffering and synchronization issues you have to tackle. Python is a very good glue language, but it doesn't solve everything.</p>

<blockquote>
  <p>2) Is there any other (preferably simple) architecture that you would suggest?</p>
</blockquote>

<p>Make your NLP components services and connect to them via REST interfaces. There are off-the-shelf tools that do this, e.g. <a href=""http://ilk.uvt.nl/clam/"" rel=""nofollow"">CLAM</a>. <a href=""http://irmen.home.xs4all.nl/pyro/"" rel=""nofollow"">Pyro</a> and <a href=""http://www.freenet.org.nz/python/spiro/"" rel=""nofollow"">SPIRO</a> make communication between Java and Python even more direct and might be easier to use than HTTP/REST (but YMMV).</p>

<p>The parts that are written in C/C++ can also be integrated with CPython using <a href=""http://cython.org/"" rel=""nofollow"">Cython</a>. Don't start implementing things in C or C++ because you <em>think</em> they'll be faster, though; you can also implement them in Python first, then see if you can get the desired performance with NumPy and/or Cython.</p>
","java"
"658",28527617,"<p>Thanks to @RemeesMSyde comment.</p>

<p>I put the method into an AsyncTask and it now works. </p>

<p>This is the code I have used.</p>

<pre><code>class SendKeyStroke extends AsyncTask&lt;String, String, String&gt; {
    @Override
    protected String doInBackground(String... letter) {
        try {
            URL keyB = new URL(""http://192.168.0.37:5000/keyboard/"" + letter[0]);
            System.out.println(keyB.toString());

            URLConnection kb = keyB.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(kb.getInputStream(), ""UTF-8""));

            String inputLine;
            StringBuilder a = new StringBuilder();
            while ((inputLine = in.readLine()) != null) {
                a.append(inputLine);
            }
            in.close();
        } catch(Exception ex) {

        }

        return null;
    }
}
</code></pre>
","java"
"659",918359,"<p>You're not really testing Java vs. Python, you're testing <code>java.util.HashSet</code> using autoboxed Integers vs. Python's native set and integer handling.</p>

<p>Apparently, the Python side in this particular microbenchmark is indeed faster.</p>

<p>I tried replacing HashSet with <code>TIntHashSet</code> from <a href=""http://trove4j.sourceforge.net/"">GNU trove</a> and achieved a speedup factor between 3 and 4, bringing Java slightly ahead of Python.</p>

<p>The real question is whether your example code is really as representative of your application code as you think. Have you run a profiler and determined that most of the CPU time is spent in putting a huge number of ints into a HashSet? If not, the example is irrelevant. Even if the only difference is that your production code stores other objects than ints, their creation and the computation of their hashcode could easily dominate the set insertion (and totally destroy Python's advantage in handling ints specially), making this whole question pointless.</p>
","java"
"660",4111756,"<blockquote>
  <p>But then I thought, there is only ""in""
  and ""out"". Maybe there is only
  ""create"" and ""delete"". Cause GET and
  PUT are verbs that could be replaced
  with ""create a read"" and ""create a
  change"".</p>
</blockquote>

<p>You could do this. You can go even further, and do everything with a <code>POST</code>.  You can then have an envelope inside your HTTP Request, that says the operation you wanted to perform. You could even have just one endpoint, and have as many different operations according to the content of your HTTP Request.  You could have <code>createBook</code>, <code>updateBook</code>, <code>getAllBooks</code>, and so on.</p>

<p>And you have <code>SOAP</code>. </p>

<p>As someone who has had to build, maintain and code against SOAP and RESTful web services, do yourself (and everyone else) a favour, and use REST.</p>
","java"
"661",452969,"<p>It seems you're approaching this from the middle instead of the beginning. What are you really trying to do? Finding the class associated with a given string is a means to an end.</p>

<p>If you clarify your problem, which might require your own mental refactoring, a better solution may present itself.</p>

<p>For instance: Are you trying to load a saved object based on its type name and a set of parameters? Python spells this unpickling and you should look at the <a href=""http://docs.python.org/library/pickle.html"" rel=""nofollow"">pickle module</a>. And even though the unpickling process does exactly what you describe, you don't have to worry about how it works internally:</p>

<pre><code>&gt;&gt;&gt; class A(object):
...   def __init__(self, v):
...     self.v = v
...   def __reduce__(self):
...     return (self.__class__, (self.v,))
&gt;&gt;&gt; a = A(""example"")
&gt;&gt;&gt; import pickle
&gt;&gt;&gt; b = pickle.loads(pickle.dumps(a))
&gt;&gt;&gt; a.v, b.v
('example', 'example')
&gt;&gt;&gt; a is b
False
</code></pre>
","java"
"662",12902264,"<p><a href=""http://en.wikipedia.org/wiki/Geohash"" rel=""nofollow"">GeoHash</a> is another choice for you, which is quite each to implement, efficient as fast.</p>
","java"
"663",37464116,"<p>You can use Kivy at following link :</p>

<p><a href=""https://github.com/kivy/python-for-android"" rel=""nofollow"">Python for Android</a></p>

<p>It will can help u have a look to the following topic :</p>

<p><a href=""https://www.quora.com/How-can-I-integrate-a-Python-code-in-the-Android-Java-app"" rel=""nofollow"">How can I integrate a Python code in the Android Java app?</a></p>

<p>hope this help you.</p>
","java"
"664",20061633,"<p>You're passing <code>""-Xmx1536M -Xms1536M""</code> as a single argument.</p>

<p>That's not equivalent to this shell command:</p>

<pre><code>java -Xmx1536M -Xms1536M -jar /home/bekk/MServer/ForgeBukkit/MCPC.jar
</code></pre>

<p>… but to this one:</p>

<pre><code>java '-Xmx1536M -Xms1536M' -jar /home/bekk/MServer/ForgeBukkit/MCPC.jar
</code></pre>

<p>So, Java will get that <code>'-Xmx1536M -Xms1536M'</code> as its <code>argv[1]</code>, instead of getting one flag in <code>argv[1]</code> and the next in <code>argv[2]</code>. And it will interpret that one giant flag arg as you trying to set <code>mx</code> to <code>'1536M -Xms1536M'</code>, which is not a valid maximum heap size.</p>

<p>To fix it, put each argument in its own string in the list:</p>

<pre><code>[""java"", ""-Xmx1536M"", ""-Xms1536M"", ""-jar"", ""/home/bekk/MServer/ForgeBukkit/MCPC.jar""]
</code></pre>
","java"
"665",28793955,"<p>There was a very similar question asked on the <a href=""http://answers.unity3d.com/questions/166099/deploy-unity-web-application-to-google-app-engine.html"" rel=""nofollow"">unity forums </a> (link attached ) . Hope it answers your question! </p>
","java"
"666",13019598,"<p>I think the problem is that in Java, you're using the raw bytes as the key (only converting them to a hex string for output):</p>

<pre><code>System.out.println(""Key is..."" + bytesToHex(keyBytes) + ""\n"");
// ...
SecretKeySpec macKey = new SecretKeySpec(keyBytes, ""RAW"");
</code></pre>

<p>But in Python, you're using the hex string:</p>

<pre><code>k = ""3132333435363738393031323334353637383930""
</code></pre>

<p>It looks like you can <a href=""http://stackoverflow.com/questions/443967/how-to-create-python-bytes-object-from-long-hex-string"">decode the hex string</a> with:</p>

<pre><code>raw_key = k.decode('hex')
</code></pre>
","java"
"667",3671827,"<p>A large code base in python without good test coverage might be an issue. But thats just one part of the image. It's all about people and suitable approaches to do the job.</p>

<p>Without </p>

<ul>
<li>Source Control</li>
<li>Bug Tracking</li>
<li>Unit Tests</li>
<li>Committed Team</li>
</ul>

<p>you might fail with any kind of language.</p>
","java"
"668",2870255,"<p>I created Paython: <a href=""https://github.com/abunsen/Paython"" rel=""nofollow"">https://github.com/abunsen/Paython</a></p>

<p>Supports a few different processors:</p>

<ol>
<li>Stripe</li>
<li>Authorize.net</li>
<li>First Data / Linkpoint</li>
<li>Innovative Gateway (from intuit)</li>
<li>Plugnpay</li>
<li>Samurai</li>
</ol>
","java"
"669",9462995,"<p>With respect to Cyprien, your question does have a real answer besides ""don't use Couchbase.""</p>

<p>Memcache allows many more data types than CouchDB. Specifically, you can Memcache an empty string, the string ""{"", the string ""0"", or the string ""{}"". Only the last one is a valid JSON object that you can use as a CouchDB document. AFAIK the way that Couchbase works is that if a string that you SET or ADD is the JSON representation of a valid CouchDB document, it stores it as a CouchDB document, otherwise it stores it as an attachment. [zIt's a design decision that I don't agree with (they could have just inserted a <code>$value</code> key into the CouchDB document) but it kind of makes sense given that you could be passing very large objects, actual attachments, over the protocol interface.] Regardless, the <code>""$att_reason"": ""invalid_json""</code> is your hint that this is happening.</p>

<p>The upcoming version of Couchbase, 2.0, now in developer preview, exposes almost all of the CouchDB functionality, except for Couch Apps (which are irrelevant if you're using Erlang anyways). So if you want to use that, you'll want to pass JSON of objects over the Memcache interface, but note that then you lose Memcache's atomic shortcuts (you'd need to do a compare-and-swap, which requires an extra network hop).</p>
","java"
"670",33681855,"<p>If in some cases you need to uses native library (which mysql should have), you can uses pure python implementation using PyMySQL, and include it in the deployment package of lambda.</p>

<p>More detail on how to create deployment package for python is here <a href=""https://docs.aws.amazon.com/lambda/latest/dg/lambda-python-how-to-create-deployment-package.html"" rel=""nofollow"">https://docs.aws.amazon.com/lambda/latest/dg/lambda-python-how-to-create-deployment-package.html</a>
See the advanced version.</p>

<p>For java, I guess it will work out of the box as long as you include all dependency in jar.</p>
","java"
"671",22165209,"<p>I guess this is what you are looking for:</p>

<pre><code>import serial
ser = serial.Serial('/dev/tty.usbserial', 9600)
image = ser.read()

with open('/tmp/image', 'wb') as file:
    file.write(image)
</code></pre>

<p>Works only in Python 3, in Python 2 you need to use io.open. You may need to install serial-modul first if you don't already have it. I'm not familiar with the Arduino-C-dialect you need to send the image over the com-port...</p>
","java"
"672",1733073,"<p>This change went through the <a href=""http://mail.openjdk.java.net/pipermail/core-libs-dev/"">core-libs mailing list</a> when it went in so there is some discussion and useful links there.  Here's the <a href=""http://cr.openjdk.java.net/~martin/webrevs/openjdk7/timsort/"">web rev</a> with code review changes and also the <a href=""http://cr.openjdk.java.net/~martin/webrevs/openjdk7/timsort/timsort.patch"">original patch</a>.</p>

<p>The comments in the code say:</p>

<blockquote>
  <p>Implementation note: This implementation is a stable, adaptive,<br>
   iterative mergesort that requires far fewer than n lg(n) comparisons<br>
   when the input array is partially sorted, while offering the<br>
   performance of a traditional mergesort when the input array is<br>
   randomly ordered.  If the input array is nearly sorted, the<br>
   implementation requires approximately n comparisons.<br>
   Temporary storage requirements vary from a small constant for nearly sorted<br>
   input arrays to n/2 object references for randomly ordered input<br>
   arrays.  </p>
  
  <p>The implementation takes equal advantage of ascending and<br>
   descending order in its input array, and can take advantage of<br>
   ascending and descending order in different parts of the the same<br>
   input array.  It is well-suited to merging two or more sorted arrays:<br>
   simply concatenate the arrays and sort the resulting array.<br>
   The implementation was adapted from Tim Peters's list sort for Python<br>
   <a href=""http://svn.python.org/projects/python/trunk/Objects/listsort.txt"">TimSort</a>.  It uses techiques from Peter McIlroy's ""Optimistic<br>
   Sorting and Information Theoretic Complexity"", in Proceedings of the<br>
   Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474,<br>
   January 1993.  </p>
</blockquote>

<p>Buried in there is the <a href=""http://svn.python.org/projects/python/trunk/Objects/listsort.txt"">very useful link to the Python implementation details</a>, and I think that's a great place to start, followed by the code.  To be incredibly high level about it, timsort improves performance by noticing runs of sorted data and taking advantage of that structure during the sort.</p>
","java"
"673",4279560,"<p>Try using</p>

<pre><code>Foo.run_static_method()
</code></pre>
","java"
"674",4662091,"<p>No. </p>

<p>But this is why Martin Odersky created <a href=""http://www.scala-lang.org"">Scala</a>. He's even said that one of his goals for Scala is that it be the Python of the Java world. Scala compiles to Java bytecode and easily interops with Java compiled classes. </p>

<p>If that's not an option, you could take a look at the <a href=""http://commons.apache.org/collections/"">Commons Collection Library</a>.</p>
","java"
"675",8786842,"<p>While I'm all for the ""HTML5 &amp; JS"", you can consider <a href=""http://www.jython.org/"" rel=""nofollow"">Jython</a> and simply write a Java Applet in Python (2.2.3, but...) Java is not only a language, so you're free to choose.</p>
","java"
"676",21934,"<p>Garbage collection is faster (more time efficient) than reference counting, if you have enough memory. For example, a copying gc traverses the ""live"" objects and copies them to a new space, and can reclaim all the ""dead"" objects in one step by marking a whole memory region. This is very efficient, <em>if</em> you have enough memory. Generational collections use the knowledge that ""most objects die young""; often only a few percent of objects have to be copied.</p>

<p>[This is also the reason why gc can be faster than malloc/free]</p>

<p>Reference counting is much more space efficient than garbage collection, since it reclaims memory the very moment it gets unreachable. This is nice when you want to attach finalizers to objects (e.g. to close a file once the File object gets unreachable). A reference counting system can work even when only a few percent of the memory is free. But the management cost of having to increment and decrement counters upon each pointer assignment cost a lot of time, and some kind of garbage collection is still needed to reclaim cycles.</p>

<p>So the trade-off is clear: if you have to work in a memory-constrained environment, or if you need precise finalizers, use reference counting. If you have enough memory and need the speed, use garbage collection.</p>
","java"
"677",12155573,"<p>Simple: Generate two random numbers, one for latitude and one for longitude, inside the bounding rectangle of the map, for each point.</p>
","java"
"678",4251478,"<p>You can use <a href=""http://www.jython.org/"" rel=""nofollow"">Jython</a> or <a href=""http://www.scala-lang.org/"" rel=""nofollow"">Scala</a>, which drops most of curly braces and semicolons (as far as dots and parenthesis). Their syntax is much more readable, and you still all the power of JVM.</p>

<p>Though, if you need exactly translator (to save it as a plain Java code), you can easily write such translator by yourself. Read input file line by line, counting indents, and each time it changes, delete colon at the end of the string (if needed) and insert curly brace: opening brace for bigger indent and closing for smaller. (It doesn't take into account several possible cases, but most of them is considered as bad style.)</p>
","java"
"679",4575645,"<p>Apache and Wolfram divide by N-1 rather than N.  This is a degrees of freedom adjustment, since you estimate µ. By dividing by N-1 you obtain an unbiased estimate of the population standard deviation.  You can change NumPy's behavior using the <code>ddof</code> option.</p>

<p>This is described in the NumPy documentation:</p>

<blockquote>
  <p>The average squared deviation is
  normally calculated as x.sum() / N,
  where N = len(x). If, however, ddof is
  specified, the divisor N - ddof is
  used instead. In standard statistical
  practice, ddof=1 provides an unbiased
  estimator of the variance of the
  infinite population. ddof=0 provides a
  maximum likelihood estimate of the
  variance for normally distributed
  variables. The standard deviation
  computed in this function is the
  square root of the estimated variance,
  so even with ddof=1, it will not be an
  unbiased estimate of the standard
  deviation per se.</p>
</blockquote>
","java"
"680",31696857,"<p>I am looking at 3 alternatives now and would love to hear more on this subject:</p>

<p><a href=""http://jxcore.com/home/"" rel=""nofollow"">http://jxcore.com/home/</a> - ""JXcore is a Node.JS fork with additional features."" it also supports running nodeJS code on other platforms</p>

<p><a href=""https://jaredallard.me/nexe/"" rel=""nofollow"">https://jaredallard.me/nexe/</a> - ""Compile your Node.js project. No sources aboard.""</p>

<p><a href=""http://enclosejs.com/"" rel=""nofollow"">http://enclosejs.com/</a> - ""Compile your Node.js project. No sources aboard.""</p>
","java"
"681",29668262,"<p>OAEP padding has two parameters:</p>

<ul>
<li>message digest algorithm</li>
<li>mask generation function</li>
</ul>

<p>I see in Java you use SHA-256 and MGF1 with SHA-1 hash. They must be not matching to parameters used by Python.</p>

<p>Difference between Python and Java is that Python code uses the same digest for message digesting and mask digesting. While Java (Sun provider and BouncyCastle provider) use SHA-1 for mask digesting by default. So one need to specify all parameters explicitly:</p>

<pre><code>byte[] cipherTextBytes = DatatypeConverter.parseBase64Binary(cipherText);
byte[] privateKeyBytes = DatatypeConverter.parseBase64Binary(privateKeyStr);

KeyFactory kf = KeyFactory.getInstance(""RSA"");
PKCS8EncodedKeySpec ks = new PKCS8EncodedKeySpec(privateKeyBytes);
PrivateKey privateKey = kf.generatePrivate(ks);

Cipher c = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"");
c.init(Cipher.DECRYPT_MODE, privateKey, new OAEPParameterSpec(""SHA-256"",
        ""MGF1"", MGF1ParameterSpec.SHA256, PSource.PSpecified.DEFAULT));
byte[] plainTextBytes = c.doFinal(cipherTextBytes);
String plainText = new String(plainTextBytes);

System.out.println(plainText);
</code></pre>
","java"
"682",19542862,"<p>Using the <a href=""http://stackoverflow.com/a/19330461/208880"">AutoEnum recipe</a>, your code could look like this:</p>

<pre><code>class Role(AutoEnum):

    SCOUT = 4
    SOLDIER = 4
    DEMOMAN = 2
    MEDIC = 2

    def __init__(self, max_players):
        self.max_players = max_players
</code></pre>

<p>And now you have the benefits of the new Python Enum (<a href=""https://pypi.python.org/pypi/enum34"" rel=""nofollow"">backported if you don't have 3.4</a>):</p>

<pre><code>--&gt; Role.SCOUT
&lt;Role.SCOUT: 3&gt;
--&gt; Role.SCOUT.max_players
4
</code></pre>
","java"
"683",842075,"<p>I would go with Qt. It works on all the major platforms, and it's being continually improved. You can also get started really fast.
There are bindings for Java, Ruby and Python.<br />
Plus it's free if you're writing open source programs.</p>
","java"
"684",26833363,"<p>In Java, <a href=""https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.2.3"" rel=""nofollow""><code>double</code></a> cannot accurately represent 2^1000. As a floating-point number, <code>Math.pow(2,1000)</code> is <code>1.0715086071862673E301</code>.</p>

<p>To get the result that you want, use <a href=""https://docs.oracle.com/javase/8/docs/api/java/math/BigInteger.html"" rel=""nofollow""><code>BigInteger</code></a> which preserves the actual value of 2^1000.</p>

<pre><code>public static BigInteger sumDigits(BigInteger n) {
    BigInteger num = n;
    BigInteger sum = BigInteger.ZERO;
    BigInteger ten = BigInteger.valueOf(10);
    while (num.compareTo(BigInteger.ZERO) &gt; 0) {
        sum = sum.add(num.mod(ten));
        num = num.divide(ten);
    }
    return sum;
}

public static void main(String[] args) {
    System.out.println(sumDigits(BigInteger.valueOf(2).pow(1000)));
}
</code></pre>

<p>The output of the above code is <code>1366</code>.</p>
","java"
"685",3685347,"<p>Jython is already mostly Python; only code that uses some core libraries and most third-party libraries will have to be modified, with corresponding Java packages or classes used for those instead.</p>
","java"
"686",28776447,"<p>Maybe you could use a <code>dict</code> in python with the last mo e as your keys and the list of moves, sorted by priority as values. </p>

<p>Then you could additionaly save the last move and iterate over the corresponding list and do what you need to do with them.</p>
","java"
"687",3255330,"<p><strong>Answer to the First Question:</strong></p>

<p>check this question and answers on Stack Overflow:</p>

<p><a href=""http://stackoverflow.com/questions/668666/when-a-new-row-in-database-is-added-an-external-command-line-program-must-be-inv"">When a new row in database is added, an external command line program must be invoked</a></p>

<p>In theory, a simple user-defined function could be used to fire a 'row changed' message to a message broker / queue. But this involves external systems (at least a network subsystem) which can fail - and bad things can happen.</p>

<p>A different solution which does not require dangerous modifications to the database system would be a multi-tiered design for the application. The server application which hosts the business logic then needs to generate 'database content changed' events, post them to a publish and subscribe message channel (aka 'topic') on the message broker so that every client will receive a copy of this message immediately or if the client reconnects (using '<a href=""http://docs.oracle.com/javaee/1.4/api/javax/jms/Session.html#createDurableSubscriber%28javax.jms.Topic,%20java.lang.String%29"" rel=""nofollow"">durable subscriptions</a>').  </p>

<hr>

<p>I wrote a related blog article about this topic here: <a href=""http://mikejustin.wordpress.com/2012/11/06/firebird-database-events-and-message-oriented-middleware/"" rel=""nofollow"">Firebird Database Events and Message-oriented Middleware</a> </p>

<p><strong>Answer to the Second Question:</strong></p>

<p>The creators of <a href=""http://www.secondlife.com/"" rel=""nofollow"">Second Life</a> have evaluated a couple of message brokers and published their results - for some of the products, Delphi client libraries exist or can be implemented using standard protocols: <a href=""http://wiki.secondlife.com/wiki/Message_Queue_Evaluation_Notes"" rel=""nofollow"">Message Queue Evaluation Notes</a></p>

<p>Since then, other products have been released, some of them can also be integrated with Delphi clients through non-Java protocols, for example:</p>

<ul>
<li><a href=""http://activemq.apache.org/index.html"" rel=""nofollow""><strong>Open Message Queue (OpenMQ) 4.4</strong></a>, which is the default <a href=""http://en.wikipedia.org/wiki/Java_Message_Service"" rel=""nofollow"">JMS</a> provider broker in the Sun GlassFish v3 application Server</li>
<li><a href=""http://jboss.org/hornetq/"" rel=""nofollow""><strong>JBoss HornetQ 2.1</strong></a> which will be the default JMS provider in JBoss application server 6. HornetQ 2.0.GA obtained scores up to 307% higher than previously published SPECjms2007 benchmark results, on the same server hardware and operating system set-up.</li>
</ul>

<p>A very popular open source message broker which can be used from Delphi, Java, PHP, C# (and other) clients is</p>

<ul>
<li><a href=""http://activemq.apache.org/index.html"" rel=""nofollow""><strong>Apache ActiveMQ 5.4.1</strong></a> - free <a href=""http://manning.com/snyder/"" rel=""nofollow"">introduction chapter</a> of ""ActiveMQ in Action"" by Bruce Snyder, Dejan Bosanac, and Rob Davies</li>
</ul>

<p>All brokers are designed for thousands of concurrent clients and tens of thousands of messages per second. They also typically support clustering and failover, though this is not part of the JMS specification.</p>

<p>If speed is not so important, but you need High availability (even if your internal system is down), <a href=""http://aws.amazon.com/sqs/"" rel=""nofollow"">Amazon Simple Queue Service (Amazon SQS)</a> is a cloud-based service which can be accessed using REST and Soap style interfaces.</p>
","java"
"688",19370236,"<p>This might be of interest, although I'm not certain under what conditions (if any) it performs best. The idea is that we're going to move each element into its correct place in the array (<code>0</code> to index 0, etc), until it becomes clear what is missing and what is extra.</p>

<pre><code>def findmissing(data):
    upto = 0
    gap = -1
    while upto &lt; len(data):
        #print data, gap
        if data[upto] == upto:
            upto += 1
            continue
        idx = data[upto]
        if idx is None:
            upto += 1
            continue
        data[upto], data[idx] = data[idx], data[upto]
        if data[upto] == data[idx]:
            print 'found dupe, it is', data[upto]
            data[upto] = None
            gap = upto
            upto += 1
        elif data[upto] is None:
            gap = upto
    return gap

if __name__ == '__main__':
    data = range(1000)
    import random
    missing = random.choice(data)
    print missing
    data[missing] = data[0]
    data[0] = random.choice(data[1:])
    random.shuffle(data)
    print 'gap is', findmissing(data)
</code></pre>

<p>It's O(n) because every step <em>either</em> increments <code>upto</code> <em>or</em> moves a value into its ""correct"" place in the array, and each of those things can only happen <code>n</code> times.</p>
","java"
"689",1085791,"<p>Running Jython 2.5.1 with Sphinx in an Ant-script shows an error:</p>

<pre><code>     [exec] Making output directory...
     [exec] Running Sphinx v0.6.3
     [exec] Exception occurred:
     [exec]   File ""C:\jython\jython2.5.1\Lib\site-packages\sphinx-0.6.3-py2.5.egg\sphinx\highlighting.py"", line 15, in &lt;module&gt;
     [exec]     import parser
     [exec] ImportError: No module named parser
     [exec] The full traceback has been saved in ....\sphinx-err-o_qfvt.log, if you want to report the issue to the author.
     [exec] Please also report this if it was a user error, so that a better error message can be provided next time.
     [exec] Send reports to sphinx-dev@googlegroups.com. Thanks!
     [exec] Build finished. The HTML pages are in _build/html.
     [exec] Result: 1
</code></pre>

<p>uncommented the import parser in <code>highlighting.py</code> :</p>

<pre><code> [exec] Running Sphinx v0.6.3
 [exec] loading pickled environment... done
 [exec] building [html]: targets for 1 source files that are out of date
 [exec] updating environment: 0 added, 0 changed, 0 removed
 [exec] looking for now-outdated files... none found
 [exec] preparing documents... done
 [exec] writing output... [100%] index
 [exec] writing additional files... genindex search
 [exec] copying static files... done
 [exec] dumping search index... done
 [exec] dumping object inventory... done
 [exec] build succeeded.
 [exec] Build finished. The HTML pages are in _build/html.
 [exec] Result: 1
</code></pre>
","java"
"690",39525214,"<p>i assume you remote cluster is running and you are able to submit jobs on it from remote server itself. what you need is ssh tuneling. Keep in mind that it does not work with aws.</p>

<pre><code>ssh -f user@personal-server.com -L 2000:personal-server.com:7077 -N
</code></pre>

<p>read more here: <a href=""http://www.revsys.com/writings/quicktips/ssh-tunnel.html"" rel=""nofollow"">http://www.revsys.com/writings/quicktips/ssh-tunnel.html</a></p>
","java"
"691",24902919,"<p>Since it is Ubuntu, you can find all the configured Apache hosts in <code>/etc/apache/sites-enabled</code>. One of the files in there will be your web service, and will specify its directory.</p>
","java"
"692",21982389,"<p>In your Python script you are hex-decoding, as far as I can tell. However, in your Java code you are converting the string itself into bytes.</p>

<p>Try something like:</p>

<pre><code>String myEncryptionKey = ""&lt;48 chars long string&gt;"";
this.ks = new DESedeKeySpec(DatatypeConverter.parseHexBinary(myEncryptionKey));
</code></pre>

<p>Also, ensure you fully specify your cipher algorithm to avoid portability problems. So replace:</p>

<pre><code>Cipher.getInstance(""DESede"");
</code></pre>

<p>with something like:</p>

<pre><code>Cipher.getInstance(""DESede/ECB/PKCS5Padding"");
</code></pre>
","java"
"693",27217401,"<pre><code>public static int python_like_divisor(int x, int y) {
    final remainder = x % y;
    if(remainder != 0) {
        return (x - remainder) / y;
    }
    return x / y;
}
</code></pre>

<p>Some basic math knowledge is good ;)</p>

<p>With float-point (float, double etc.) values this method will not work properly.</p>
","java"
"694",1085898,"<p>The beauty of python nowdays is how well it communicates with other languages. For instance you can have both python and java on the same table with Jython. Of course jython even though it fully supports java libraries it does not support fully python libraries. But its an ideal solution if you want to mess with Java Libraries. It even allows you to mix it with Java code with no extra coding. </p>

<p>But even python itself has made some steps forwared. See ctypes for example, near C speed , direct accees to C libraries all of this without leaving the comfort of python coding. Cython goes one step further , allowing to mix c code with python code with ease, or even if you dont want to mess with c or c++ , you can still code in python but use statically type variables making your python programms as fast as C apps. Cython is both used and supported by google by the way.  </p>

<p>Yesterday I even found tools for python to inline C or even Assembly (see CorePy) , you cant get any more powerful than that. </p>

<p>Python is surely a very mature language, not only standing on itself , but able to coooperate with any other language with easy. I think that is what makes python an ideal solution even in a very advanced and demanding scenarios.</p>

<p>With python you can have acess to C/C++ ,Java , .NET and many other libraries with almost zero additional coding giving you also a language that minimises, simplifies and beautifies coding. Its a very tempting language.   </p>
","java"
"695",27965630,"<p>Turned out that Jython2.5.1 interpreter was mixed with the zip-of-the-standard-modules of Jython2.5.3  </p>

<p>I had the interpreter version and zip-of-standard-modules mixed-up before, but this time the interpreter had the minor version, which i didn't see comming.</p>
","java"
"696",35660738,"<p>Sockets block by default.  So when you call readline, it will never return null until the socket is closed. As coded, your code will wait until all the data is read from the client and the client closes the connection, then you turn it into 1 big string and return it from convertToString.  You need to rearchitect so that you handle the result of each readline call and display it, not treat everything as 1 giant string.</p>
","java"
"697",26833363,"<p>In Java, <a href=""https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.2.3"" rel=""nofollow""><code>double</code></a> cannot accurately represent 2^1000. As a floating-point number, <code>Math.pow(2,1000)</code> is <code>1.0715086071862673E301</code>.</p>

<p>To get the result that you want, use <a href=""https://docs.oracle.com/javase/8/docs/api/java/math/BigInteger.html"" rel=""nofollow""><code>BigInteger</code></a> which preserves the actual value of 2^1000.</p>

<pre><code>public static BigInteger sumDigits(BigInteger n) {
    BigInteger num = n;
    BigInteger sum = BigInteger.ZERO;
    BigInteger ten = BigInteger.valueOf(10);
    while (num.compareTo(BigInteger.ZERO) &gt; 0) {
        sum = sum.add(num.mod(ten));
        num = num.divide(ten);
    }
    return sum;
}

public static void main(String[] args) {
    System.out.println(sumDigits(BigInteger.valueOf(2).pow(1000)));
}
</code></pre>

<p>The output of the above code is <code>1366</code>.</p>
","java"
"698",13546052,"<p>When you launch <code>java</code> from Oracle's JVM, it sets <code>sun.boot.class.path</code> property to point to <code>rt.jar</code>, which normally contains all the <code>java.lang</code> stuff.</p>

<p>What you could do is to launch a simple Java program which retrieves <code>System.getProperty(""sun.boot.class.path"")</code> and gets where this file is supposed to be. Read more on this <a href=""http://www.tedneward.com/files/Papers/BootClasspath/BootClasspath.pdf"" rel=""nofollow"">here</a>.</p>

<p>Above should work if your environment is correct (<code>JAVA_HOME</code> is set, etc.). Otherwise, I'm afraid you have chicken and egg problem ;-)</p>
","java"
"699",4567692,"<p>Multiple-inheritance ain't frowned upon.  What is frowned upon is ""implementation inheritance"" (also known as ""code reuse""), because it leads to the unsolvable ""diamond problem"".  And because, well, code-reuse really hasn't much to do with OO.</p>

<p>What you want to do can be solved using multiple inheritance (and, say, delegation if you need to do ""code reuse"").</p>

<pre><code>interface A {

    void move();

}

interface B {

    void eat();

}

interface C {

    void think();

}

class One implements A { ... }

class Two implements B { ... }

class Three implements B, C { ... }
</code></pre>

<p>Any OOA/OOD using multiple inheritance can be trivially translated to Java.  The part where you say that you need to change the ""ability"" all the time is a bit scary: if, say, a <code>Car</code> can <code>move()</code>, why would it suddenly need to be able to <code>think()</code>?</p>
","java"
"700",21729173,"<p>Have a look at the <a href=""http://doc.algotrader.ch/javadoc/ch/algotrader/esper/aggregation/GenericTALibFunction.html"" rel=""nofollow"">AlgoTrader GenericTALibFunction javadoc</a></p>

<p>Also, try re-writing your statement like this:</p>

<pre><code>select
engineStrategy.name as strategyName, 
indexTick.security.id as underlayingid,
indexTick.currentValue as underlayingSpot
from pattern [every (indexTick=Tick(security.isin=underlayingIsin) -&gt; indicator=Indicator(indicator.value &gt; 0, prior(1, indicator.value) &lt;= 0))];
</code></pre>

<p>Hope this helps</p>
","java"
"701",8927063,"<p>Java's garbage collection model is different: while Python uses reference-counting as its main garbage collector method, Java doesn't.</p>

<p>Java uses what is called ""tracing"" garbage collectors: <a href=""http://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29#Tracing_garbage_collectors"" rel=""nofollow"">Wikipedia</a>.</p>

<p>With this in mind, the closest equivalents to <code>INCREF</code> and <code>DECREF</code> are probably <code>NewGlobalRef</code> and <code>DeleteGlobalRef</code>.</p>

<p>See <a href=""http://java.sun.com/docs/books/jni/html/refs.html"" rel=""nofollow"">Chapter 5</a> of the JNI manual.</p>
","java"
"702",6787378,"<ol>
<li><p>If you're going to use Jython then you should use Jython.  </p>

<p><code>jython django-admin.py startproject testing</code></p></li>
<li><p>Spring and Hibernate have nothing to do with Jython.</p></li>
<li><p><a href=""http://wiki.python.org/jython/WhyJython"" rel=""nofollow"">""Why Jython""</a></p></li>
</ol>
","java"
"703",1085791,"<p>to run sphinx on jython i had to do some changes:</p>

<ol>
<li><p>in the highlighting.py file:</p>

<p>uncomment <code>import parser</code> [line 15?]</p>

<p>uncomment the use of parser in PygmentsBridge.try_parse
(<code>whole try / except</code> ) [line 159 - 164?]</p>

<p>add an <code>return True</code> to PygmentsBridge.try_parse</p>

<p>(try_parse is now useless ?!)</p></li>
<li><p>in the <code>util/__init__.py</code> adding <code>err.errno == 0</code> in <code>ensuredir</code> (win32 only)</p>

<p>if not err.errno == 17 and not err.errno == 0:</p></li>
</ol>

<p><hr /></p>

<p>opened an issue:</p>

<p><a href=""http://bitbucket.org/birkenfeld/sphinx/issue/265/sphinx-doesnt-run-with-jython251"" rel=""nofollow"">http://bitbucket.org/birkenfeld/sphinx/issue/265/sphinx-doesnt-run-with-jython251</a></p>
","java"
"704",4567692,"<p>Multiple inheritance is almost always a bad idea, as its effects can usually be achieved through other mechanisms. Based upon your description of the problem, it sounds like you want to</p>

<ol>
<li>Use interfaces to define behavior (public interface A) in this scenario, each behavior should probably have its own interface. </li>
</ol>

<p>If 2 behaviors are tightly coupled (say A &amp; B), define an interface that implements those two atomic interfaces (public interface CombinedAandB extends A, B) </p>

<ol>
<li><p>Define an abstract base class that implements the interface to provide default implementations for behaviors</p>

<pre><code>public abstract class BaseAB implements A, B
{
   @Override 
   public void A() { add(0,1); }


<pre><code>   @Override
   public void B() {add(1,0); }


   private void add(int a, int b) //it doesn't return. no soup for you.
   { a + b; //If you know why this is wrong, high five yourself. }
</code></pre>

}
</code></pre></li>
<li><p>Define a concrete class that extends the abstract base class, implements another interface, and provides its own behavior. </p>

<p>public class IDoABAndC extends BaseAB implements C
{
  //stuff, etc
}</p></li>
</ol>
","java"
"705",4301454,"<p>Python's <a href=""http://networkx.lanl.gov/"" rel=""nofollow"">networkx</a> package has a number of <a href=""http://networkx.lanl.gov/reference/generators.html"" rel=""nofollow"">random graph generation</a> methods.</p>
","java"
"706",28574183,"<p>This task is called named entity reconition problem.</p>

<p>EDIT: There is no clean definition of NER in NLP community, so one can say this is not NER task, but instance of more general sequence labeling problem. Anyway, there is still no tool that can do this out of the box.</p>

<p>Out of the box, Standford NLP can only recognize following types: </p>

<blockquote>
  <p>Recognizes named (PERSON, LOCATION, ORGANIZATION, MISC), numerical
  (MONEY, NUMBER, ORDINAL, PERCENT), and temporal (DATE, TIME, DURATION,
  SET) entities</p>
</blockquote>

<p>so it is not suitable for solving this task. There are some commercial solutions that possible can do the job, they can be readily found by googling ""product name named entity recognition"", some of them offer free trial plans. I don't know any free ready to deploy solution.</p>

<p>Of course, you can create you own model by hand-annotating about 1000 or so product name containing sentences and training some classifier like Conditional Random Field classifier with some basic features (<a href=""http://nlp.stanford.edu/software/crf-faq.shtml#a"" rel=""nofollow"">here is documentation page</a> that explains how to that with stanford NLP). This solution should work reasonable well, while it won't be perfect of course (no system will be perfect but some solutions are better then others). </p>

<p>EDIT: This is complex task per se, but not <em>that</em> complex unless you want state-of-the art results. You can create reasonable good model in just 2-3 days. Here is (example)  step-by-step instruction how to do this using open source tool:</p>

<ul>
<li>Download <a href=""https://code.google.com/p/crfpp/"" rel=""nofollow"">CRF++</a> and look at provided examples, they are in a simple text format</li>
<li>Annotate you data in a similar manner</li>
</ul>

<pre>
    a OTHER 
    glove PRODUCT 
    comprising OTHER
    ... </pre> 

<p>and so on. </p>

<p>Spilt you annotated data into two files train (80%) and dev(20%)</p>

<ol start=""3"">
<li>use following baseline template features (paste in template file)</li>
</ol>

<pre>    

    U02:%x[0,0]
    U01:%x[-1,0]
    U01:%x[-2,0]
    U02:%x[0,0]
    U03:%x[1,0]
    U04:%x[2,0]
    U05:%x[-1,0]/%x[0,0]
    U06:%x[0,0]/%x[1,0]

</pre>

<p>4.Run </p>

<pre><code>crf_learn template train.txt model
crf_test -m model dev.txt  &gt; result.txt 
</code></pre>

<ol start=""5"">
<li>Look at result.txt. one column will contain your hand-labeled data and other - machine predicted labels. You can then compare these, compute accuracy etc. After that you can feed new unlabeled data into crf_test and get your labels. </li>
</ol>

<p>As I said, this won't be perfect, but I will be very surprised if that won't be reasonable good (I actually solved very similar task not long ago) and certanly better just using few keywords/templates                  </p>

<p>ENDNOTE: this ignores many things and some best-practices in solving such tasks, won't be good for academic research, not 100% guaranteed to work, but still useful for this and many similar problems as relatively quick solution.   </p>
","java"
"707",10404921,"<p>Use <a href=""http://redisson.org"" rel=""nofollow"">Redisson</a> it implements familiar <code>List</code>, <code>Queue</code>, <code>BlockingQueue</code>, <code>Deque</code> java interfaces in distributed approach provided by <a href=""http://redis.io"" rel=""nofollow"">Redis</a>. Example with a <code>Deque</code>:</p>

<pre><code>Redisson redisson = Redisson.create();

RDeque&lt;SomeObject&gt; queue = redisson.getDeque(""anyDeque"");
queue.addFirst(new SomeObject());
queue.addLast(new SomeObject());
SomeObject obj = queue.removeFirst();
SomeObject someObj = queue.removeLast();

redisson.shutdown();
</code></pre>

<p>Other samples:</p>

<p><a href=""https://github.com/mrniko/redisson/wiki/7.-distributed-collections/#77-list"" rel=""nofollow"">https://github.com/mrniko/redisson/wiki/7.-distributed-collections/#77-list</a><br>
<a href=""https://github.com/mrniko/redisson/wiki/7.-distributed-collections/#78-queue"" rel=""nofollow"">https://github.com/mrniko/redisson/wiki/7.-distributed-collections/#78-queue</a>  <a href=""https://github.com/mrniko/redisson/wiki/7.-distributed-collections/#710-blocking-queue"" rel=""nofollow"">https://github.com/mrniko/redisson/wiki/7.-distributed-collections/#710-blocking-queue</a>  </p>
","java"
"708",918359,"<p>You're not really testing Java vs. Python, you're testing <code>java.util.HashSet</code> using autoboxed Integers vs. Python's native set and integer handling.</p>

<p>Apparently, the Python side in this particular microbenchmark is indeed faster.</p>

<p>I tried replacing HashSet with <code>TIntHashSet</code> from <a href=""http://trove4j.sourceforge.net/"">GNU trove</a> and achieved a speedup factor between 3 and 4, bringing Java slightly ahead of Python.</p>

<p>The real question is whether your example code is really as representative of your application code as you think. Have you run a profiler and determined that most of the CPU time is spent in putting a huge number of ints into a HashSet? If not, the example is irrelevant. Even if the only difference is that your production code stores other objects than ints, their creation and the computation of their hashcode could easily dominate the set insertion (and totally destroy Python's advantage in handling ints specially), making this whole question pointless.</p>
","java"
"709",10440777,"<ul>
<li>Python 2 string literals like 'abc' and ""abc"" are ASCII.</li>
<li>Python 2 string literals like u'abc' and u""abc"" are unicode.</li>
<li>Python 3 string literals like 'abc' and ""abc"" are unicode.</li>
<li>Python 3 string literals like b'abc' and b""abc"" are a bytes type.</li>
</ul>

<p>Java uses unicode by default, similar to Python 3.</p>

<p>For interlanguage, interoperable crypto, you might check out <a href=""https://code.google.com/p/keyczar/"" rel=""nofollow"">https://code.google.com/p/keyczar/</a> .  There are simple examples of its use on that page.</p>
","java"
"710",1855320,"<p>Can you run your current Python scripts under <a href=""http://www.jython.org"">Jython</a> ? If so, that's probably the best way, since the Java library can be exposed directly into Jython as scriptable objects.</p>

<p>Failing that, there are a number of solutions listed <a href=""http://wiki.cacr.caltech.edu/danse/index.php/Communication%5Fbetween%5FJava%5Fand%5FPython"">here</a>.</p>
","java"
"711",4986273,"<p>You won't have unsigned types in Java. You could consider casting it to a short or an int instead.</p>
","java"
"712",9625597,"<p>Since you're already using Java, just use <a href=""http://docs.oracle.com/javase/6/docs/api/javax/swing/JFileChooser.html"" rel=""nofollow"">JFileChooser</a>.  Things to note:</p>

<ul>
<li>this is a Swing widget</li>
<li>it'll work on both Mac and Windows, but may look a little different</li>
<li>Swing can be a bit frustrating to work with (but so can any GUI toolkit, so this is a wash)</li>
<li>doesn't require any painful installation -- just create a <code>.jar</code> file and distribute that</li>
</ul>

<p>Here's the example given on that doc page:</p>

<p>JFileChooser provides a simple mechanism for the user to choose a file. For information about using JFileChooser, see How to Use File Choosers, a section in The Java Tutorial.</p>

<hr>

<p>Here's the code example given on the linked docs page:</p>

<blockquote>
  <p>The following code pops up a file chooser for the user's home
  directory that sees only .jpg and .gif images:</p>
</blockquote>

<pre><code>JFileChooser chooser = new JFileChooser();
FileNameExtensionFilter filter = new FileNameExtensionFilter(
    ""JPG &amp; GIF Images"", ""jpg"", ""gif"");
chooser.setFileFilter(filter);
int returnVal = chooser.showOpenDialog(parent);
if(returnVal == JFileChooser.APPROVE_OPTION) {
   System.out.println(""You chose to open this file: "" +
        chooser.getSelectedFile().getName());
}
</code></pre>
","java"
"713",3790142,"<p>Old question, new answer (for Java 8)</p>

<pre><code>    IntStream.range(0, 10).forEach(
        n -&gt; {
            System.out.println(n);
        }
    );
</code></pre>

<p>or with method references:</p>

<pre><code>IntStream.range(0, 10).forEach(System.out::println);
</code></pre>
","java"
"714",508657,"<p>For numeric data, <a href=""http://numpy.scipy.org/"" rel=""nofollow"">Numpy Arrays</a>:</p>

<pre><code>&gt;&gt;&gt; matrix1 = array(([0,1],[1,3]))
&gt;&gt;&gt; print matrix1
[[0 1]
[1 3]]
</code></pre>

<p>For general data (e.g. strings), you can use a list of lists, list of tuples, ...</p>

<pre><code>matrix2 = [['a','b'], ['x','y']]
</code></pre>
","java"
"715",3649577,"<p>I had the same error on Linux. It worked for me just executing </p>

<pre><code>export JAVA_HOME=/usr/lib/[*your_java_folder*]
</code></pre>

<p>Look at setup.py line 45:</p>

<pre><code>def setupLinux(self):        
self.javaHome = os.getenv(""JAVA_HOME"")
if self.javaHome is None :
    self.javaHome = '/usr/lib/jvm/java-1.5.0-sun-1.5.0.08' # Ubuntu linux
</code></pre>
","java"
"716",20352628,"<p>@alko is right. If you setting hadoop PATH or JAVA_HOME under your account, it's hard to directly solve it. Setting all envronment for root is complex and unnecessary.</p>

<p>But you can install pydoop under your account only. Install it to your ~/.local/lib/pythonX.X/site-packtes/pydoop-X.X.X/... path.</p>

<p>Use this command, if you download source tar file.</p>

<pre><code>python setup.py install --user
</code></pre>

<p>or this</p>

<pre><code>pip install pydoop --user
</code></pre>
","java"
"717",8263954,"<p>Have a look at a similar question recently posted to tesseract google group: <a href=""http://groups.google.com/group/tesseract-ocr/browse_thread/thread/70ad57cb37edabe0/"" rel=""nofollow"">http://groups.google.com/group/tesseract-ocr/browse_thread/thread/70ad57cb37edabe0/</a></p>
","java"
"718",1452652,"<p>You can build an runnable Java Web application within 5 to 10 minutes by using the following online Java web application generator:</p>

<p><a href=""http://www.webappexpress.net"" rel=""nofollow"">http://www.webappexpress.net</a></p>
","java"
"719",37127772,"<p>Typically Java classes in src/test/java (or your corresponding test sources directory) will not end up in a built artifact by maven by default. If you inspect the contents of the JAR, you will likely notice no compiled test classes, which is why maven can't find them.</p>

<p>If you really want your test source compiled into the JAR, there are plugins to help you. Particularly, the standard <a href=""https://maven.apache.org/plugins/maven-jar-plugin/examples/create-test-jar.html"" rel=""nofollow"">Maven JAR Plugin</a>.</p>

<p>However, I would suggest you consider carefully why you need test classes in a built artifact. The standard use of test suites is to test the main source code being built. There are some situations that have been argued where having tests in the final artifact are valid, but they are rare and usually can be worked around in other ways ( <a href=""http://stackoverflow.com/questions/16375489/how-to-package-test-classes-into-the-jar-without-running-them"">Related discussion</a> ).</p>
","java"
"720",1653419,"<p>Consider Tcl/Tk. I'm not sure how you define ""one binary that is executeable [sic] by all major desktop platforms"" but Tcl probably meets this as well as java, and likely better than any other scripting language.</p>

<p>Using the tcl packaging technology of starkits you can either a) create a single file that can be run on any platform that has an appropriate runtime engine (and they are available for all major and many minor platforms), or  you can package that platform-specific runtime engine and and cross-platform starkit into a single file executable for each platform.</p>

<p>The starkit technology is something other languages should aspire to. What you get is a complete, fully functional virtual file system within a single file. This lets you easily package up sound files, dll/.so files (which must be copied to disk for obvious (?) reasons), images, data, etc along with your executable code.</p>

<p>Tk, the graphical library, is very mature and has really good support on all platforms. Some people think it looks dated but those impressions are usually based on information that is at least 5 years old. Modern Tk looks quite good. For some examples see the <a href=""http://tkdocs.com/"" rel=""nofollow"">tkdocs</a> website. I's not clear whether you're more concerned with eye candy or functionality, but if it's functionality you're interested in then Tk is something to seriously consider. </p>

<p>Most agree that Tcl is an aquired taste but those that use it professionally usually swear by it. I've been doing wxPython programming the last several months and would switch back to tcl/tk in a heartbeat if given the opportunity. </p>
","java"
"721",15211284,"<p>Something like this might work in Perl, e.g.,</p>

<pre><code>my $found_method;
my $found_endpoint;

# Iterate over each line of the input .java file
while (&lt;&gt;) {
  $found_method = 0;
  $found_endpoint = 0;

  # Look for an @endpoint annotation, and capture what's between the
  # parenthesees.  Do the same for each annotation.
  if (/\@endpoint/i) {
    $found_endpoint = 1;
  } elsif (/\@path\(([^\)]+)\)/i) {
    $path = $+;
  } elsif (/\@consumes\(([^\)]+)\)/i) {
    $consumes = $+;
  } elsif (/\@produces\(([^\)]+)\)/i) {
    $produces = $+;
  } elsif (/\@typehint\(([^\)]+)\)/i) {
    $typehint = $+;

  # Look for a method definition (all on one line)
  } elsif (/\w+\s+\w+\(.*{/i) {
    $open_brackets = 1;

    # Skip over the bracketed method definition
    while ($open_brackets) {
      $found_method = 1;
      if (/{/) {
        $open_brackets++;
      } elsif (/{/) {
        $open_brackets--;
      }
    }
  }

  # If we just finished passing over an annotated method, output what we
  # found
  if ($found_method and  $found_endpoint) {
    print ""\npath = "" . $path;
    print ""\nconsumes = "" . $consumes;
    print ""\nproduces = "" . $produces;
    print ""\ntypehint = "" . $typehint;
  }
}
</code></pre>
","java"
"722",1746867,"<p>For your particular task, I'd suggest Python, mostly because of the existence of <a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">Beautiful Soup</a>, an excellent HTML parser that handles poorly formed documents.</p>
","java"
"723",12729828,"<p>You are correct in that runtime dynamic binding is entirely different conceptually from class inheritance.</p>

<p>But as I re-read your question, I don't think I would agree that ""Java and C++, runtime dynamic binding is implemented as class inheritance."" Class inheritance is simply the definition of broader behavior that includes existing behavior from existing classes. Further, runtime binding doesn't <em>necessarily</em> have anything to do with object orientation; it can refer merely to deferred method resolution.</p>

<p>Class inheritance refers to the ""template"" for how an object is built, with more and more refined behavior with successive subclasses. Runtime dynamic binding is merely a way of saying that a reference to a method (for example) is deferred until execution time. In a given language, a particular class may leverage runtime dynamic binding, but have inherited classes resolved at <em>compile</em> time. </p>

<p>In a nutshell, <em>Inheritance</em> refers to the <em>definition</em> or <em>blueprint</em> of an object. Runtime dynamic binding is, at its most basic level, merely a mechanism for resolving method calls at execution time.</p>

<p><strong>EDIT</strong> I do need to clarify one point on this: Java implements dynamic binding on <em>overridden</em> class methods, while C++ determines a type through polymorphism at runtime, so it is not accurate for me to say that dynamic binding has ""no relationship"" to class inheritance. At a ""macro"" level, they're not inherently related, but a given language might leverage it in its inheritance mechanism.</p>
","java"
"724",9519384,"<p>The concepts originated in the Lisp world, but just about any language can do it (certainly, if you have a repl, you can do this sort of stuff).  It's simply better known in the Lisp world.  I know there are slime-esque packages for haskell and ruby, and I would be very surprised if such a thing didn't exist for Python as well.</p>
","java"
"725",3671827,"<p>I've used Python for many projects, from a few hundred lines to several thousand lines. Dynamic typing is a great time saver and it makes OO concepts like polymorphism way easier to use. The type system does not make projects unmaintainable. If you have trouble imagining that, try writing a few things in Python and see how they go.</p>
","java"
"726",13039958,"<p>In Python (I'll only outline the steps so you can program it yourself. But of course feel free to ask if you step into problems):</p>

<ul>
<li>Use <a href=""http://docs.python.org/library/os.path.html#os.path.walk"" rel=""nofollow""><code>os.path.walk</code></a> to find all files (it gives you all files, regardless of their extension).</li>
<li>Note that it also gives you directories etc, so use <a href=""http://docs.python.org/library/os.path.html#os.path.isfile"" rel=""nofollow""><code>os.path.isfile</code></a> to skip them.</li>
<li>For each file:
<ul>
<li>Open it (<a href=""http://docs.python.org/library/functions.html#open"" rel=""nofollow""><code>open</code></a>). Do the following inside a <a href=""http://docs.python.org/reference/compound_stmts.html#the-with-statement"" rel=""nofollow""><code>with</code></a> statement to avoid having to close the file by hand.</li>
<li>You could first count the lines, then check for the comma thing, but that's probably slower, so:</li>
<li>Read the file line by line. For each line, do two things:</li>
<li>Count the lines. If you arrive at 5, go on with the next file.</li>
<li>Check if it matches the comma criterion. I'd use a <a href=""http://docs.python.org/library/re.html"" rel=""nofollow""><code>regular expression</code></a> for that. If it does not match, continue.</li>
<li>If you are at the end of the file, you were successful, so you can print the filename or whatever you want to do.</li>
</ul></li>
</ul>
","java"
"727",6141111,"<p>You should look into this <a href=""http://jackson.codehaus.org/"" rel=""nofollow"">http://jackson.codehaus.org/</a> and this <a href=""http://outerthought.org/blog/415-ot.html"" rel=""nofollow"">http://outerthought.org/blog/415-ot.html</a></p>
","java"
"728",215542,"<p>Also see <a href=""http://search.cpan.org/perldoc?Config::General"" rel=""nofollow"">Config::General</a>, which claims to be fully compatible with Apache configuration files. I use it to parse my Apache configuration files for automatic regression testing after configuration changes.</p>
","java"
"729",13436520,"<p>Use Log4J or message-driven logging framework versus <code>System.out.println()</code>.</p>

<p>Log4J uses a message event-model that guarantees ordering of messages.
Further, various 'appenders' can be used to log to a database or other output/file, allowing for separation by Java package and other attributes so the data are not mixed.</p>

<p>Also, along these lines, consider using a high-performance timer and/or do not attempt to measure very short (millisecond) events. The reason is that a call to <code>System.currentTimeMillis()</code> will just in turn call the operating system clock. On every OS there is some 'clock drift' and caching that goes on such that the underlying system function may return the same value, resulting in +/- 30 ms offsets in the actual time. To remedy this or increase accuracy, group the functions being measured into a large enough sample size and then divide by the number of iterations.</p>

<p>For example, perform 10K operations that average 1-2 milliseconds as one measured operation. Then divide by 10K to get time-per-operation.</p>

<p>Otherwise, again, a high-performance timer would be necessary.</p>
","java"
"730",29202316,"<p>The code below generates a file named myFile.java which contains ""Your Java Code"" under C:\Program Files. </p>

<p>The name ""myFile"" is based on the parameter $s.</p>

<p>And of course myFile.java will not be compiled successfully by javac. Because it contains invalid java code.</p>

<p>I'm not sure if the special characters (e.g., ""[, ], /, /, ;, (, ), "" ) in a java code will cause some problems with fwrite(). So I don't think it's a good idea to pass a complete java code by $_GET.</p>

<pre><code>&lt;?php
$solution=""Your Java Code"";
$PATH=""C:\\Program Files\\"";

// $s=$solution; // $s is the java file name, you shouldn't assign a java code ($solution) to your java file name
$s = ""myFile"";

$file = fopen($PATH . $s . "".java"", ""w"");
fwrite($file, $solution);
fclose($file);

echo ""&lt;br /&gt;"";
echo exec(""javac $s.java 2&gt;&amp;1"");
echo ""&lt;br /&gt;"";
echo exec(""java $s 2&gt;&amp;1"");
echo ""&lt;br /&gt;"";
echo shell_exec(""javac $s.java 2&gt;&amp;1 "");
echo ""&lt;br /&gt;"";

?&gt;
</code></pre>
","java"
"731",9712898,"<p>It is possible to raise the limits in Apache and PHP to handle files of this size. The basic HTTP upload mechanism does not offer progressive information, however, so I would usually consider this acceptable only for LAN-type connections.</p>

<p>The normal alternative is to locate a Flash or Javascript uploader widget. These have the bonus that they can display progressive information and will integrate well with a PHP-based website.</p>
","java"
"732",11178243,"<p>Generally, the decision shouldn't be one of speed - the Python classes will be implemented in terms of Java classes anyway, even if they don't inherit from them. So, the speed should be roughly comparable, and at most you would save a couple of method calls per operation. </p>

<p>The bigger question is what you plan on <em>doing</em> with your class. If you're using it with Python APIs, you'll want to use the Python types, or something that behaves like them so that <em>you</em> don't have to do the work of implementing the entire Mapping protocol (only the bits your class changes). If you're using Java APIs, you will certainly need to meet the static type checks - which means you'll need to inherit from Java's classes. </p>

<p>If this isn't easy to answer in your situation, start with the Python ones, since you  (correctly ;-) find them ""simpler and sexier"". If your class doesn't pass outside the boundaries of your project, then this should be trivial to change later if the speed really becomes an issue - and at that point, you might also be thinking about questions like ""could it help to implement it entirely at the Java level?"" which you've hopefully recognised would be premature optimisation to think about now.</p>
","java"
"733",20974729,"<p>I don't think Firefox profile would feature disabling such specific elements, but you can hard-code some lines of static logic that would remain consistent across the test case/project.</p>

<p>Like <strong>Click</strong> on the main page automatically closes the pop-up frame/alert msg on grooveshark.com</p>

<pre><code>    @Test
  public void testUntitled() throws Exception {
    driver.get(baseUrl + ""/#!/genre/Rap/1748""); //complete URL becomes http://grooveshark.com/#!/genre/Rap/1748
    driver.findElement(By.linkText(""more…"")).click(); // clicks a hyper-link which opens up that frame/pop-up
    driver.findElement(By.id(""lightbox-outer"")).click(); // clicks outside the opened-up frame, or simply clicks on the main page in background
  }
</code></pre>

<p><strong>lightbox-outer</strong> is the main page.</p>
","java"
"734",3812778,"<p>Try to read your code out loud (or at least in your head).</p>
","java"
"735",9859559,"<p><a href=""http://www.stack.nl/~dimitri/doxygen/index.html"" rel=""nofollow"">Doxygen</a>, which is written in C++, can parse Javadoc and <a href=""http://www.stack.nl/~dimitri/doxygen/customize.html#xmlgenerator"" rel=""nofollow"">output it as XML</a>. You could call it from Python and then transform the XML into whatever format you like. (This will be more efficient if you do it in C++ using the <code>doxmlparser</code>, but you can also do it in Python.)</p>
","java"
"736",795241,"<p>I can't compare memory footprint because it really depends on classes what you load/use. But what I can tell you that Python (IronPython 2.7 in particular) has real memory leak problems. Especially with third party well used ones like Financial.
When Java application/server runs without issues with rare cases which could be identified with common tools Python grows in memory constantly. </p>

<p>Memory dumps shows that Python itself as well as most of packages don't pay attention for common classes like String and keep them in different parts of the execution modules. It is hard and unwise to go through all these sources and fix all leaks.</p>

<p>I was trying a lot to fix the issues but finally gave in and simply restart application when it reaches some memory threshold.</p>
","java"
"737",7300148,"<p>Maven, you can explicitly specify which packages you would use in a java project</p>
","java"
"738",3040904,"<p>Here's the (verbose ;) ) Java variant:</p>

<pre><code>InputStream input = null;
OutputStream output = null;
try {
    input = new URL(""http://search.twitter.com/search.json?q=hi"").openStream();
    output = new FileOutputStream(""/output.json"");
    byte[] buffer = new byte[1024];
    for (int length = 0; (length = input.read(buffer)) &gt; 0;) {
        output.write(buffer, 0, length);
    }
    // Here you could append further stuff to `output` if necessary.
} finally {
    if (output != null) try { output.close(); } catch (IOException logOrIgnore) {}
    if (input != null) try { input.close(); } catch (IOException logOrIgnore) {}
}
</code></pre>

<p><strong>See also</strong>:</p>

<ul>
<li><a href=""http://java.sun.com/docs/books/tutorial/essential/io/"" rel=""nofollow"">Java IO tutorial</a></li>
<li><a href=""http://java.sun.com/docs/books/tutorial/networking/urls/readingWriting.html"" rel=""nofollow"">Java URLConnection tutorial</a></li>
<li><a href=""http://stackoverflow.com/questions/2793150/how-to-use-java-net-urlconnection-to-fire-and-handle-http-requests/2793153#2793153"">How to use URLConnection</a></li>
</ul>
","java"
"739",29015288,"<p>This may not be your main problem, but as a general best practice with JSON, the root value should always be a JSON Object, and not a scalar or Array. This avoids many, many problems with things like Java type erasure.
This is not to say that you can not make <code>List</code>s and such collections work, but that there is extra care needed with generic typing -- work that is unnecessary as long as the root value is an Object.</p>
","java"
"740",30581965,"<p>It indeed runs on only 1 thread. gevent uses greenlets, which are coroutines, not threads. There is only 1 stack at each given time (unless you use multithreading, and then use greenlets in each threads).</p>

<p>In your example above, whenever you call sleep or joinall, the current coroutine (greenlet) actually yields to the hub. Think about the hub as a central dispatcher, responsible to decide which coroutine will run next.</p>

<p>To convince yourself of that, remove the gevent.sleep(0) call, and you'll see that it behaves differently.</p>

<p>Note that unlike threads, the execution is deterministic, so if you run the program twice, it will execute in the exact same order.</p>
","java"
"741",26812945,"<h2>ASCII Escape Sequences</h2>

<p>This is a language independent option. The way it work is that you print some special characters which are interpreted by the terminal and it changes (for example) the color.</p>

<p>It wouldn't, however, help you with handling the keyboard input.</p>

<p><a href=""http://en.wikipedia.org/wiki/ANSI_escape_code"" rel=""nofollow"">More informations</a></p>

<p><a href=""http://stackoverflow.com/questions/287871/print-in-terminal-with-colors-using-python"">Related question on the StackOverflow</a></p>

<h2>ncurses</h2>

<p>This is a widely used library on the Linux and it's mostly used in C/C++ applications. However, the Python binding is available too.</p>

<p><a href=""http://en.wikipedia.org/wiki/Ncurses"" rel=""nofollow"">About ncurses</a></p>

<p><a href=""https://www.gnu.org/software/ncurses/"" rel=""nofollow"">ncurses homepage</a></p>

<p><a href=""http://tldp.org/HOWTO/NCURSES-Programming-HOWTO/"" rel=""nofollow"">ncurses tutorial</a></p>

<p><a href=""https://docs.python.org/2/howto/curses.html"" rel=""nofollow"">curses in Python</a></p>

<h2>lanterna</h2>

<p>A Java library similar to ncurses.</p>

<p><a href=""https://code.google.com/p/lanterna/"" rel=""nofollow"">project home</a></p>

<h2>blacken</h2>

<p>A Java library inspired by ncurses and primarily dedicated for the game development.</p>

<p><a href=""https://code.google.com/p/blacken/"" rel=""nofollow"">project home</a></p>

<hr>

<h2>Related StackOverflow Questions</h2>

<p><a href=""http://stackoverflow.com/questions/18177142/input-in-a-python-text-based-gui-tui"">Input in a Python text-based GUI (TUI)</a></p>

<p><a href=""http://stackoverflow.com/questions/287871/print-in-terminal-with-colors-using-python"">Print in terminal with colors using Python?</a></p>

<p><a href=""http://stackoverflow.com/questions/791261/python-text-user-interface"">Python Text User Interface</a></p>
","java"
"742",2977866,"<p>There are actually a lot of tools:
as other have said</p>

<ul>
<li>pylint : very very strict (imho too much), yet customizable</li>
<li>pep-8 : very good</li>
<li>pychecker</li>
<li>pyflakes: extremely fast, perfect when used in emacs with flymake.</li>
</ul>

<p>To format your code according to pep8 I can suggest you <a href=""http://pypi.python.org/pypi/PythonTidy"">PythonTidy</a></p>
","java"
"743",12187640,"<p>Kivy is good for this .... <a href=""http://kivy.org/"" rel=""nofollow"">http://kivy.org/</a> ... in fact its the only option ive seen</p>

<p>[edit] bah thats the same answer as the comment from Denizen ... lame</p>
","java"
"744",25153715,"<p>I had the same error. 
Look at the compiled source. In the <code>target</code> folder you need all the scripts of the mutlilang available to execute all of them.</p>

<p>Look at <code>target/classes/resources/</code> if there are any files. If not and if even you do not have the folder in <code>target/classes</code> copy the the resource folder from <code>multilang/resources</code> into the target path. </p>
","java"
"745",2328230,"<p>You have roughly 5 weeks to complete the project.  If you're confident the Java version would take 2 weeks, that leaves 3 weeks to flail around with the Python version until you have to give up.  I say go for it.  Python is relatively easy to pick up.  I think three weeks of work is enough to time to know whether you can finish by the deadline.</p>

<p>IMHO, this is a great excuse for you to learn a new language.  Keep updating your manager regularly with your progress.  I think the right decision will become apparent as time goes on.</p>
","java"
"746",17361261,"<p>There is no need for additional checks. Just configure your <a href=""http://docs.python.org/2/library/logging.html#logging.Logger.setLevel"" rel=""nofollow"">logging level</a>:</p>

<pre><code>&gt;&gt;&gt; import logging
&gt;&gt;&gt; root = logging.getLogger()
&gt;&gt;&gt; root.setLevel(logging.INFO)
&gt;&gt;&gt; root.addHandler(logging.StreamHandler())
&gt;&gt;&gt; logging.error(""test"")
test
&gt;&gt;&gt; logging.debug(""test"")
&gt;&gt;&gt;
</code></pre>

<p>Again, there is no need for additional checks (the source code taken from <code>logging/__init__.py</code>):</p>

<pre><code>class Logger(Filterer):
    ...
    def debug(self, msg, *args, **kwargs):
        """"""
        Log 'msg % args' with severity 'DEBUG'.

        To pass exception information, use the keyword argument exc_info with
        a true value, e.g.

        logger.debug(""Houston, we have a %s"", ""thorny problem"", exc_info=1)
        """"""
        if self.isEnabledFor(DEBUG):
            self._log(DEBUG, msg, args, **kwargs)
</code></pre>

<p>As you can see logging itself makes the check.</p>

<p>Hope that helps.</p>
","java"
"747",38563245,"<p>No, Python's set implementation has no such method; as you noted you'll have to test for presence separately:</p>

<pre><code>if obj not in setobj:
    setobj.add(obj)
</code></pre>

<p>or, what I usually do:</p>

<pre><code>if obj in setobj:
    return  # or break out of a loop, etc.

# handle the case where the set doesn't have the object yet.
</code></pre>

<p>You can always subclass the <code>set</code> type:</p>

<pre><code>class SetWithPresenceCheck(set):
    def add(self, value):
        not_present = value not in self
        super(SetWithPresenceCheck, self).add(value)
        return not_present
</code></pre>

<p>Note that the real reason <code>Set.add()</code> returns a boolean is to make adding and testing an <em>atomic operation</em>; implementations of the interface can (optionally) make the method synchronised and let callers avoid race conditions. Python's built-in set doesn't make any thread-safety promises <em>anyway</em>.</p>
","java"
"748",7068733,"<p>According to <a href=""http://download.oracle.com/javase/1.5.0/docs/guide/security/CryptoSpec.html#AppB"" rel=""nofollow"">http://download.oracle.com/javase/1.5.0/docs/guide/security/CryptoSpec.html#AppB</a> (for some weird reason that has two Appendix Bs, and you need to scroll down to the second) Java uses the ASN.1 encoding <code>SEQUENCE ::= { r INTEGER, s INTEGER }</code></p>

<p>You should be able to generate (and parse) this in Python using pyasn1 - <a href=""http://pyasn1.sourceforge.net/"" rel=""nofollow"">http://pyasn1.sourceforge.net/</a></p>

<p>ASN.1 is a standard for encoding binary data.  So the information above specifies how the Java code is combining the two values that the Python code returns.  You can therefore do the same, and so maintain the same byte format for the signature.</p>
","java"
"749",1186155,"<p>I know I am late to this question...</p>

<p>Have you seen this project?</p>

<p><a href=""http://code.google.com/p/python-gwt-rpc/"" rel=""nofollow"">http://code.google.com/p/python-gwt-rpc/</a></p>

<p>It might be useful as a starting point. </p>
","java"
"750",25999265,"<p>Use <a href=""https://docs.python.org/library/subprocess.html#subprocess.Popen"" rel=""nofollow""><code>subprocess.Popen</code></a> instead of <a href=""https://docs.python.org/library/subprocess.html#subprocess.call"" rel=""nofollow""><code>subprocess.call</code></a> which wait the sub-process to terminate.</p>

<pre><code>from subprocess import Popen

...

Popen([""java"", ""-jar"", h2, ""-tcp""])
</code></pre>

<p>FYI, <a href=""https://docs.python.org/"" rel=""nofollow"">Python documentation</a> is good place to look, especially <a href=""https://docs.python.org/library/subprocess.html"" rel=""nofollow""><code>subprocess</code> module documentation</a> for this specific problem.</p>

<hr>

<p><strong>UPDATE</strong></p>

<p>If you want to wait the sub-process explicitly when you're using <code>Popen</code>, save the reference to the Popen object and use <a href=""https://docs.python.org/library/subprocess.html#subprocess.Popen.wait"" rel=""nofollow""><code>wait</code></a> method:</p>

<pre><code>proc = Popen([""java"", ""-jar"", h2, ""-tcp""])
# Do something else ..
proc.wait()  # block execution until the sub-process terminate.
</code></pre>
","java"
"751",18139455,"<p>You may want take a look at <a href=""http://stackoverflow.com/questions/3652554/calling-java-from-python"">similar discussion here</a>. To summarize the discussion, you can use <a href=""http://py4j.sourceforge.net/index.html"" rel=""nofollow"">Py4J</a>.</p>

<p>There is also another project called <a href=""http://jpype.sourceforge.net/"" rel=""nofollow"">JPype</a>, however that seems to be a very old implementation (way back in 2009) and no updates thence.</p>
","java"
"752",16952785,"<p>I added the changes with a comment above starting with <em>CHANGED</em>. Your code works with minor modifications.</p>

<p>1) Do use layouts, don't set the layout to <em>None</em>, no absolute layout manager, etc.</p>

<p>2) Add components to the main content pane container before you pack the frame. 
If not, you'll need to <em>revalidate</em> the container among other things (with a possible <em>repaint</em> after the frame is visible).</p>

<pre><code>#!/usr/bin/env jython

# Created by Joe Castleberry
# 2013 

# Imports
from javax.swing import * 
from java.awt import *

class Window: 
    def __init__(self): 
        # Global variables
        global frame
        global label
        global container
        global text

        # Definition of global variables
        frame = JFrame(""Joe's first Java program"")
        label = JLabel(""Hello World!"", JLabel.CENTER)
        container = JPanel()
        text = JTextField(10)

    def builder(self):  
        # Building container
        # CHANGED Removed container.setLayout(None)
        container.setBackground(Color.BLACK)
        # CHANGED Move the add text call here
        container.add(text)

        # Building frame
        frame.getContentPane().add(container)
        frame.setSize(300,300)
        frame.setVisible(True)
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)



a = Window()
a.builder()
</code></pre>
","java"
"753",5088671,"<p>I found <code>''.join(map(lambda x: chr(x % 256), data))</code> to be painfully slow (~4 minutes) for my data on python 2.7.9, where a small change to <code>str(bytearray(map(lambda x: chr(x % 256), data)))</code> only took about 10 seconds.</p>
","java"
"754",15642665,"<p>Make sure that both the Java and Python methods close the file when they are done.</p>

<p>One possibility is to convert your Python script to Jython. If both processes are running in the JVM then you should be able to use standard Java concurrency techniques to make sure you do not have both threads modifying the file simultaneously.</p>
","java"
"755",17352469,"<p>If you don't have an issue using an outside library, I'd recommend <a href=""http://scikit-learn.org/"" rel=""nofollow"">scikit-learn</a> since it can probably do this better &amp; faster than anything you could code by yourself. I'd just do something like this:</p>

<p>Build your corpus. I did the list comprehensions for clarity, but depending on how your data is stored you might need to do different things:</p>

<pre><code>def corpus_builder(apple_inc_tweets, apple_fruit_tweets):
    corpus = [tweet for tweet in apple_inc_tweets] + [tweet for tweet in apple_fruit_tweets]
    labels = [1 for x in xrange(len(apple_inc_tweets))] + [0 for x in xrange(len(apple_fruit_tweets))]
    return (corpus, labels)
</code></pre>

<p>The important thing is you end up with two lists that look like this:</p>

<pre><code>([['apple inc tweet i love ios and iphones'], ['apple iphones are great'], ['apple fruit tweet i love pie'], ['apple pie is great']], [1, 1, 0, 0])
</code></pre>

<p>The [1, 1, 0, 0] represent the positive and negative labels.</p>

<p>Then, you create a Pipeline! Pipeline is a scikit-learn class that makes it easy to chain text processing steps together so you only have to call one object when training/predicting:</p>

<pre><code>def train(corpus, labels)
    pipe = Pipeline([('vect', CountVectorizer(ngram_range=(1, 3), stop_words='english')),
                        ('tfidf', TfidfTransformer(norm='l2')),
                        ('clf', LinearSVC()),])
    pipe.fit_transform(corpus, labels)
    return pipe
</code></pre>

<p>Inside the Pipeline there are three processing steps. The CountVectorizer tokenizes the words, splits them, counts them, and transforms the data into a sparse matrix. The TfidfTransformer is optional, and you might want to remove it depending on the accuracy rating (doing cross validation tests and a grid search for the best parameters is a bit involved, so I won't get into it here). The LinearSVC is a standard text classification algorithm.</p>

<p>Finally, you predict the category of tweets:</p>

<pre><code>def predict(pipe, tweet):
    prediction = pipe.predict([tweet])
    return prediction
</code></pre>

<p>Again, the tweet needs to be in a list, so I assumed it was entering the function as a string.</p>

<p>Put all those into a class or whatever, and you're done. At least, with this very basic example.</p>

<p>I didn't test this code so it might not work if you just copy-paste, but if you want to use scikit-learn it should give you an idea of where to start.</p>

<p>EDIT: tried to explain the steps in more detail.</p>
","java"
"756",2314399,"<p>FYI - REST does have a WSDL-like auto-generation schema definition called <a href=""http://en.wikipedia.org/wiki/Web_Application_Description_Language"" rel=""nofollow"">WADL</a>. But almost no one uses it. </p>
","java"
"757",19189015,"<p>No, there is no such thing. </p>

<p>On the other hand you don't need this kind of syntax with Python. Just iterate over the file object:</p>

<pre><code>with open(filename) as fp:
    for line in fp:
        pass
</code></pre>
","java"
"758",25416605,"<p>From Python's documentation:</p>

<p><code>socket.recv(bufsize[, flags])</code></p>

<p><em>Receive data from the socket. The return value is a string representing the data received. The <strong>maximum</strong> amount of data to be received at once is specified by <strong>bufsize</strong>. See the Unix manual page recv(2) for the meaning of the optional argument flags; it defaults to zero.</em></p>

<p>The <code>size</code> you passed into <code>recv</code> is the maximum size. So at the point of reading, as long as there is data in the buffer, the function will return that number of bytes immediately. So you could be parsing a 3-byte string into an integer (which requires 4 bytes).</p>

<p>I suggest you check the length of bytes received. If less than 4, sleep a few milliseconds and try again. Finally, you concatenate all segments into one before parsing.</p>

<p>[EDIT]
Found this post talking about something similar:
<a href=""http://stackoverflow.com/questions/11871712/python-socket-recv-from-java-client?rq=1"">Python socket recv from java client</a></p>

<p>Also, I need to correct what I said earlier. You don't need to <strong>sleep a few milliseconds</strong> (aka, explicitly calling <code>time.sleep(a_few_milliseconds)</code> , you can immediately call <code>recv</code> again, it will block until there is new data. If new data actually arrives in a few <strong>microseconds</strong>, you don't waste <strong>a few milliseconds</strong> in sleeping.</p>
","java"
"759",2079076,"<p>Creating a python webapp in this way is confusing and non pythonic. You might have better success rewriting your app in Django rather than porting it line by line from Java</p>
","java"
"760",1953731,"<p>You could try <a href=""http://wiki.python.org/jython/WhyJython"" rel=""nofollow"">Jython</a>, a Python interpreter for the JVM which can <code>import</code> Java classes.</p>

<p><strong><a href=""http://www.jython.org/"" rel=""nofollow"">Jython project homepage</a></strong></p>

<p><sup>Unfortunately, that's all I know on the subject.</sup></p>
","java"
"761",32056190,"<p>Jython 2.7 uses the Python 2.7 standard library.  The version number is specifically designed to correlate with the CPython version number.</p>
","java"
"762",27862113,"<p>You want fullscreen, give it fullscreen with <a href=""https://docs.oracle.com/javase/8/javafx/api/javafx/stage/Stage.html#setFullScreen-boolean-"" rel=""nofollow"">setFullScreen</a>. Try to avoid workarounds like the one you did. They almost always lead to other errors and workarounds which in the end make your app become unmaintainable.</p>

<p>I can't test it, but I hope it works for you.</p>

<p>Also, if you really have to do it your way, you shouldn't use System.exit(0) but instead <a href=""https://docs.oracle.com/javase/8/javafx/api/javafx/application/Platform.html#exit--"" rel=""nofollow"">Platform.exit()</a>.</p>
","java"
"763",8181576,"<p>I'm not that familiar with Python, but I would hazard a guess that it doesn't.</p>

<p>The reason why interfaces exist in Java is that they specify a <strong>contract</strong>.  Something that implements <code>java.util.List</code>, for example, is guaranteed to have an <code>add()</code> method to conforms to the general behaviour as defined on the interface.  You could drop in any (sane) implementation of List without knowing its specific class, call a sequence of methods defined on the interface and get the same general behaviour.</p>

<p>Moreover, both the developer and compiler can know that such a method exists and is callable on the object in question, even if they don't know its exact class.  It's a form of polymorphism that's needed with static typing to allow different implementation classes yet still know that they're all legal.</p>

<p>This doesn't really make sense in Python, because it's not statically typed.  You don't need to declare the class of an object, nor convince the compiler that methods you're calling on it definitely exist.  ""Interfaces"" in a duck-typing world are as simple as invoking the method and trusting that the object can handle that message appropriately.</p>

<p><em>Note - edits from more knowledgeable Pythonistas are welcome.</em></p>
","java"
"764",32150702,"<p>You should assume a probability model. This might be helpful: <a href=""https://www.cs.uoregon.edu/Classes/13W/cis472/slides/estimation-2pp.pdf"" rel=""nofollow"">https://www.cs.uoregon.edu/Classes/13W/cis472/slides/estimation-2pp.pdf</a></p>

<p>In terms of implementation, you can use scikit-learn and scikit-stats libraries in Python, where you are able to implement most statistical methods in a few lines of code.</p>
","java"
"765",3589780,"<p>I'm a little confused: the requirement is that users don't need <em>any</em> software installed on their PC?  How can that be?  You need something.</p>

<p>Given two months, I think you only have two options:</p>

<ol>
<li><a href=""http://www.adobe.us/devnet/flash/articles/image_api_03.html"" rel=""nofollow"">Flash</a></li>
<li><a href=""http://developer.skype.com/accessories"" rel=""nofollow"">Skype</a></li>
</ol>

<p>Like you said, because you have two months to get it up and running, you're best off <em>not</em> learning a new language.  As far as Java network frameworks go, people seem to have pretty good experiences with <a href=""http://jboss.org/netty"" rel=""nofollow"">Netty</a>, <a href=""http://mina.apache.org/"" rel=""nofollow"">MINA</a>, or <a href=""https://grizzly.dev.java.net/"" rel=""nofollow"">Grizzly</a>, but going that low-level will probably cause you grief.</p>

<p>There's some good stuff on SO too:</p>

<ul>
<li><a href=""http://stackoverflow.com/questions/257364/api-to-broadcast-live-webcam"">http://stackoverflow.com/questions/257364/api-to-broadcast-live-webcam</a></li>
</ul>
","java"
"766",7131834,"<p>No, but you can get a very close estimate of this by adding up the length of the request headers and body for incoming requests, and the response body and headers for responses.</p>
","java"
"767",16284963,"<p>Well, if you just want to run Python code in Java, then <a href=""http://www.jython.org/"" rel=""nofollow"">Jython</a> will let you compile Python source code into Java <code>.class</code> bytecode, but you won't be able to use any CPython functionality which uses extension modules.</p>

<p>If you really need to embed CPython in Java, then 'importing' a <code>.pyd</code> file isn't going to help you. A <code>.pyd</code> will only function correctly if the Python interpreter has already been initialized will a call to <code>Py_Initialize()</code>.</p>

<p>What you need to do is look at the CPython <a href=""http://docs.python.org/2/extending/embedding.html"" rel=""nofollow"">embedding docs</a>, and use JNI to call the underlying CPython functions as per the examples in those docs.</p>

<p><strong>Update</strong></p>

<p>It sounds like what you have is a single <code>.dll</code> file which acts as an extension module, but also exposes some symbols you're using to embed Python in Java. If you never plan to import it in CPython, then just rename it to <code>.dll</code>.</p>

<p>If you do need to import it in CPython, then you probably ought to split the functionality into two separate <code>.dll</code> files - one which you use in the JNI embedding, and the other which just acts as an extension module.</p>
","java"
"768",38269696,"<p>I think you use python3 with the gevent and gevent-websocket plugin.
gevent-websocket does not support python3 yet.</p>

<p>You have to options here:</p>

<ol>
<li>Uninstall gevent and gevent-websocket and use eventlet.</li>
<li><p>Fix the code geventwebsocket/handler.py at line 236. </p>

<pre><code>if b'101' not in self.status:
</code></pre></li>
</ol>

<p>I hope I could help you.</p>
","java"
"769",12362417,"<p>Differnt language implementations of a hashing algorithm does not make the hash value different. The <code>SHA-1</code> hash whether generated in java or python will be the same.</p>
","java"
"770",9611409,"<p>I would suggest using python with <a href=""http://qt.nokia.com/"" rel=""nofollow"">QT</a>. Check this <a href=""http://popdevelop.com/2010/04/how-to-build-an-executable-application-from-your-python-script-qt-special/"" rel=""nofollow"">link</a>, it can help you get started with the GUI part.</p>
","java"
"771",12191625,"<p>There is no magic here whatsoever. Something that is made to work in the cloud, is not really working out of the box without Internet.</p>

<p>Just to point you to a direction, you will have to do it manually yourself if you want to give to the end user a smooth support when Internet connection is going down. Among other things you will most likely going to use <a href=""http://www.html5rocks.com/en/features/storage"" rel=""nofollow"">Web Storage, IndexedDB and Web SQL Database</a> to support offline functionality and none of them have anything to do with GAE.</p>
","java"
"772",6198941,"<p>For Java projects, you could give Maven a try, and configure you own repository on your server. Don't know if it can be used for the other languages, however.</p>
","java"
"773",27218894,"<p>If two numbers are in gray code sequence, they differ by one binary digit. i.e the exclusive OR on the two numbers returns a power of 2. So, find XOR and check if the result is a power of two.</p>

<p>This solution works well for the all the test cases written by CodeKaichu above. I would love to know if it fails in any cases.</p>

<pre><code>public boolean grayCheck(int x, int y) {
       int z = x^y;
       return (z&amp;z-1)==0;
}
</code></pre>
","java"
"774",3094635,"<p><a href=""http://commons.apache.org/lang/download_lang.cgi"">Apache commons lang</a> will allow you to do something similar (a string based example; can be customized)</p>

<p>Here is the code:</p>

<pre><code>import java.util.Map;
import org.apache.commons.lang.ArrayUtils;

public class ArrayToMapExample {

    public static void main(String[] args) {
        Map dict = ArrayUtils.toMap(new String[][]{{""United States"", ""New York""},
                            {""United Kingdom"", ""London""},
                              {""Netherland"", ""Amsterdam""},
                              {""Japan"", ""Tokyo""},
                              {""France"", ""Paris""}});


        System.out.println(""Capital of France is "" + dict.get(""France""));
    }
}
</code></pre>
","java"
"775",23877147,"<p>A NullPointerException, as the name states is an Exception (run-time Exception I should say) which is thrown by the Compiler, when you try to use a Null value where a value is needed/must needed. So, the place where you're using <code>str</code> must be checked for its value, before executing some function which would require some of the checking and some valid value parameters. String can be null, but sometimes the method would need a valid value to work on. </p>

<p><a href=""http://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html"" rel=""nofollow"">http://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html</a></p>

<p>If you just want to <strong>catch</strong> the exception then here</p>

<pre><code>try {
  String str = null;
  TurkishMorphParser parser = TurkishMorphParser.createWithDefaults();
  str = new Stm(parser).parse(word);
  //System.out.println(""str = "" + str);
  String replace = str.replace(""["","""");
  String replace1 = replace.replace(""]"","""");
  List&lt;String&gt; result1 = new ArrayList&lt;String&gt;(Arrays.asList(replace1.split("","")));
  String result = result1.get(0).toString();
  //System.out.println(""Result = "" + result);
  return result;
} catch (NullPointerException error) {
  /* Display message */
  System.out.print(""Sorry, there was an error: "" + e.Message);
}
</code></pre>

<p>However, I guess when it gives you nothing, that is the place where you might get the Error.</p>

<pre><code>System.out.println(""str = "" + str);
</code></pre>

<p>Maybe that is why you commented it out.</p>

<p>So, you can handle it too. If after all the processing of the above line, <code>str</code> is a <code>null</code> </p>

<pre><code>if(str == null) {
  System.out.print(""Sorry, doesn't recognise it."");
} else {
  System.out.println(""str = "" + );
}
</code></pre>

<p>Then again, move forward to the execution and check for the value again. This way, it would minimize the error! :)</p>
","java"
"776",6412439,"<p><a href=""https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+CLI"" rel=""nofollow"">jenkins cli</a></p>

<p>is that what you need?</p>
","java"
"777",22334747,"<p>You can access the attributes from a <a href=""http://www.jython.org/javadoc/org/python/core/PyObject.html"" rel=""nofollow""><code>PyObject</code></a> directly by using the <a href=""http://www.jython.org/javadoc/org/python/core/PyObject.html#__getattr__%28org.python.core.PyString%29"" rel=""nofollow""><code>__getattr__(PyString)</code></a> and <a href=""http://www.jython.org/javadoc/org/python/core/PyObject.html#__setattr__%28org.python.core.PyString,%20org.python.core.PyObject%29"" rel=""nofollow""><code>__setattr__(PyString, PyObject)</code></a> methods.</p>

<p>You can get an attribute with:</p>

<pre><code>PyObject pyObject = ...;
// Get attribute: value = getattr(obj, name)
//            OR: value = obj.__getattr__(name)
PyString attrName = Py.newString(""some_attribute"");
PyObject attrValue = pyObject.__getattr__(attrName);
</code></pre>

<ul>
<li>WARNING: Make sure to use <code>__getattr__(PyString)</code> because <a href=""http://www.jython.org/javadoc/org/python/core/PyObject.html#__getattr__%28java.lang.String%29"" rel=""nofollow""><code>__getattr__(String)</code></a> only works for interned strings.</li>
</ul>

<p>You can also set an attribute with:</p>

<pre><code>PyObject pyObject = ...;
// Set attribute: setattr(obj, name, value)
//            OR: obj.__setattr__(name, value)
PyString attrName = Py.newString(""some_attribute"");
PyObject attrValue = (PyObject)Py.newString(""A string as the new value."");
pyObject.__setattr__(attrName, attrValue);
</code></pre>

<ul>
<li><p>NOTE: The value does not have to be a <code>PyString</code>. It just has to be a <code>PyObject</code>.</p></li>
<li><p>WARNING: Make sure to use <code>__setattr__(PyString, PyObject)</code> because <a href=""http://www.jython.org/javadoc/org/python/core/PyObject.html#__setattr__%28java.lang.String,%20org.python.core.PyObject%29"" rel=""nofollow""><code>__setattr__(String, PyObject)</code></a> only works for interned strings.</p></li>
</ul>

<p>Also, you can call a python method using <a href=""http://www.jython.org/javadoc/org/python/core/PyObject.html#__call__%28org.python.core.PyObject%5B%5D,%20java.lang.String%5B%5D%29"" rel=""nofollow""><code>__call__(PyObject[] args, String[] keywords)</code></a>:</p>

<pre><code>PyObject pyObject = ...;

// Get method: method = getattr(obj, name)
//         OR: method = obj.__getattr__(name)
PyString methodName = Py.newString(""some_method"");
PyObject pyMethod = pyObject.__getattr__(methodName);

// Prepare arguments.
// NOTE: args contains positional arguments followed by keyword argument values.
PyObject[] args = new PyObject[] {arg1, arg2, ..., kwarg1, kwarg2, ...};
String[] keywords = new String[] {kwname1, kwname2, ...};

// Call method: result = method(arg1, arg2, ..., kwname1=kwarg1, kwname2=kwarg2, ...)
PyObject pyResult = pyMethod.__call__(args, keywords);
</code></pre>

<ul>
<li>NOTE: I cannot explain why the keyword names are <code>String</code> here when getting an attribute by name requires <code>PyString</code>.</li>
</ul>
","java"
"778",25312546,"<p>I don't understand why you are confused, but this is correct, you could check the <a href=""http://www.jython.org/jythonbook/en/1.0/JythonAndJavaIntegration.html"" rel=""nofollow"">Jython documentation</a> about instantiating Java objects using Jython and instantiates the objects the same way as you do.</p>
","java"
"779",26570846,"<p>Specify <strong>user.dir</strong> property (<a href=""http://docs.oracle.com/javase/tutorial/essential/environment/sysprop.html"" rel=""nofollow"">default working directory</a>):</p>

<pre><code>run_command('java -Duser.dir=/your_path_here -jar jar\\minecraft.jar'):
</code></pre>
","java"
"780",16443859,"<p>Enthought's Mayavi 3D plotting package in python might work for what you need. It uses VTK.
<a href=""http://code.enthought.com/projects/mayavi/"" rel=""nofollow"">http://code.enthought.com/projects/mayavi/</a></p>

<p>Using the traits utility you can interactively update the data in the plot the following two pages from the documents discuss this</p>

<p><a href=""http://docs.enthought.com/mayavi/mayavi/building_applications.html#making-the-visualization-live"" rel=""nofollow"">http://docs.enthought.com/mayavi/mayavi/building_applications.html#making-the-visualization-live</a>
<a href=""http://docs.enthought.com/mayavi/mayavi/mlab_animating.html#mlab-animating-data"" rel=""nofollow"">http://docs.enthought.com/mayavi/mayavi/mlab_animating.html#mlab-animating-data</a></p>
","java"
"781",2092455,"<p>In forum applications the bottleneck will be the database, not the language. So yes, pick the one you're familiar with. Unless you don't want to, in which case you should pick something else.</p>
","java"
"782",27052061,"<p>It's pretty hard to tell here, but I <em>think</em> what you're asking is how to:</p>

<ul>
<li>Launch a program in the background.</li>
<li>Send it input, as if it came from a user on the console.</li>
<li>Read its output that it tries to display to a user on the console.</li>
<li>At the same time, run another thread that does other stuff.</li>
</ul>

<p>The last one is pretty easy; in fact, you've mostly written it, you just need to add a <code>thread1.start()</code> somewhere.</p>

<p>The <a href=""https://docs.python.org/3/library/subprocess.html"" rel=""nofollow""><code>subprocess</code></a> module lets you launch a program and control its input and output. It's easiest if you want to just feed in all the input at once, wait until it's done, then process all the output, but obviously that's not your case here, so it's a bit more involved:</p>

<pre><code>minecraft = subprocess.Popen(['java', 'path/to/minecraft_server.jar', '-other', 'args],
                             stdin=subprocess.PIPE, 
                             stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
</code></pre>

<p>I'm merging stdout and stderr together into one pipe; if you want to read them separately, or send stderr to /dev/null, or whatever, see the docs; it's all pretty simple. While we're making assumptions here, I'm going to assume that <code>minecraft_server</code> uses a simple line-based protocol, where every command, every response, and every info message is exactly one line (that is, under 1K of text ending in a <code>\n</code>).</p>

<p>Now, to send it input, you just do this:</p>

<pre><code>minecraft.stdin.write('Make me a sandwich\n')
</code></pre>

<p>Or, in Python 3.x:</p>

<pre><code>minecraft.stdin.write(b'Make me a sandwich\n')
</code></pre>

<p>To read its output, you do this:</p>

<pre><code>response = minecraft.stdout.readline()
</code></pre>

<hr>

<p>That works just like a regular file. But note that it works like a <em>binary</em> file. In Python 2.x, the only difference is that newlines don't get automatically converted, but in Python 3.x, it means you can only write <code>bytes</code> (and compatible objects), not <code>str</code>s, and you will receive <code>bytes</code> back. There are good reasons for that, but if you want to get pipes that act like text files instead, see the <code>universal_newlines</code> (and possibly <code>bufsize</code>) arguments under <a href=""https://docs.python.org/3/library/subprocess.html#frequently-used-arguments"" rel=""nofollow"">Frequently Used Arguments</a> and <a href=""https://docs.python.org/3/library/subprocess.html#popen-constructor"" rel=""nofollow""><code>Popen</code> Constructor</a>.</p>

<hr>

<p>Also, it works like a <em>blocking</em> file. With a regular file, this rarely matters, but with a pipe, it's quite possible that there will be data later, but there isn't data yet (because the server hasn't written it yet). So, if there is no output yet (or not a complete line's worth, since I used <code>readline()</code>), your thread just blocks, waiting until there is.</p>

<p>If you don't want that, you probably want to create another thread to service stdout. And its function can actually look pretty similar to what you've got:</p>

<pre><code>def listener():
    for line in minecraft.stdout:
        if line.strip() == ""Server can't keep up!"":
            minecraft.stdin.write(""Restart Universe\n"")
</code></pre>

<p>Now that thread can block all day and there's no problem, because your other threads are still going.</p>

<hr>

<p>Well, not quite <em>no</em> problem. </p>

<p>First it's going to be hard to cleanly shut down your program. </p>

<p>More seriously, the pipes between processes have a fixed size; if you don't service stdout fast enough, or the child doesn't service stdin fast enough, the pipe can block. And, the way I've written things, if the stdin pipe blocks, we'll be blocked forever in that <code>stdin.write</code> and won't get to the next read off <code>stdout</code>, so that can block too, and suddenly we're both waiting on each other forever.</p>

<p>You can solve this by having another thread to service stdout. The <code>subprocess</code> module itself includes an example, in the <a href=""https://hg.python.org/cpython/file/3.4/Lib/subprocess.py#l1175"" rel=""nofollow""><code>Popen._communicate</code></a> function used by all the higher-level functions. (Make sure to look at Python 3.3 or later, because earlier versions had bugs.)</p>

<p>If you're in Python 3.4+ (or 3.3 with a backport off PyPI), you can instead use <a href=""https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec"" rel=""nofollow""><code>asyncio</code></a> to rewrite your program around an event loop and handle the input and output the same way you'd write a reactor-based network server. That's what all the cool kids are doing in 2017, but back in late 2014 many people still thought it looked new and scary.</p>

<hr>

<p>If all of this is sounding like a lot more work than you signed on for, you may want to consider using <a href=""https://pexpect.readthedocs.org/en/latest/"" rel=""nofollow""><code>pexpect</code></a>, which wraps up a lot of the tedious details, and makes some simplifying assumptions that are probably true in your case.</p>
","java"
"783",5456412,"<pre><code>## This is where the problem exists
#os.system(""ls -l"")
#call([""ls"", ""-l""])
#p = subprocess.Popen(command)
## End of Problem
</code></pre>

<ol>
<li><p>Focus on <code>subprocess.Popen</code>.  Discard all others.  Permanently.  They're all bad ideas.   </p></li>
<li><p>If <code>subprocess.Popen(command)</code> really does work as a stand-alone short Python script, then you have to investigate whether or not the Apache CGI-bin username has the required privileges to run this.  Remember.  Apache doesn't run as you.  It runs as a separate ""person"" with separate privileges.</p></li>
<li><p>Your java command is probably spewing data into sys.stdout and or sys.stderr.  If so, that output goes to Apache.  Ideally, some stuff has already gone to Apache via sys.stdout which is a proper header and everything's good.  </p>

<p>However, because of the way things are buffered, there's a small chance that Apache has seen no useable response and the java output is confusing.</p></li>
</ol>

<p>I'd suggest that you switch to <code>mod_wsgi</code> instead of CGI because it's easier to control.</p>

<p>I'd also suggest that you capture the subprocess output in a file and then copy that file to sys.stdout so that Apache can't be confused by the java subprocess.</p>
","java"
"784",7068733,"<p>According to <a href=""http://download.oracle.com/javase/1.5.0/docs/guide/security/CryptoSpec.html#AppB"" rel=""nofollow"">http://download.oracle.com/javase/1.5.0/docs/guide/security/CryptoSpec.html#AppB</a> (for some weird reason that has two Appendix Bs, and you need to scroll down to the second) Java uses the ASN.1 encoding <code>SEQUENCE ::= { r INTEGER, s INTEGER }</code></p>

<p>You should be able to generate (and parse) this in Python using pyasn1 - <a href=""http://pyasn1.sourceforge.net/"" rel=""nofollow"">http://pyasn1.sourceforge.net/</a></p>

<p>ASN.1 is a standard for encoding binary data.  So the information above specifies how the Java code is combining the two values that the Python code returns.  You can therefore do the same, and so maintain the same byte format for the signature.</p>
","java"
"785",4909306,"<p>Python web frameworks do it in a similar way as some Java-based frameworks. I can speak for Django here.</p>

<p>A good comparison could be Play! vs. Django. Both of them foster using an MVC architecture (or MTV = models, templates, views) and already provide you with a lot of things like CRUD operations in admin pages, ORM, authentication, URL configurations, a template language and much more.</p>

<p>Other Java-based frameworks might differ a lot, and I can't give you a general answer. Depending on the choice, there are only few differences. You can simply choose the language and framework you like the most. I'd recommend to go through some tutorials (<a href=""http://docs.djangoproject.com/en/dev/intro/tutorial01/"" rel=""nofollow"">Django tutorial</a>, <a href=""http://www.playframework.org/documentation/1.1.1/guide1"" rel=""nofollow"">Play! framework tutorial</a> for instance) and look which one works best for your needs.</p>
","java"
"786",5717117,"<p>Check the javadoc for the <code>set</code> method.  You'll see the following:</p>

<blockquote>
  <p>Parameters:</p>
  
  <p>year - the value used to set the YEAR
  calendar field.</p>
  
  <p>month - the value used to set the
  MONTH calendar field. Month value is
  0-based. e.g., 0 for January.</p>
  
  <p>date - the value used to set the
  DAY_OF_MONTH calendar field.</p>
</blockquote>

<p>So your code should become the following:</p>

<pre><code>private static int getWeekOfYear(int y, int m, int d) {     
    Calendar cal = Calendar.getInstance();     
    cal.setMinimalDaysInFirstWeek(4);     
    cal.set(y, m - 1, d);     // Note the change here
    return cal.get(Calendar.WEEK_OF_YEAR); 
} 
</code></pre>
","java"
"787",4662091,"<p>No. </p>

<p>But this is why Martin Odersky created <a href=""http://www.scala-lang.org"">Scala</a>. He's even said that one of his goals for Scala is that it be the Python of the Java world. Scala compiles to Java bytecode and easily interops with Java compiled classes. </p>

<p>If that's not an option, you could take a look at the <a href=""http://commons.apache.org/collections/"">Commons Collection Library</a>.</p>
","java"
"788",28858212,"<p>The Python side works with UTF-8 encoded data (which vary in size), the Java code with UTF-16 <a href=""http://unicode.org/glossary/#code_unit"" rel=""nofollow"">codeunits</a><sup>*</sup>. Indices into one do not map into the other.</p>

<p>You can see the issue when applying the index to your sample string, both as Unicode string and encoded to UTF-8, in a Python 2.7 UCS-2 build (which uses UTF-16 surrogate pairs like Java does):</p>

<pre><code>&gt;&gt;&gt; u""<ed><U+00A0><U+00BD><ed><U+00B4><U+00B4><ed><U+00A0><U+00BD><ed><U+00B4><U+00B4><ed><U+00A0><U+00BD><ed><U+00B4><U+00B4><ed><U+00A0><U+00BD><ed><U+00B4><U+00B4><ed><U+00A0><U+00BD><ed><U+00B4><U+00B4>\n==================\0No. 4<U+2668> ==\n<ed><U+00A0><U+00BD><ed><U+00B3><U+008C> \n<U+2705>IHappy Holi\n<U+2705>Ground Floor or Second Floor\n9910080224\nemailaddress@gmail.com""[115:]
u'l.com'
&gt;&gt;&gt; u""<ed><U+00A0><U+00BD><ed><U+00B4><U+00B4><ed><U+00A0><U+00BD><ed><U+00B4><U+00B4><ed><U+00A0><U+00BD><ed><U+00B4><U+00B4><ed><U+00A0><U+00BD><ed><U+00B4><U+00B4><ed><U+00A0><U+00BD><ed><U+00B4><U+00B4>\n==================\0No. 4<U+2668> ==\n<ed><U+00A0><U+00BD><ed><U+00B3><U+008C> \n<U+2705>IHappy Holi\n<U+2705>Ground Floor or Second Floor\n9910080224\nemailaddress@gmail.com"".encode('utf8')[115:]
'\nemailaddress@gmail.com'
</code></pre>

<p>UTF-8 encodes Unicode codepoints to 1 and 4 codeunits <em>per codepoint</em>; how many codeunits are used then depends on the text:</p>

<pre><code>&gt;&gt;&gt; len(u'abc'.encode('utf8'))
3
&gt;&gt;&gt; len(u'åßç'.encode('utf8'))
6
</code></pre>

<p>while decoding Unicode to an internal UTF-16 representation (like Java does, and Python 2.7 with the default narrow UCS-2 build), most characters use just the one codeunit, while characters outside of the BMP (like emoticons) use 2:</p>

<pre><code>&gt;&gt;&gt; u""<ed><U+00A0><U+00BD><ed><U+00B4><U+00B4><ed><U+00A0><U+00BD><ed><U+00B3><U+008C><U+2705>""
u'\U0001f534\U0001f4cc\u2705'
&gt;&gt;&gt; len(u""<ed><U+00A0><U+00BD><ed><U+00B4><U+00B4><ed><U+00A0><U+00BD><ed><U+00B3><U+008C><U+2705>"")
5
&gt;&gt;&gt; u""<ed><U+00A0><U+00BD><ed><U+00B4><U+00B4><ed><U+00A0><U+00BD><ed><U+00B3><U+008C><U+2705>"".encode('utf8')
'\xf0\x9f\x94\xb4\xf0\x9f\x93\x8c\xe2\x9c\x85'
&gt;&gt;&gt; len(u""<ed><U+00A0><U+00BD><ed><U+00B4><U+00B4><ed><U+00A0><U+00BD><ed><U+00B3><U+008C><U+2705>"".encode('utf8'))
11
</code></pre>

<p>Either run your regex on a Unicode value in Python (e.g. decode from UTF-8) or alter the Java code to operate on UTF-8 bytes rather than UTF-16 codeunits.</p>

<p>If you are using Unicode in Python, do take into account that you can also build the Python binary using UCS-4 for Unicode codepoints; you'd never see surrogates and the length of the string in Python will differ from that of the Java representation. Python 3.3 and up use a <a href=""https://docs.python.org/3/whatsnew/3.3.html#pep-393"" rel=""nofollow"">flexible storage</a> where the internal representation will never use surrogates but instead scales to meet the requirements for each individual string.</p>

<p>In that case you may need to use <a href=""https://jcp.org/en/jsr/detail?id=204"" rel=""nofollow"">JSR-204 methods</a> to access codepoints on the Java side; I suspect that <a href=""http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#offsetByCodePoints%28int,%20int%29"" rel=""nofollow""><code>String.offsetByCodePoints()</code></a> would be helpful here but I am not a Java developer.</p>

<p>You may want to brush up on Unicode and codecs; I recommend you read:</p>

<ul>
<li><p><a href=""http://joelonsoftware.com/articles/Unicode.html"" rel=""nofollow"">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)</a> by Joel Spolsky</p></li>
<li><p><a href=""http://nedbatchelder.com/text/unipain.html"" rel=""nofollow"">Pragmatic Unicode</a> by Ned Batchelder</p></li>
<li><p>The <a href=""http://docs.python.org/2/howto/unicode.html"" rel=""nofollow"">Python Unicode HOWTO</a></p></li>
</ul>

<hr>

<p><sup>*</sup> Java's String type uses UTF-16 words, which are 2 bytes per codeunit. For characters outside the BMP, that means <em>two</em> codeunits are used per character using <a href=""http://stackoverflow.com/questions/5903008/what-is-a-surrogate-pair-in-java"">surrogate pairs</a>.</p>
","java"
"789",21909165,"<p>You will first need the postagger.jar file from stanford and also train your own tagger. BUT the <code>hazm</code> dev has kindly uploaded the resource directory that you will need here: <a href=""http://dl.dropboxusercontent.com/u/90405495/resources.zip"">http://dl.dropboxusercontent.com/u/90405495/resources.zip</a></p>

<p>You will need to unzip and save the folder to the directory where you're running your script. </p>

<p>For example:</p>

<pre><code>$ mkdir testdir
$ wget https://github.com/sobhe/hazm/archive/master.zip
$ unzip master.zip -d testdir
$ cd testdir
$ mv hazm-master/hazm/ .
$ wget http://dl.dropboxusercontent.com/u/90405495/resources.zip
$ unzip resources.zip -d .
$ python
Python 2.7.5+ (default, Sep 19 2013, 13:48:49) 
[GCC 4.8.1] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; import hazm
&gt;&gt;&gt; tagger = hazm.POSTagger()
&gt;&gt;&gt; tagger.tag(hazm.word_tokenize(u'<U+0645><U+0627> <U+0628><U+0633><U+06CC><U+0627><U+0631> <U+06A9><U+062A><U+0627><U+0628> <U+0645><U+06CC><U+200C><U+062E><U+0648><U+0627><U+0646><U+06CC><U+0645>'))
[(u'\u0645\u0627', u'PR'), (u'\u0628\u0633\u06cc\u0627\u0631', u'ADV'), (u'\u06a9\u062a\u0627\u0628', u'N'), (u'\u0645\u06cc\u200c\u062e\u0648\u0627\u0646\u06cc\u0645', u'V')]
</code></pre>
","java"
"790",2075432,"<p><a href=""http://teethgrinder.co.uk/open-flash-chart/"" rel=""nofollow"">Open Flash Chart</a></p>

<p><a href=""http://www.adobe.com/products/flex/"" rel=""nofollow"">Flex</a></p>
","java"
"791",25073130,"<p>In C#:<br>
For RAM</p>

<pre><code>List&lt;anyObject&gt; hogger = new List&lt;anyObject&gt;();
for(long i = 0; i &lt; someHugeNumber; i++)
    hogger.Add(new anyObject());
</code></pre>

<p>Basically try and see how many objects you need to take up the space you want.  </p>

<p>For CPU  </p>

<pre><code>while(true)
    ;
</code></pre>

<p>That is an instant 100% CPU<br>
If you want a bit less</p>

<pre><code>while(true)
{
    for(long i = 0; i &lt; someNumber; i++)
    {
        ;
    }
    Thread.Sleep(1);
}
</code></pre>

<p>with some number you can adjust the number of mad cycles before the break<br>
=> Fiddle with the number for averaging down CPU usage  </p>

<p>As termination for the <code>while</code>-loops you can use a button on a form or a key-combination or something.</p>
","java"
"792",3996124,"<p>The only libraries that are a bit like Java's Bean validation that I know (and have used) are:</p>

<ul>
<li><p>Zope 3's <a href=""http://docs.zope.org/zope.schema/"" rel=""nofollow"">zope.schema</a> , but this is tied to using zope interfaces I think</p></li>
<li><p>SQLAlchamy's <a href=""http://elixir.ematia.de/trac/wiki"" rel=""nofollow"">Elixir</a>, but this is tied to using SQLAlchemy entities</p></li>
</ul>

<p>I'm not sure if (or how) these could be used without depending of specific super classes</p>
","java"
"793",21934,"<p>Late in the game, but I think one significant rationale for RC in python is its simplicity. See this <a href=""http://mail.python.org/pipermail/python-list/2005-October/921938.html"" rel=""nofollow"">email by Alex Martelli</a>, for example.</p>

<p>(I could not find a link outside google cache, the email date from 13th october 2005 on python list).</p>
","java"
"794",1452652,"<p>There are tons, which ones are ""good"" depend on what you need.</p>

<p>There's Ruby on Rails, which is pretty handy.</p>

<p>For python there's django.</p>

<p>For PHP (I spend a lot of time dealing with PHP), you can look at:</p>

<ul>
<li>symfony</li>
<li>cakePHP</li>
<li>Solar</li>
<li>Zend Framework</li>
</ul>

<p>Which are all good in certain situations, and annoying in others.</p>
","java"
"795",3050682,"<p>Short answer: Yes, many web servers can handle generating pages from multiple languages.</p>
","java"
"796",9213883,"<p>The standard library defines <a href=""http://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html""><code>IllegalArgumentException</code></a>:</p>

<pre><code>throw new IllegalArgumentException();
</code></pre>
","java"
"797",527134,"<p>You have mentioned computer science concepts but that is too vague. IMHO you need to define what concepts you want to learn (say is it algorithms or OO design) and then work with either  Java or Python to strengthen those concepts. </p>

<p>If you intend to learn design patterns then I would suggest Java (at least for the reason there are lot of good books, reference materials on the net in this regard). 
On the other hand Python would be better when you want to quickly code an algorithm or if you want to try out your solution on a problem you came across. With Java you need to get familiarized with lot of API even before you get stared writing moderately complex programs.</p>
","java"
"798",21436787,"<p>A meta-answer would be to use JSON, since JSON generators and parsers can be found for every major programming language.</p>
","java"
"799",1859865,"<blockquote>
  <p>When will I need Jython?</p>
</blockquote>

<p>When you want to program in Python but need (or want) to have the result run on a Java virtual machine, or use existing Java components.</p>

<blockquote>
  <p>What are the drawbacks.</p>
</blockquote>

<p>Jython may not be 100% compatible with Python, though any incompatibility would be considered a bug. If you later want/need to run on CPython, any code that uses Java components will have to be rewritten.</p>

<blockquote>
  <p>I assume it is slow?</p>
</blockquote>

<p>That depends, as always, on your specific usecase. It may actually be faster than CPython in some cases; and of course it depends on the specific JVM you run under - these get better all the time.</p>
","java"
"800",24339949,"<p>For the socket to progress out of close_wait you need to close the socket fd.</p>

<p>You are correct that sequences like below do not accumulate fd's in c-python but do accumulate open fd's in jython. I think this something to do with the way the jython garbage collector works. In the jython difference doc there's a note that doings like open().read() will cause problems - I suspect it's the same underlying issue. </p>

<pre><code>&gt;&gt;&gt; urllib2.urlopen('http://www.google.com/').close()
&gt;&gt;&gt; urllib2.urlopen('http://www.google.com/').close()
&gt;&gt;&gt; urllib2.urlopen('http://www.google.com/').close()
&gt;&gt;&gt; urllib2.urlopen('http://www.google.com/').close()
&gt;&gt;&gt; urllib2.urlopen('http://www.google.com/').close()
&gt;&gt;&gt; urllib2.urlopen('http://www.google.com/').close()
</code></pre>

<p>The solution is to handle the error condition properly as follows (2.5 syntax);</p>

<pre><code>try: 
  urllib2.urlopen('http://www.google.com/not-found')
except urllib2.HTTPError, e:
  e.fp.close()
</code></pre>
","java"
"801",8525193,"<p>I'm not a Python guy, but tried installing JPype on my machine:</p>

<pre><code>% uname -a
Darwin fatty-i7.local.tld 11.2.0 Darwin Kernel Version 11.2.0: Tue Aug  9 20:54:00 PDT 2011; root:xnu-1699.24.8~1/RELEASE_X86_64 x86_64
% java -version
java version ""1.6.0_29""
Java(TM) SE Runtime Environment (build 1.6.0_29-b11-402-11M3527)
Java HotSpot(TM) 64-Bit Server VM (build 20.4-b02-402, mixed mode)
</code></pre>

<p>On OSX Lion, the latest JDK appears to be located here:</p>

<pre><code>/Developer/SDKs/MacOSX10.7.sdk/System/Library/Frameworks/JavaVM.framework/
</code></pre>

<p>A little googling turned up this post: <a href=""http://blog.y3xz.com/post/5037243230/installing-jpype-on-mac-os-x"">http://blog.y3xz.com/post/5037243230/installing-jpype-on-mac-os-x</a></p>

<p>I followed those instructions to modify setup.py, then ran <code>sudo python setup.py install</code> with no problems. </p>

<p>Does that help?</p>
","java"
"802",3946086,"<p>There's nothing in the standard library.  Try:</p>

<p><a href=""http://pypi.python.org/pypi/bitarray"">http://pypi.python.org/pypi/bitarray</a></p>
","java"
"803",8549259,"<p>There are a set of relatively standard ""AT"" commands that can be used for these types of operations - including placing phone calls and sending text messages.  Some details around this are at <a href=""http://www.smssolutions.net/tutorials/gsm/sendsmsat/"" rel=""nofollow"">http://www.smssolutions.net/tutorials/gsm/sendsmsat/</a> and <a href=""http://www.dreamfabric.com/sms/"" rel=""nofollow"">http://www.dreamfabric.com/sms/</a> (simply first results of a little online searching).</p>

<p>A little more online searching yielded a Java-specific example at <a href=""http://www.java-samples.com/showtutorial.php?tutorialid=22"" rel=""nofollow"">http://www.java-samples.com/showtutorial.php?tutorialid=22</a> .</p>

<p>I had done a little bit of this in Java a number of years back, using the Java Communications API - available at <a href=""http://www.oracle.com/technetwork/java/index-jsp-141752.html"" rel=""nofollow"">http://www.oracle.com/technetwork/java/index-jsp-141752.html</a> .  (My purpose was for interfacing with the phone book on my phone, but this also should have worked with interfacing with the SMS system.)</p>
","java"
"804",1116921,"<p>Use HttpComponents <a href=""http://hc.apache.org/"" rel=""nofollow"">http://hc.apache.org/</a>. You need:</p>

<ul>
<li>HttpComponents Core, <a href=""http://mirrors.hostingromania.ro/apache.org/httpcomponents/httpcore/binary/httpcomponents-core-4.0.1-bin.zip"" rel=""nofollow"">direct download</a></li>
<li>HttpComponents Client, <a href=""http://mirrors.hostingromania.ro/apache.org/httpcomponents/httpclient/binary/httpcomponents-client-4.0-beta2-bin.zip"" rel=""nofollow"">direct download</a></li>
<li>Commons Logging</li>
</ul>

<p>Example code:</p>

<pre><code>import org.apache.http.message.BasicNameValuePair;
import org.apache.http.NameValuePair;
import org.apache.http.HttpResponse;
import org.apache.http.HttpEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.HttpClient;

import java.util.ArrayList;
import java.util.List;
import java.io.OutputStream;
import java.io.ByteArrayOutputStream;

public class HttpClientTest {
    public static void main(String[] args) throws Exception {

        // request parameters
        List&lt;NameValuePair&gt; formparams = new ArrayList&lt;NameValuePair&gt;();
        formparams.add(new BasicNameValuePair(""q"", ""quality""));
        UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, ""UTF-8"");
        HttpPost httppost = new HttpPost(""http://stackoverflow.com/search"");
        httppost.setEntity(entity);

        // execute the request
        HttpClient httpclient = new DefaultHttpClient();
        HttpResponse response = httpclient.execute(httppost);

        // display the response status code
        System.out.println(response.getStatusLine().getStatusCode());

        // display the response body
        HttpEntity responseEntity = response.getEntity();
        OutputStream out = new ByteArrayOutputStream();
        responseEntity.writeTo(out);
        System.out.println(out);
    }
}
</code></pre>

<p>Save it to HttpClientTest.java. Have this java file, httpcore-4.0.1.jar and httpclient-4.0-alpha4.jar in the same directory Supposing you have the sun java 1.6 jdk installed, compile it:</p>

<pre><code>javac HttpClientTest.java -cp httpcore-4.0.1.jar;httpclient-4.0-alpha4.jar;commons-logging-1.1.1.jar
</code></pre>

<p>Execute it</p>

<pre><code>java HttpClientTest.class -cp httpcore-4.0.1.jar;httpclient-4.0-alpha4.jar;commons-logging-1.1.1.jar
</code></pre>

<p>I would argue that is as simple in java as it is in php or python (your examples). In all cases you need:</p>

<ul>
<li>the sdk configured</li>
<li>a library (with dependencies)</li>
<li>sample code</li>
</ul>
","java"
"805",33233737,"<p>I wouldn't go so far as to say it is supported but it is certainly possible. All SQL functions available currently in PySpark are simply a wrappers around Scala API.</p>

<p>Lets assume I want to reuse <code>GroupConcat</code> UDAF I've created as an answer to <a href=""http://stackoverflow.com/q/31640729/1560062"">SPARK SQL replacement for mysql GROUP_CONCAT aggregate function</a> and it is located in a package <code>com.example.udaf</code>:</p>

<pre class=""lang-py prettyprint-override""><code>from pyspark.sql.column import Column, _to_java_column, _to_seq
from pyspark.sql import Row

row = Row(""k"", ""v"")
df = sc.parallelize([
    row(1, ""foo1""), row(1, ""foo2""), row(2, ""bar1""), row(2, ""bar2"")]).toDF()

def groupConcat(col):
    """"""Group and concatenate values for a given column

    &gt;&gt;&gt; df = sqlContext.createDataFrame([(1, ""foo""), (2, ""bar"")], (""k"", ""v""))
    &gt;&gt;&gt; df.select(groupConcat(""v"").alias(""vs""))
    [Row(vs=u'foo,bar')]
    """"""
    sc = SparkContext._active_spark_context
    # It is possible to use java_import to avoid full package path
    _groupConcat = sc._jvm.com.example.udaf.GroupConcat.apply
    # Converting to Seq to match apply(exprs: Column*)
    return Column(_groupConcat(_to_seq(sc, [col], _to_java_column)))

df.groupBy(""k"").agg(groupConcat(""v"").alias(""vs"")).show()

## +---+---------+
## |  k|       vs|
## +---+---------+
## |  1|foo1,foo2|
## |  2|bar1,bar2|
## +---+---------+
</code></pre>

<p>There is far to much leading underscores for my taste but as you can see it can be done.</p>
","java"
"806",9381906,"<p>If I read <a href=""http://www.jython.org/javadoc/org/python/util/PythonInterpreter.html"">the docs</a> right, you can just use the <a href=""http://www.jython.org/javadoc/org/python/util/PythonInterpreter.html#eval%28org.python.core.PyObject%29""><code>eval</code></a> function:</p>

<pre><code>interpreter.execfile(""/path/to/python_file.py"");
PyDictionary result = interpreter.eval(""myPythonClass().abc()"");
</code></pre>

<p>Or if you want to get a string:</p>

<pre><code>PyObject str = interpreter.eval(""repr(myPythonClass().abc())"");
System.out.println(str.toString());
</code></pre>

<p>If you want to supply it with some input from Java variables, you can use <code>set</code> beforehand and than use that variable name within your Python code:</p>

<pre><code>interpreter.set(""myvariable"", Integer(21));
PyObject answer = interpreter.eval(""'the answer is: %s' % (2*myvariable)"");
System.out.println(answer.toString());
</code></pre>
","java"
"807",3468101,"<p>In Python you use the <a href=""http://docs.python.org/library/inspect.html"" rel=""nofollow"">inspect</a> module.
Getting the function's name and file name is easy, as you see in the example below. </p>

<p>Getting the function itself is more work. I think you could use the <a href=""http://docs.python.org/library/functions.html?highlight=_import#__import__"" rel=""nofollow""><code>__import__</code></a> function to import the caller's module. However you must somehow convert the filename to a valid module name.</p>

<pre><code>import inspect

def find_caller():
    caller_frame = inspect.currentframe().f_back
    print ""Called by function:"", caller_frame.f_code.co_name
    print ""In file           :"", caller_frame.f_code.co_filename
    #Alternative, probably more portable way
    #print inspect.getframeinfo(caller_frame)

def foo():
    find_caller()

foo()
</code></pre>
","java"
"808",31649152,"<p>You are experiencing a deadlock between parent and child processes.</p>

<p>This is because your java application does not read anything from the child process until it has terminated. Python will buffer it's output (up to 64k on my system), and once the buffer has filled it will block on the next write. Because it is blocked, it will not terminate. Meanwhile the java parent is also blocked waiting for the child to terminate, which will not happen naturally.</p>

<p>To fix this you need to restructure your Java code such that it, rather than waiting for the child to terminate before processing its output, reads from the child until the child terminates, something like this:</p>

<pre><code>import java.io.*;

public class TestProcess {
    public static void main(String[] args)
        throws InterruptedException, IOException
    {
       ProcessBuilder pb = new ProcessBuilder(
           ""python"", absolutePath, params
       );
       Process ps = pb.start();

       BufferedReader reader = new BufferedReader(
           new InputStreamReader(ps.getInputStream())
       );

       String inputLine;
       while ((inputLine = reader.readLine()) != null) {
               System.out.println(inputLine);
       }

       ps.waitFor();
       int ec = ps.exitValue();
       System.out.println(""Child returned "" + ec);
   }
}
</code></pre>

<p>And your Python script could be:</p>

<pre><code>print 'a' * (1024*1024)
</code></pre>

<p>which would produce 1MiB of data.</p>
","java"
"809",6652492,"<p>Have a look at the maven-jython-compile-plugin and its demo project at <a href=""http://mavenjython.sourceforge.net/"" rel=""nofollow"">http://mavenjython.sourceforge.net/</a> . It allows bundling jython with dependencies into a standalone jar.</p>
","java"
"810",13424565,"<p>Your import and reference seem correct.</p>

<p>I suspect this is a bug in your editing environment, if you're using PyDev/Anapta:</p>

<p><a href=""http://jira.appcelerator.org/browse/APSTUD-7502"" rel=""nofollow"">http://jira.appcelerator.org/browse/APSTUD-7502</a></p>
","java"
"811",17367171,"<ol>
<li>Find the two points that are furthest from each other.  One will belong to Ellipse1, the other to Ellipse2.</li>
<li>Check the nearest neighbors of these points to get 5 points belonging to Ellipse1, and 5 to Ellipse2.</li>
<li>Check out <a href=""http://en.wikipedia.org/wiki/Ellipse"" rel=""nofollow"">Wikipedia</a>, and choose your favorite equation of an ellipse.</li>
<li>Using junior high algebra, for each ellipse, plug in the points to get 5 simultaneous equations, and solve these to get the 5 parameters that define your ellipse.</li>
</ol>

<p><strong>EDIT</strong></p>

<p>I didn't realize this was tagged ""matlab"".  In that case, once you have identified some points for each ellipse, there are <a href=""http://stackoverflow.com/a/9247597/21727"">matlab functions</a> for fitting the points to an ellipse.</p>
","java"
"812",6010916,"<p><a href=""http://en.wikipedia.org/wiki/Permutation#Numbering_permutations"" rel=""nofollow"">http://en.wikipedia.org/wiki/Permutation#Numbering_permutations</a></p>

<p>Basically, express the index in the factorial number system, and use its digits as a selection from the original sequence (without replacement).</p>
","java"
"813",22493765,"<p>If you want something noticeable, you can use</p>

<pre><code>assert true;
</code></pre>

<p>This will allow you to have something that a reader can recognize or that can be searched for.</p>
","java"
"814",1060484,"<p>Found what I was looking for:
<a href=""http://stackoverflow.com/questions/2861/options-for-html-scraping"">http://stackoverflow.com/questions/2861/options-for-html-scraping</a></p>
","java"
"815",22944444,"<p>You can use Pythons eval function through Java (and Jython) like this:</p>

<pre><code>public static boolean XLargerThanY(int x, int y) throws ScriptException {
  PyScriptEngineFactory factory = new PyScriptEngineFactory();
  ScriptEngine engine = factory.getScriptEngine();
  PyFunction function = (PyFunction) engine.eval(""x &gt; y"");
  PyBoolean ans = (PyBoolean) function.__call__(new PyInteger(x), new PyInteger(y));
  return ans.getBooleanValue();
}
</code></pre>
","java"
"816",23233104,"<p>Downgraded to a 2.7 version of Python and it works now </p>
","java"
"817",8454155,"<p>You have a problem with this approach, if the class has already been loaded by a JVM classloader, as it may not actually reread the .class file again until the application has been rerun.</p>

<p>I know that there exists the <a href=""http://commons.apache.org/bcel/"" rel=""nofollow"">BCEL</a> but I've not used it, so I dont know if it can be used a) from python, or b) during runtime.</p>

<p>EDIT: Actually, Jeffrey's list is better as it provides a much more comprehensive list of Byte Code manipulators.</p>
","java"
"818",6260311,"<p>Extract the python file from the jar by using the ""getResourceAsStream"" of the class.</p>

<p>See for example: <a href=""http://fiji.sc/wiki/index.php/Jython_Scripting#Distributing_jython_scripts_in_a_.jar_file"" rel=""nofollow"">http://fiji.sc/wiki/index.php/Jython_Scripting#Distributing_jython_scripts_in_a_.jar_file</a></p>
","java"
"819",7293618,"<p>If your Python code does not make much use of C based libraries you could run the code in <a href=""http://www.jython.org/"" rel=""nofollow"">Jython</a> which is Python run on the Java VM.</p>

<p>Otherwise you could write a small Java/jython executable that gets the information and writes it to stdout to be read by a CPython program calling it.</p>
","java"
"820",3760120,"<p>No, this kind of dynamic language construct is not supported in Java yet :-) So you have to live with your option 2</p>
","java"
"821",32216622,"<p><code>p.communicate()</code> will wait for the process to terminate according to <a href=""https://docs.python.org/2/library/subprocess.html#subprocess.Popen.communicate"" rel=""nofollow"">the subprocess docs</a>. Unless you plan to terminate and restart your java process each time you communicate, the second method (read/write) is all you have available.</p>
","java"
"822",15419471,"<p>You don't need to escape this. Just use <code>&lt;include/&gt;</code> instead of <code>includes</code> arg. Try this:</p>

<pre><code>&lt;project name=""test"" default=""clean""&gt;

    &lt;dirname property=""build.dir"" file=""${ant.file.test}"" /&gt;

    &lt;target name=""clean""&gt;
        &lt;delete&gt;
            &lt;fileset dir=""${build.dir}/test""&gt;
                &lt;include name=""**/*,*.xml"" /&gt;
            &lt;/fileset&gt;
        &lt;/delete&gt;
    &lt;/target&gt;

&lt;/project&gt;
</code></pre>

<p>By the way. You shouldn't use <code>.</code> (dot) in you <code>dir</code> argument. If you want to delete files in directory where you have got <code>build.xml</code> file you should pass absolute path (to do this you can use <code>&lt;dirname/&gt;</code> like in my example). If you will use <code>.</code> then you will have problems with nested build. Let's imageine that you have got two builds which delete files but first build also call second build:</p>

<p>maindir/build1.xml</p>

<pre><code>&lt;delete dir=""."" includes=""**/*.txt"" /&gt;
&lt;!-- call clean target from build2.xml --&gt;
&lt;ant file=""./subdir/build2.xml"" target=""clean""/&gt;
</code></pre>

<p>maindir/subdir/build2.xml</p>

<pre><code>&lt;delete dir=""."" includes=""**/*.txt"" /&gt;
</code></pre>

<p>In this case build2.xml won't delete *.txt files in subdir but *.txt files in maindir because ant properties will be passed to build2.xml. Of course you can use <code>inheritAll=""false""</code> to omit this but from my experience I know that using <code>.</code> in paths will bring you a lot of problems.</p>
","java"
"823",3265357,"<p>Start thinking in terms of a: <strong>blast from the past</strong> </p>

<p>Once upon a time, long long ago, there lived in the land of computing
interpreters and compilers. All kinds of fuss ensued over the merits of
one over the other. The general opinion <em>at that time</em> was something along the lines of:</p>

<ul>
<li>Interpreter: Fast to develop (edit and run). Slow to execute because each statement had to be interpreted into
machine code every time it was executed (think of what this meant for a loop executed thousands of times).</li>
<li>Compiler: Slow to develop (edit, compile, link and run. The compile/link steps could take serious time). Fast
to execute. The whole program was already in native machine code.</li>
</ul>

<p>A one or two order of magnitude difference in the runtime
performance existed between an interpreted program and a compiled program. Other distinguishing 
points, run-time mutability of the code for example, were also of some interest but the major
distinction revolved around the run-time performance issues.</p>

<p>Today the landscape has evolved to such an extent that the compiled/interpreted distinction is 
pretty much irrelevant. Many
compiled languages call upon run-time services that are not
completely machine code based. Also, most interpreted languages are ""compiled"" into byte-code
before execution. Byte-code interpreters can be very efficient and rival some compiler generated
code from an execution speed point of view.</p>

<p>The classic difference is that compilers generated native machine code, interpreters read source code and
generated machine code on the fly using some sort of run-time system. 
Today there are very few classic interpreters left - almost all of them
compile into byte-code (or some other semi-compiled state) which then runs on a virtual ""machine"".</p>
","java"
"824",17056441,"<p>This is as much a question about Maven as it is about Storm and its deployment model. You have to <a href=""https://github.com/nathanmarz/storm/blob/8cd0c067a5f176e07d66c90c5c4fa3624c0199f6/bin/storm"" rel=""nofollow"">check out what the <code>storm</code> command actually does</a>. First of all, it's actually a Python script that ultimately calls <code>java</code>.</p>

<p>If you look at the function <code>get_classpath(extrajars)</code>, you'll note that it does not use the <code>$CLASSPATH</code> evironment variable at all. Rather, it loads the core Storm jars and any jars that you have under a directory <code>lib/</code> relative to your working directory, as well as config files under <code>~/.storm</code></p>

<p>(You will find that ignoring <code>$CLASSPATH</code> is very common in many Java applications. Usually the first thing a ""launch script"" does is overwrite the CLASSPATH or not use it at all. This is to prevent unknown / unsupported / earlier versions of your jars from causing problems in your application).</p>

<p>As to your application fails when jsoup is declared ""provided"": when you declare the jar as a provided dependency, it will not be packaged in your ""jar with dependencies"" assembly.  See this question for a good explanation: <a href=""http://stackoverflow.com/questions/6646959/difference-between-maven-scope-compile-and-provided-for-jar-packaging"">Difference between maven scope compile and provided for JAR packaging</a> </p>

<p>The tl;dr explanation is that compile scope is shipped with your uber-jar, provided scope isn't, because it's expected to be ""provided"" by the container you are deploying to. Typically, the ""container"" is a Java web server, like Tomcat (hence, you should never have to ship JSP or Servlet jars with your web apps in Java). In this case, the ""container"" that you are expecting to ""provide"" classes is Storm. However, jsoup is not provided by Storm, hence your error.</p>

<p>Compile-scope classes still need to be shipped with your application because your application will be instantiating / using interfaces, enums, etc. </p>

<p>My recommendation is to just declare  jsoup ""compile"" scope and move on. The alternative will be to write your own bespoke deployment script and/or assembly that puts jsoup under <code>lib/</code> - essentially the same thing in the end.</p>
","java"
"825",6048528,"<p>A benefit from Pygame for the kind of game you want to do is the <a href=""http://www.pygame.org/project-Python+PyGame+Tower+Defence-1296-.html"">Python Pygame Tower Defense project</a> that could be a pretty good tutorial for what you want to do, isn't it ?</p>
","java"
"826",16570091,"<p>If you really, really want to obtain an equivalent result in Java, you'll have to do some more work:</p>

<pre><code>public int[] range(int start, int end, int step) {
    int n = (int) Math.ceil((end-start)/(double)step);
    int[] arange = new int[n];
    for (int i = 0; i &lt; n; i++)
        arange[i] = i*step+start;
    return arange;
}
</code></pre>

<p>Now <code>range(0, 4, 1)</code> will return the expected value, just like Python: <code>[0, 1, 2, 3]</code>. Sadly there isn't a simpler way in Java, it's <em>not</em> a very expressive language, like Python.</p>
","java"
"827",11475114,"<p>Your actual mistake is the 62nd line, <code>if ItemType == 3 &amp; ItemStr == 1:</code> - it should start with <code>elif</code>, or it breaks your (really <em>nasty</em>) if-cascade.</p>

<p>Another potential problem: in all your comparisons, ie <code>if ItemType == 1 &amp; ItemStr == 1:</code>, you are using bitwise and (<code>&amp;</code>) when you should be using logical and (<code>and</code>).</p>

<p>Here is a rewritten version. It is less than half the length, data-driven, and makes it much easier to spot inconsistencies (did you mean 'Diamond' or 'Emerald' in your material types?):</p>

<pre><code>class Item(object):
    types = [
        ('Item',    'Item'),
        ('Pickaxe', 'ItemPickaxe'),
        ('Shovel',  'ItemSpade'),
        ('Axe',     'ItemAxe'),
        ('Hoe',     'ItemHoe'),
        ('Sword',   'ItemSword')
    ]
    strengths = [
        ('Diamond', 'EnumToolMaterial.EMERALD'),    # ?? You might want to doublecheck this...
        ('Gold',    'EnumToolMaterial.GOLD'),
        ('Iron',    'EnumToolMaterial.IRON'),
        ('Stone',   'EnumToolMaterial.STONE'),
        ('Wood',    'EnumToolMaterial.WOOD'),
    ]

    javastring = 'public static final {type} {name} = new {type}({id}, {strength}).setItemName(""{name}"");'

    @classmethod
    def prompt_for_item(cls):
        s = ""Please enter your item's name:\n""
        name = raw_input(s).strip()

        types = [""[{}] {}"".format(i,n[0]) for i,n in enumerate(cls.types, 1)]
        s = ""Please enter item type:\n{}\n"".format('\n'.join(types))
        type_ = int(raw_input(s)) - 1

        s = ""Please enter item id (unique int):\n""
        id = int(raw_input(s))

        strengths = [""[{}] {}"".format(i,n[0]) for i,n in enumerate(cls.strengths, 1)]
        s = ""Please enter item strength:\n{}\n"".format('\n'.join(strengths))
        strength = int(raw_input(s)) - 1

        return cls(name, type_, id, strength)

    def __init__(self, name, type_, id, strength):
        self.name = name
        self.type = type_
        self.id = id
        self.strength = strength

    def write_to_file(self, fname=None):
        if fname is None:
            fname = '{}.java'.format(self.name)
        with open(fname, 'w') as outf:
            cls = type(self)
            outf.write(
                cls.javastring.format(
                    type = cls.types[self.type][1],
                    name = self.name,
                    id = self.id,
                    strength = cls.strengths[self.strength][1]
                )
            )

def main():
    it = Item.prompt_for_item()
    it.write_to_file()
    print 'File has been written'

if __name__==""__main__"":
    main()
</code></pre>
","java"
"828",29932956,"<p>Here's how to get the same result from both:</p>

<pre><code>byte[] mm3_le = Hashing.murmur3_128().hashString(""abc"", UTF_8).asBytes();
byte[] mm3_be = Bytes.toArray(Lists.reverse(Bytes.asList(mm3_le)));
assertEquals(""79267961763742113019008347020647561319"",
    new BigInteger(mm3_be).toString());
</code></pre>

<p>The hash code's bytes need to be treated as <em>little endian</em> but <code>BigInteger</code> interprets bytes as big endian. You were presumably using <code>new BigInteger(hex, 16)</code> to create the <code>BigInteger</code>, but the output of <code>HashCode.toString()</code> is actually a series of pairs of hexadecimal digits representing the hash bytes in the same order they're returned by <code>asBytes()</code> (little endian). (You can also reverse those pairs of hexadecimal to get a hex number that does produce the same result when passed to <code>new BigInteger(reversedHex, 16)</code>).</p>

<p>I think the documentation of <code>toString()</code> is somewhat confusing because of the way it refers to ""big endian""; it doesn't actually mean that the output of the method is the hexadecimal number representing the bytes interpreted as big endian.</p>

<p>We have an open <a href=""https://github.com/google/guava/issues/1323"">issue</a> for adding <code>asBigInteger()</code> to <code>HashCode</code>.</p>
","java"
"829",39604672,"<ol>
<li><p>There's no such thing as <code>byte</code> in Ruby. When you want to store a sequence of bytes, you store it in a string:</p>

<pre><code>module_guid = ""\xE1\x9A\x69\x01..."".force_encoding('ASCII-8BIT')
</code></pre>

<p>If you want to copy and paste from Java code, then use:</p>

<pre><code>module_guid = [0xe1, 0x9a, ...].pack('c*')
</code></pre>

<p>By the way, I didn't declare the variable as <code>ModuleGuid</code> because capitalized identifiers are for constants in Ruby, and I didn't see the <code>final</code> keyword in your Java code.</p></li>
<li><p>Arrays in Ruby are just arrays. They can store any kind of objects. There's no <code>int[]</code> or <code>String[]</code> or <code>Whatever[]</code> in Ruby. Ruby arrays don't have fixed sizes and can be expanded or shrink any time. Your second piece of Java code can be rewritten as:</p>

<pre><code>sensor_info = []
</code></pre>

<p>But, depending on your use-case, this statement itself may not be necessary because in Ruby you have sooooo many ways to obtain an array.</p></li>
</ol>
","java"
"830",17352469,"<p>There's a really good library for processing natural language text in <a href=""http://en.wikipedia.org/wiki/Python_%28programming_language%29"" rel=""nofollow"">Python</a> called <code>nltk</code>. You should take a look at it. </p>

<p>One strategy you could try is to look at n-grams (groups of words) with the word ""apple"" in them. Some words are more likely to be used next to ""apple"" when talking about the fruit, others when talking about the company, and you can use those to classify tweets.</p>
","java"
"831",7852853,"<p>There's a <a href=""http://download.oracle.com/javase/tutorial/uiswing/layout/none.html"" rel=""nofollow"">Swing tutorial</a> that gives a concise example on positioning widgets absolutely.</p>
","java"
"832",1999641,"<p>Use <a href=""http://github.com/polly/ffmpeg/"" rel=""nofollow"">FFmpeg</a> gem in Ruby, it's really cool and easy to use.</p>
","java"
"833",7167253,"<p>I think this should be the java functionality that resemble the python ""enumerate"" most, though it is quite complicated and inefficent. Basically, just map the list's indices to its elements, using ListIterator or Collector:</p>

<pre><code>List&lt;String&gt; list = new LinkedList&lt;&gt;(Arrays.asList(""one"", ""two"", ""three"", ""four""));
Map&lt;Integer, String&gt; enumeration = new Map&lt;&gt;();
ListIterator iter = list.listIterator();
while(iter.hasNext){
    map.put(iter.nextIndex(), iter.next());
}
</code></pre>

<p>or using lambda expression:</p>

<pre><code>Set&lt;Integer, String&gt; enumeration = IntStream.range(0, list.size()).boxed.collect(Collectors.toMap(index -&gt; index, index -&gt; list.get(index)));
</code></pre>

<p>then you can use it with an enhanced for loop:</p>

<pre><code>for (Map.Entry&lt;Integer, String&gt; entry : enumeration.entrySet){
    System.out.println(entry.getKey() + ""\t"" + entry.getValue());
}
</code></pre>
","java"
"834",899138,"<p>In Java 8 you can use method references:</p>

<pre><code>List&lt;String&gt; list = ...;
list.replaceAll(String::toUpperCase);
</code></pre>

<p>Or, if you want to create a new list instance:</p>

<pre><code>List&lt;String&gt; upper = list.stream().map(String::toUpperCase).collect(Collectors.toList());
</code></pre>
","java"
"835",4704558,"<p>There is some automated resource management in Python. Most objects who open resources will close them when they get garbage collected. When that happens is undefined, and it may not happen at all, so this only works if you don't use very many resources, don't care if they are open long and the resources will be closed by the operating system when the program exits.</p>

<p>Otherwise, use context managers and the with statement as per Matthews answer.</p>

<p>Here is a simple example that redirects stdout:</p>

<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; class redirect_stdout:
...     def __init__(self, target):
...         self.stdout = sys.stdout
...         self.target = target
...
...     def __enter__(self):
...         sys.stdout = self.target
...
...     def __exit__(self, type, value, tb):
...         sys.stdout = self.stdout
...
&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; out = StringIO()
&gt;&gt;&gt; with redirect_stdout(out):
...     print 'Test'
...
&gt;&gt;&gt; out.getvalue() == 'Test\n'
True
</code></pre>
","java"
"836",29464145,"<p>Thank you @KSFT; <code>subprocess.call()</code> doesn't return until the command finishes, but <code>subprocess.Popen()</code> does. So I made the call with <code>subprocess.Popen()</code> and then <code>time.sleep(0.5)</code>. Having the python script wait 0.5 seconds allows the java file enough time to open and initialize the socket connections.</p>
","java"
"837",3571773,"<p>The place to put a ""no two objects with same key"" registration is in <code>__new__</code>, like this:</p>

<pre><code>class Person(object):
    person_registry = {}
    mens_names = set('Tom Dick Harry'.split())
    womens_names = set('Mary Linda Susan'.split())
    gender = ""?""
    def __new__(cls, *args):
        if cls is Person:
            fname,lname = args[0].split()
            key = (lname, fname)
            if key in Person.person_registry:
                return Person.person_registry[key]

            if fname in Person.mens_names:
                return Man(*args)
            if fname in Person.womens_names:
                return Woman(*args)
        else:
            return object.__new__(cls, *args)

    def __init__(self, name):
        fname,lname = name.split()
        Person.person_registry[(lname, fname)] = self

class Man(Person):
    gender = ""M""

class Woman(Person):
    gender = ""W""

p1 = Person(""Harry Turtledove"")
print p1.__class__.__name__, p1.gender

p2 = Person(""Harry Turtledove"")

print p1 is p2
</code></pre>

<p>prints:</p>

<pre><code>Man M
True
</code></pre>

<p>I also took a stab at your Man/Woman distinction, but I'm not thrilled with it.</p>
","java"
"838",16994008,"<p>Jython cannot use <code>ctypes</code>, or C extension modules (whether built manually, or with Cython, or otherwise).</p>

<p>The way to do this is the same way as in Java: Through a JNI bridge.</p>

<p>First, you write a C++ wrapper that talks to the so, and uses functions from <code>&lt;jni.h&gt;</code> to implement functions like this:</p>

<pre><code>JNIEXPORT void JNICALL _PACKAGE(bar)(JNIEnv *env, jclass cls, jint i) {
    if (bar(i)) {
        throwPyFromErrno(env, OSError);
    }
}
</code></pre>

<p>Next, in Java, you define a <code>public</code> class full of Java wrappers around those C++ wrappers, like this:</p>

<pre><code>public class foo implements InitModule {
    public final static native void bar(int i);
}
</code></pre>

<p>Finally, in Jython, you can just import the class (which acts like a Python module) from its Java module and use it like any other module:</p>

<pre><code>try:
    foo.bar(3)
except OSError as e:
    print ""Failed:"", e
</code></pre>

<hr>

<p>Most of this is standard JNI, but you also have to know things like how to create Jython objects. Ideally, you'll use wrappers for that, so you can just write <code>makePyInteger(env, value)</code> or <code>throwPyFromErrno(env, exctype)</code> instead of doing all the <code>FindClass</code>, <code>GetStaticMethodID</code>, etc. stuff manually.</p>

<p>I don't have any tutorials to recommend. But see <a href=""http://sourceforge.net/projects/jnios/"" rel=""nofollow"">jnios</a> for a nice-sized example. The O'Reilly book's <a href=""http://docstore.mik.ua/orelly/other/python/0596001886_pythonian-chp-25.html"" rel=""nofollow"">Chapter 25. Extending and Embedding Jython</a> seems like it might be a decent primer (although I haven't read it). You'll probably want to read a tutorial on using JNI for Java before trying to tackle Jython.</p>
","java"
"839",21717660,"<p>It sounds like your true question is how a Python interpreter does what it does.  This is the subject of entire college-level courses, but here is the thrust.</p>

<p>The interpreter reads the Python source with a specialized function called a parser. This is an input processor that understands the exact structure of the Python language in the form of a <em>context free grammar</em>.</p>

<p>The parsing procedure checks the input for compliance with Python syntax rules (here is where syntax errors originate) and produces a data structure that has distilled the raw meaning of the Python program in the form of very simple steps represented in a simple array of bytes called byte code. </p>

<p>The complete process of input, parsing, and byte code production is called compilation. Yes, at its heart, Python has a simple kind of compiler.  </p>

<p>Byte codes do very basic things like arithmetic, testing and jumping to other byte code locations based on test results, string operations, calling and returning from functions, input, output, and all the hundreds of fundamental operations that Python programs perform that, when combined and executed quickly, make programs seem powerful.</p>

<p>Where the original Python source was reasonably close to human language (well, sort of...), the byte code is reasonably close to machine language: the patterns of 1's and zeros that processors understand as instructions.  Byte code is what's written to <code>.pyc</code> files when a program runs.  </p>

<p>It takes only a quite small and simple program (and hopefully a fast one) called the byte code interpreter (yes an interpreter within the Python interpreter) to process the byte code in order to have the processor do the work that the original Python program intended.</p>

<p>Of course if a <code>.pyc</code> file already exists and is newer than the corresponding source code, the compilation can be skipped.</p>

<p>There you have it... A college course in a few sentences. I have skipped enormous amounts of detail, and (a caveat) some of what I've written applies only to some of the many Python implementations out there, but it's a start at understanding.</p>

<p>The author of your book is saying that the implementation language of all above might be C or Java (the Jython implementation of Python). He left out that only a minimal core of Python is implemented in C or Java.  The rest is in Python itself.</p>

<p>If you're interested in knowing more, there are some reasonably good, low-cost and free sources.  See for example <a href=""http://www.codeproject.com/Articles/10115/Crafting-an-interpreter-Part-1-Parsing-and-Grammar"" rel=""nofollow"">this article</a> and also for not too much money try <a href=""http://www.lulu.com/shop/nils-m-holm/scheme-9-from-empty-space/ebook/product-17363264.html"" rel=""nofollow"">Scheme 9 From Empty Space</a> for how an interpreter of a language other than Python is implemented.</p>
","java"
"840",6970359,"<blockquote>
  <p>1) Do you think that would work for cpu-demanding and highly repetitive tasks? Or would the overhead added by the pipe-communication be too heavy?</p>
</blockquote>

<p>Depends on your task. If this is a typical NLP app where you have a large model loaded in memory and you only communicate relatively small pieces of data (strings in, label sequences/parse trees out), it may work. Pipe communication is hard to get right, though, since there's a lot of buffering and synchronization issues you have to tackle. Python is a very good glue language, but it doesn't solve everything.</p>

<blockquote>
  <p>2) Is there any other (preferably simple) architecture that you would suggest?</p>
</blockquote>

<p>Make your NLP components services and connect to them via REST interfaces. There are off-the-shelf tools that do this, e.g. <a href=""http://ilk.uvt.nl/clam/"" rel=""nofollow"">CLAM</a>. <a href=""http://irmen.home.xs4all.nl/pyro/"" rel=""nofollow"">Pyro</a> and <a href=""http://www.freenet.org.nz/python/spiro/"" rel=""nofollow"">SPIRO</a> make communication between Java and Python even more direct and might be easier to use than HTTP/REST (but YMMV).</p>

<p>The parts that are written in C/C++ can also be integrated with CPython using <a href=""http://cython.org/"" rel=""nofollow"">Cython</a>. Don't start implementing things in C or C++ because you <em>think</em> they'll be faster, though; you can also implement them in Python first, then see if you can get the desired performance with NumPy and/or Cython.</p>
","java"
"841",15950937,"<p>The following solution is to ensure that spawned process completes before executing the next command. It guarantees the cycle 'send - expect - wait for completion of the command sent in send' and then 'send again - expect again - wait for completion' .</p>

<p>In order to wait for command prompt to finish executing the spawned process, use <code>shell.expect("""")</code>. If in case there are further expectJ send and expect commands after this, sequential execution can be ensured. If there is no <code>shell.expect("""")</code> the next step <code>shell.send(""exit\n"")</code> is executed without waiting for the completion of the process that it has already spawned, in the following case scp command is put to completion before next command is issued.</p>

<pre><code>import expectj
expectinator = expectj.ExpectJ();
shell = expectinator.spawn(expectj.SshSpawn(host_name, 22, usr_name, ssh_pwd));
shell.send(""scp -r src:usr:dest"" + ""\r"")
shell.expect(remote_box_usr + ""'s password:"");
shell.send(ssh_pwd + ""\r"");
shell.expect("""");
shell.send(""exit\n"");
shell.expectClose();
</code></pre>
","java"
"842",3971765,"<p>You can't do this directly with only a variable, because in Java variables cannot override (they only shadow the super classes variables).</p>

<p>You need to use a protected ""getter"" method, which can then be overridden by the subclass:</p>

<pre><code>class A
{
private int attribute=42;

...

protected int getAttribute() {
    return attribute;
    }
}

class B
extends A
{
private int attribute=44;

...

protected int getAttribute() {
    return attribute;
    }
}
</code></pre>

<p>But note there's a special consideration to calling methods from an object's constructor, in that it allows object code to run before object construction is complete.</p>
","java"
"843",454498,"<p>You can treat this as a substring problem, where characters in the alphabet are pixels and your string is the image. You would need also to use a special character in a similar vein to a linebreak, to denote the image boundary.</p>

<p>The algorithm you want is on wikipedia: <a href=""http://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm"" rel=""nofollow"">http://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm</a></p>

<p><strong>Update:</strong> If you cannot assume that the image is perfectly contained within the other, pixel for pixel, then this approach will not work. </p>

<p>There are other, more complicated algorithms based on the same dynamic programming concept as the above, but I won't go into them unless it's necessary.</p>
","java"
"844",11507800,"<p>Check out Jython ( <a href=""http://www.jython.org/"" rel=""nofollow"">http://www.jython.org/</a> )</p>

<p>It's a python implementation in Java.</p>

<p>In theory you shouldn't have to change your python code (if it ""good quality""), but in practice I suggest that you will have to make some changes here and there.  I don't personally use Jython, but all the various python implementations are usually more-or-less compatible, but not identical.  You won't be able to use python libraries that rely on the C ABI, but pure python scripts should work.</p>
","java"
"845",10101249,"<p>No, not all the libraries have been exposed. You can look at the <a href=""http://code.google.com/p/android-scripting/"" rel=""nofollow"">SL4A project on google-code</a> for more information regarding the support it has.</p>

<blockquote>
  <p><strong>Is this a complete API bridge, or are there restrictions?</strong><br>
  BeanShell, JRuby, and Rhino basically give you a complete API bridge (you can invoke Java calls directly). See the documentation for those interpreters for instruction on how to accomplish this. Cross compiled languages like Lua are more restricted. They only have access to the APIs exposed through the RPC layer. See the API reference for a list of currently supported APIs. The RPC layer is easy to extend.</p>
</blockquote>
","java"
"846",27670368,"<p>The problem is that the server code uses a fixed IV (which is bad) with zeroes in it, but in your python code, you pass a new randomly generated IV to <code>AES.new</code>.</p>

<p>You can replace <code>rndfile.read(BLOCK_SIZE)</code> with <code>""\x00""*BLOCK_SIZE</code>.</p>
","java"
"847",13546052,"<p>Since there are no explicit restrictions on placing internal classes, then you should try handle all the possible (or as much as possible) places.</p>

<p>First of all, you should definitely look for <code>java</code> in PATH. Unfortunately, it will fail sometimes, for instance, you can often find <code>java.exe</code> in <code>C:\Windows\System32</code>. Fortunately, in case of Windows you can use registry to get a list of installed JREs.</p>

<p>If you have found some jars which might contain basic classes, you can use <code>zip</code> or <code>jar</code> to check that <code>java/lang/Object.class</code> is there.</p>
","java"
"848",23817840,"<p>This question has been asked a few ways before.  The key observation is that, unless you have perfect size and splitting information (basically, if your source is an array), then this would be a sequential-only operation. </p>

<p>The ""unappealing"" answer you propose:</p>

<pre><code>IntStream.range(0, myList.size())
         .mapToObj(i -&gt; doSthWith(myList.get(i), i));
</code></pre>

<p>is actually quite efficient when <code>myList</code> is an <code>ArrayList</code> or other list with a fast O(1) indexed-get operation, and parallelizes cleanly.  So I think there's nothing wrong with it.  </p>
","java"
"849",2881825,"<p>Are osgi-bundles what you search ?</p>

<p><a href=""http://en.wikipedia.org/wiki/OSGi"" rel=""nofollow"">http://en.wikipedia.org/wiki/OSGi</a></p>
","java"
"850",9577012,"<p>Apache ActiveMQ <a href=""http://activemq.apache.org/"" rel=""nofollow"">http://activemq.apache.org/</a></p>

<p>Apache Kafka <a href=""http://kafka.apache.org/"" rel=""nofollow"">http://kafka.apache.org/</a></p>
","java"
"851",27340302,"<p>It would be possible using FFT/frequency analysis, but a RaspberryPi does not have the computational power. I built something similar but based on MIDI. MIDI is a music protocol/format to play music/control music instruments. MIDI files contain data about music notes which can be mapped easily to channels and control light circuits. </p>

<p>My code is open source (<a href=""https://github.com/mp911de/midi-relay"" rel=""nofollow"">https://github.com/mp911de/midi-relay</a>) and written in Java. Should be possible to read MIDI also using Python. The other thing is, you need to control somehow your lights. GPIO does not provide enough power to operate christmas lights (my LED circuits need about 0,5A@24V (about 12W). This means, you have to use some sort of controllable switch/relay with external power supply. I used an ethernet-controllable relay for this. </p>

<p>This year, I put my christmas lights online, you can find the code at <a href=""https://github.com/mp911de/heckenlights"" rel=""nofollow"">https://github.com/mp911de/heckenlights</a> and the site at <a href=""http://heckenlights.org"" rel=""nofollow"">http://heckenlights.org</a>. The Github code contains some schematics on how to connect and control lights.</p>
","java"
"852",7592565,"<p>Is there any particular reason you cant use Jython ? My understand is that is pretty much a real subsitute for the real thing.</p>
","java"
"853",5351102,"<p>More complete and more correct code - object is important since it change class model - contructor in this case is not since not input parameters - python have faster initialization in this case.</p>

<p>Have a fun ...</p>

<pre><code>class Bicycle(object):
  cadence = 0
  speed = 0
  gear = 1

  def changeCadence(self, newValue):
    self.cadence = newValue

  def changeGear(self, newValue):
    self.gear = newValue

  def speedUp(self, increment):
    speed += increament

  def applyBrakes(self, descrement):
    speed -= decreament

  def printStates(self):
    print 'cadence: %s speed: %s gear: %s' % (self.cadence, self.speed, self.gear)

if __name__ == ""__main__"":
  # Create two different Bicycle objects
  bike1 = Bicycle()
  bike2 = Bicycle()

  # Invoke methods on those objects
  bike1.changeCadence(50)
  bike1.speedUp(10)
  bike1.changeGear(2)
  bike1.printStates()

  bike2.changeCadence(50)
  bike2.speedUp(10)
  bike2.changeGear(2)
  bike2.changeCadence(40)
  bike2.speedUp(10)
  bike2.changeGear(3)
  bike2.printStates()
</code></pre>
","java"
"854",6551718,"<p>We had been using <a href=""http://download.oracle.com/docs/cd/E19575-01/821-0030/aelao/index.html"" rel=""nofollow"">GlassFish Message Queue</a> (formerly Sun Java MQ) - it is inherited from <a href=""http://mq.java.net/"" rel=""nofollow"">OpenMQ</a></p>

<p>It satisfies most of your requirements, if not all.
We had been using fail over-clustered brokers in Red Hat Linux (RHEL) - it is reliable for heavy usage. Though some 'quirks' lurk here and there.</p>
","java"
"855",15474780,"<p>Two alternatives;</p>

<p>1-) <a href=""http://pic.dhe.ibm.com/infocenter/wasinfo/v6r1/index.jsp?topic=/com.ibm.websphere.express.doc/info/exp/ae/tjmx_customjava.html"" rel=""nofollow"">Create a custom Java administrative client program using WebSphere Application Server administrative Java APIs</a>. The Java API and wsadmin scripts manipulate the same administrative service MBeans, so they are identical except syntax. You may convert your Jython scripts to Java routines and use them directly.</p>

<p>2-) Since you already developed scripts, this may be more tempting; you may use <code>Runtime.exec</code> to spawn and execute wsadmin scripts as external processes from within your Swing application. </p>
","java"
"856",4909306,"<p>Python web frameworks do it in a similar way as some Java-based frameworks. I can speak for Django here.</p>

<p>A good comparison could be Play! vs. Django. Both of them foster using an MVC architecture (or MTV = models, templates, views) and already provide you with a lot of things like CRUD operations in admin pages, ORM, authentication, URL configurations, a template language and much more.</p>

<p>Other Java-based frameworks might differ a lot, and I can't give you a general answer. Depending on the choice, there are only few differences. You can simply choose the language and framework you like the most. I'd recommend to go through some tutorials (<a href=""http://docs.djangoproject.com/en/dev/intro/tutorial01/"" rel=""nofollow"">Django tutorial</a>, <a href=""http://www.playframework.org/documentation/1.1.1/guide1"" rel=""nofollow"">Play! framework tutorial</a> for instance) and look which one works best for your needs.</p>
","java"
"857",23679658,"<p>Plain text can be put into a JSON string just fine. Use a JSON library (like Python's ]<code>json</code> module](<a href=""https://docs.python.org/2/library/json.html"" rel=""nofollow"">https://docs.python.org/2/library/json.html</a>)) to ensure the data is escaped correctly:</p>

<pre><code>import json

with open('some_text_file.txt') as txtfile:
    data = {'filedata': txtfile.read()}

json_data = json.dumps(data)
</code></pre>

<p>In Python 2, if you have non-ASCII text you may need to decode the text to Unicode explicitly to ensure it is encoded with the right codec when encoding to JSON again.</p>
","java"
"858",3864223,"<p>We use Maven and pull out to the ant-plugin when required.  In turn the ant-plugin <em>very</em> occasionally calls out to some native scripting language/application/packager/whatever but we're finding that over time we can generally find a Maven or ANT plugin/task to do the trick.</p>

<p>You might want to look up Continuous Deployment, it's a pretty hot topic in the  build and CI space right now.</p>
","java"
"859",31536071,"<p>You are misunderstanding several things here:</p>

<p><strong>Standalone</strong></p>

<p>This does <strong>not</strong> mean ""local"". Standalone mode is the application master builtin Spark, which can be replaced by <a href=""https://hadoop.apache.org/docs/r2.4.1/hadoop-yarn/hadoop-yarn-site/YARN.html"" rel=""nofollow"">YARN</a> or <a href=""https://mesos.apache.org/"" rel=""nofollow"">MESOS</a>. You can use as many nodes as you want. You can indeed only run locally, on a given number X of threads, by, for example, running the <code>./bin/spark-shell --master local[X]</code> command.</p>

<p><strong>Cores/memory</strong></p>

<p>Those number reflect the total amount of resources in your cluster, rounded up. Here, if we do the math, you have <code>4 * 4 cpus = 16 cpus</code>, and <code>4 * 2.7 GB ~= 11 GB</code> of memory.</p>

<p><strong>Resource management</strong></p>

<blockquote>
  <p>If I have a hadoop cluster, how the cores should be shared</p>
</blockquote>

<p>A Hadoop cluster is different from  Spark cluster. There is several ways to combine both of them, but most of the time the part of Hadoop you'll be using in combination with Spark is HDFS, the distributed filesystem.</p>

<p>Depending on the application master you're using with Spark, the cores will be managed differently:</p>

<ul>
<li><p>YARN use <strong>node managers</strong> on the nodes, to launch <strong>containers</strong> in which you can launch Spark's <strong>Executors</strong> (one executor = one jvm)</p></li>
<li><p>Spark Standalone use <strong>workers</strong> as a gateway to launch the Executors</p></li>
<li><p>Mesos directly launch executors</p></li>
</ul>

<p><strong>Scheduling</strong></p>

<p>Hadoop and Spark use a technique known as <em><a href=""http://www.cs.berkeley.edu/~matei/papers/2010/eurosys_delay_scheduling.pdf"" rel=""nofollow"">delay scheduling</a></em>, which basically rely on the principle that an application can decide to refuse an offer from a worker, to place one of it's tasks, with hope that it can later receive a better offer, in terms of <strong>data locality</strong>.</p>

<blockquote>
  <p>How I can improve the speed of programm execution?</p>
</blockquote>

<p>This is a complex question that can not be answer without knowledge of your infrastructure, input data, and application. Here are some of the parameters that will affect your performances:</p>

<ul>
<li>Amount of memory available (mainly, to cache RDD that are often used)</li>
<li>Use of compression for your data/RDD</li>
<li>Application configuration </li>
</ul>

<blockquote>
  <p>Is it possible to run all applications parallel to each other? </p>
</blockquote>

<p>By default, the Standalone master uses a FIFO scheduler for it's apps, but you can set up the Fair Scheduler inside an application. For more details, see the <a href=""https://spark.apache.org/docs/latest/job-scheduling.html#scheduling-within-an-application"" rel=""nofollow"">scheduling documentation</a>.</p>
","java"
"860",22493765,"<p>If you want something noticeable, you can use</p>

<pre><code>assert true;
</code></pre>

<p>This will allow you to have something that a reader can recognize or that can be searched for.</p>
","java"
"861",7167253,"<p>Now with Java 8s Stream API together with the small <a href=""https://github.com/poetix/protonpack"" rel=""nofollow""><code>ProtonPack</code></a> library providing <code>StreamUtils</code> it can be achieved easily.</p>

<p>The first example uses the same for-each notation as in the question:</p>

<pre><code>Stream&lt;String&gt; numbers = Arrays.stream(""zero one two"".split("" ""));
List&lt;Indexed&lt;String&gt;&gt; indexedNumbers = StreamUtils.zipWithIndex(numbers)
                                                  .collect(Collectors.toList());
for (Indexed&lt;String&gt; indexed : indexedNumbers) {
    System.out.println(indexed.getIndex() + "" "" + indexed.getValue());
}
</code></pre>

<p>Above although does not provide the lazy evaluation as in Python.
For that you must use the <code>forEach()</code> Stream API method:</p>

<pre><code>Stream&lt;String&gt; numbers = Arrays.stream(""zero one two"".split("" ""));
StreamUtils.zipWithIndex(numbers)
        .forEach(n -&gt; System.out.println(n.getIndex() + "" "" + n.getValue()));
</code></pre>

<p>The lazy evaluation can be verified with the following infinite stream:</p>

<pre><code>Stream&lt;Integer&gt; infStream = Stream.iterate(0, i -&gt; i++);
StreamUtils.zipWithIndex(infStream)
        .limit(196)
        .forEach(n -&gt; System.out.println(n.getIndex() + "" "" + n.getValue()));
</code></pre>
","java"
"862",31905508,"<p>The answer for this issue was eventually found <a href=""http://www.datastax.com/dev/blog/4-simple-rules-when-using-the-datastax-drivers-for-cassandra"" rel=""nofollow"">here</a>:</p>

<blockquote>
  <p>Can I combine Batches and PreparedStatements?</p>
  
  <p>Starting with Cassandra 2.0 and the corresponding versions of the C#,
  Java, and Python drivers, PreparedStatements can be used in batch
  operations (nb before that you could still prepare a complete batch
  operation, but you’d need to know apriori the number of statements
  that will be included).</p>
</blockquote>

<p>Since my Cassandra version is 1.2xx, I cant use batch updates and prepared statements. </p>

<p>A work around is to create the query as a string (Ya, that's dirty) and than execute the string query.</p>
","java"
"863",11512752,"<p>It seems that the compiler generates a call to <code>B.test</code> in the bytecode even though <code>B</code> doesn't declare a method named <code>test</code>.</p>

<pre><code>Bytecode of main method:

invokestatic #5 = Method B.test(()V)
return
</code></pre>

<p>Given the names of a class and method (<code>""B""</code> and <code>""who""</code>) you can easily use reflection to call the method. So the question becomes</p>

<blockquote>
  <p>Can you extract <code>B</code> by combining the call stack and bytecode inside <code>A.test</code>?</p>
</blockquote>

<p>You'll need to use the return address stored on the stack to locate the call to <code>B.test</code> in the bytecode and extract the declared call. There are plenty of bytecode manipulation libraries, but I don't know if any of them allow you to tie that to the execution stack in the JVM.</p>
","java"
"864",27359013,"<p>After read the <a href=""http://lucene.apache.org/pylucene/jcc/features.html"" rel=""nofollow"">document of jcc</a>, I solved this by myself.
This problem is the same as <a href=""http://stackoverflow.com/questions/13426157/delimitedpayloadfilter-in-pylucene"">this one</a>.</p>

<p>My solution is:</p>

<p>Add some code to this file <code>pylucene/java/org/apache/pylucene/search/similarities/PythonDefaultSimilarity.java</code>:</p>

<pre><code>import org.apache.lucene.util.BytesRef;
public native float scorePayload(int docId, int start, int end, BytesRef payload);
</code></pre>
","java"
"865",21564658,"<p>There is no single ready-made Python function that's equivalent, but I think two functions combined cover the whole range. For ASCII characters 0..9 and A..Z, <code>int()</code> with a proper base argument (36) suffices. For getting the numeric value of a unicode code point, there's <a href=""http://docs.python.org/3/library/unicodedata.html#unicodedata.numeric"" rel=""nofollow"">unicodedata.numeric</a>, discounting the fact that it returns a float.</p>
","java"
"866",1540519,"<h3>Mathematica</h3>

<pre><code>a[0] = 1;
a[n_] := a[n] = 1 - 1/(a[n-1] + 3)
</code></pre>

<p>(Note the <a href=""http://stackoverflow.com/questions/129877/how-do-i-write-a-generic-memoize-function/173038#173038"">memoization trick</a>.)</p>

<p>Also, a[n] converges (very quickly) to sqrt(3)-1:</p>

<pre><code>Solve[x == 1 - 1/(x+3), x]
</code></pre>
","java"
"867",12028908,"<p>For Java, you can search JNI (Java Native Interface), there're a lot of guides telling how to use it.</p>
","java"
"868",36422665,"<p>In vain of what Klaus D.is saying, the <strong>recv</strong> guarantees how much data at most it will wait for, it might decide to handle what it has before the size is reached. I used a simple <strong>buffer</strong>, although I am sure there might be better ways:</p>

<pre><code>import socket
import atexit

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_address = (""localhost"", 10000)
print ('starting up on %s port %s' % server_address)
sock.bind(server_address)

sock.listen(5)

def close(connection):
    connection.close()

while True:
     print ('waiting for a connection')
     connection, client_address = sock.accept()
     atexit.register(close, connection)

     try:
         print ('connection from', client_address)

         buffer=[]
         while True:

             data = connection.recv(1024)
             for b in data:
                buffer.append(b)
             print ('received: ' + str(data))
             print (type(data))

             if str(buffer[-1]) == '\n': #if changed to use the buffer to decide when done receiving, the newline is the terminator
                 print ('sending data back to the client')
                 connection.sendall(''.join(buffer))
                 buffer = []
             # else:
             #     print ('no more data from', client_address)
             #     break

     finally:
         close(connection)
</code></pre>

<p>The <strong>atexit</strong> is to close the socket gracefully in case your program crashes</p>
","java"
"869",15830612,"<p>According to the <a href=""http://robotframework.googlecode.com/hg/doc/userguide/RobotFrameworkUserGuide.html?r=2.7.7#using-windows-installer"" rel=""nofollow"">doc</a>, the Windows installer needs Python to be installed. Perhaps you can uninstall it once Robot Framework in installed (not tested).</p>

<p>If you're ok with Jython 2.5, you should use the <a href=""https://code.google.com/p/robotframework/downloads/list"" rel=""nofollow"">standalone JAR distribution</a>. If you really want Jython 2.7, then you may need to <a href=""http://robotframework.googlecode.com/hg/doc/userguide/RobotFrameworkUserGuide.html?r=2.7.7#installing-from-source"" rel=""nofollow"">install from source</a>, but it really doesn't look complicated.</p>
","java"
"870",38057993,"<p>I wrote a little awk script that did the trick , doing it in java involves lot of coding.</p>

<h1>Awk script below.</h1>

<pre><code>BEGIN {
    FS = "",""
    OFS = "",""
}                                                                                                                                                                                                                                               
(NR == 1) {
    for (i=2;i&lt;NF;i++) {
        hdr[i-1]=$i;
    }
    print $1,""ID"",""VALUE""
}

(NR &gt; 1) {
    dt=$1
    for (i=2;i&lt;NF;i++) {
        print dt,hdr[i-1],$i
    }
}
</code></pre>
","java"
"871",12042654,"<p>Default GAE sessions are based on cookies (in GAE production its named ACSID or SACSID) which are NOT subdomain cookies. </p>

<p>About subdomain cookies: <a href=""http://serverfault.com/questions/153409/can-subdomain-example-com-set-a-cookie-that-can-be-read-by-example-com"">http://serverfault.com/questions/153409/can-subdomain-example-com-set-a-cookie-that-can-be-read-by-example-com</a></p>

<p>To make this work you should write your own custom session handler. </p>
","java"
"872",24658756,"<p>You could write a second, simpler function that evaluates the difference between the desired value y and the output of <em>function</em>, then evaluate a new x as a proportion of the difference. For example, in Python</p>

<pre><code>while abs(y-desired) &gt; *whatever accuracy you need*:
   y = function(x)
   x = x + (x*((desired - y)/desired))
return x
</code></pre>

<p>By finding (desired - y), you find how far off the answer was, as well as making the change positive if y is too small or negative if y is too big. This difference is divided by desired to make the difference a percent error. Finally, the percent is multiplied by x to make the percent error into a change proportional to the range of x, whatever that may be.</p>

<p>The formula may need to be changed slightly based on the specifics of your case, but I think this should help you get a more accurate answer with many fewer runs through the big function.</p>
","java"
"873",18219529,"<p>The closest I can think of, would be using <a href=""https://logging.apache.org/log4j/"" rel=""nofollow"">Log4J</a> and configuring the <a href=""https://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/net/SyslogAppender.html"" rel=""nofollow"">SyslogAppender</a> so it writes to syslog. Sorry, that's not as easy as in Python!</p>
","java"
"874",20222411,"<p>I suspect you're making this rather more work for yourself than you really need to, but here goes.</p>

<p>If you're going to go for a line-by-line port, then <em>do that</em>.</p>

<ol>
<li><p>Don't declare result as an array of strings.  That'll just give you a headache.  Make it either a <code>StringBuilder</code> or a plain <code>String</code> as I do here (<code>StringBuilder</code> will be more efficient, admittedly, but this is probably easier to understand).  This is also more similar to the python code you already have.</p></li>
<li><p>Understand what your python code is doing.  It's taking a string in hex format, parsing it to an integer, adding a value (<code>theShift</code>), converting <em>back</em> into hex, and then getting just the numeric part of the string (without the leading <code>0x</code>).  So in Java, that loop goes like this.  (<strong>NOTE</strong>: in Java <code>Integer.toString(x, 16)</code> does <em>not</em> print the leading <code>0x</code>, so we don't need to chop it off).</p>

<pre><code>String result = """";
for (String thisHex : theHexArray) {
    result += Integer.toString(Integer.parseInt(thisHex, 16) + theShift, 16) + "" "";
}
</code></pre></li>
<li><p>Lose the <code>toText</code> method.  At this point you have the string you wanted, so that method doesn't really do anything anymore.</p></li>
</ol>
","java"
"875",39611281,"<p>I'm trying to achieve a similar result (direct connection via BLE without SDK on Windows/other OS) but even if I managed to connect to the band ""manually"" it is impossible for me to understand the GATT profiles to read the data from sensors. I can't find any (unofficial) documentation on the web to read data directly.</p>
","java"
"876",8713990,"<p>Use while loop:</p>

<pre><code> while True:

      if condition1:
            statements
      elif condition2:
            statements
      ...
      else:
            statements
</code></pre>
","java"
"877",5988622,"<p>hey @czuk would a <a href=""http://download.oracle.com/javase/1.4.2/docs/api/java/lang/Runtime.html#addShutdownHook%28java.lang.Thread%29"" rel=""nofollow"">ShutdownHook</a> hook be any use? This will deal with the following scenarios</p>

<p>The Java virtual machine shuts down in response to two kinds of events:</p>

<ul>
<li><p>The program exits normally, when the last non-daemon thread exits or when the exit (equivalently, System.exit) method is invoked, or</p></li>
<li><p>The virtual machine is terminated in response to a user interrupt, such as typing ^C, or a system-wide event, such as user logoff or system shutdown. </p></li>
</ul>

<p>When the system unexpectedly crashes this is not so easy to capture.</p>

<p>Perhaps use the <a href=""http://download.oracle.com/javase/1.5.0/docs/api/java/lang/Thread.html#setUncaughtExceptionHandler%28java.lang.Thread.UncaughtExceptionHandler%29"" rel=""nofollow"">Thread.setDefaultUncaughtExceptionHandler</a> method?</p>
","java"
"878",34422009,"<p>You get this pretty much automatically if you just use regular Processing objects and syntax.</p>

<p>For example, you might use two <code>PVector</code> instances to define your endpoints.</p>

<pre><code>class Line{
   PVector p1;
   PVector p2;

   public Line(float x1, float y1, float x2, float y2){
      p1 = new PVector(x1, y1);
      p2 = new PVector(x2, y2);
   }
}
</code></pre>

<p>And then if you want to change one of those endpoints, you could simply access the <code>PVector</code> instances directly:</p>

<pre><code>Line myLine = new Line(0, 10, 25, 100);
println(myLine.p1.x + "", "" myLine.p1.y);
myLine.p1.x = 750;
println(myLine.p1.x + "", "" myLine.p1.y);
</code></pre>

<p>You also get all the math stuff already defined in the <a href=""https://www.processing.org/reference/PVector.html"" rel=""nofollow"">PVector class</a>.</p>

<p>You could better ""protect"" your <code>PVector</code> variables by making them final or only allowing users of your <code>Line</code> class to change the endpoints through setters that then access the <code>PVector</code> instances.</p>

<p><strong>Edit</strong>: I'll try to answer your additional questions here.</p>

<blockquote>
  <p>is public necessary?</p>
</blockquote>

<p>It depends on exactly how you're using this class, how you want other people to be able to access it, etc. You can learn about this in <a href=""https://processing.org/reference/public.html"" rel=""nofollow"">the Processing reference</a>, or just google something like ""java access modifiers"". Or you can just try taking it out and see what happens.</p>

<blockquote>
  <p>what if I want both the vanilla definition of a line (x1, y1, x2, y2) and the parameterized (u1, u2, v1, v2, s.t. x1 = u1 and x2 = u1 + v1, etc) versions simultaneously? In this case, and importantly, if x2 is updated, so should v1 be updated.</p>
</blockquote>

<p>I'm not exactly sure what you're asking here. When you write your class, you can decide <strong>how you represent your state</strong> and <strong>how you let people interact with that state</strong>.</p>

<p>For example, my example above uses two <code>PVector</code> instances to represent the line, and it lets people interact with them directly to modify that line. But I could add a function that lets them define a line as a single point, an angle, and a distance. I just have to make sure I calculate the second point so I can store my state. Something like this:</p>

<pre><code>class Line{
   PVector p1;
   PVector p2;

   public Line(float x1, float y1, float x2, float y2){
      p1 = new PVector(x1, y1);
      p2 = new PVector(x2, y2);
   }

   public Line(PVector origin, float angle, float distance){
      p1 = origin;
      p2 = new PVector(origin.x + cos(angle)*distance, origin.y + sin(angle)*distance);
   }
}
</code></pre>

<p>Notice that second constructor allows the user to specify a line in a completely different way, but I'm still storing my state as two <code>PVector</code> instances. You could store the <code>angle</code> and <code>distance</code> values if you need them later, and you could have setters that allow the user to modify them- you just have to update your <code>PVector</code> values accordingly.</p>
","java"
"879",454498,"<p>If rotation also had to be catered for, the <a href=""http://homepages.inf.ed.ac.uk/rbf/HIPR2/hough.htm"" rel=""nofollow"">Generalised Hough Transform</a> can be used.</p>
","java"
"880",132411,"<p>use indent(1) and ctopy(1)... for extra credit test speeds on pypy... for bonus credit use pyastra to generate assembly code.</p>

<p>Regardless of language you will always have to sacrifice storing outputs of various constructs and functions between run-time space (CPU) or memory-space (RAM).</p>

<p>Check the great language shootout if you want to see what I'm talking about either way this is too much comp sci snobbery... </p>

<p>Here is an example, want to use floating point math without using floating point numbers?</p>

<pre><code>x * 1,000,000 = a
y * 1,000,000 = b
a {function} b = result
result / 1,000,000 = z
</code></pre>

<p>Don't get bogged down, get primal, use caveman math if you have to.</p>
","java"
"881",5515157,"<p>When developing in a framework, it is generally simpler to develop with the language of the framework than it is to develop with a different language.</p>

<p>Servlets are components of the web server (which is also called a Servlet container).  The Servlet container and the required Servlet API is all Java.  While you could Frankenstein in some sort of Python code, odds are good that the integration effort would eventually make that ""simplicity"" far more complex than you particularly desire.</p>

<p>If you want a Python web application, use a Python web framework.  If you want a Java web application, use a Java framework.  Don't try to make the two cross compatible, as the integration points (and used / offered conveniences) are not even guaranteed to be present on the ""other side"" of the fence.</p>
","java"
"882",2983264,"<p>It's fine.<br>
all that ""table locking/row locking"" is the crap databases were invented to take care for.   </p>

<p>There can be other issues when ""thousand users load the page at same time"", like index updating. But that's another story and noobily MySQL setup isn't a case anyway.</p>
","java"
"883",28755003,"<p>Assuming you meant <code>i+1</code>, not <code>1+1</code>, the  code</p>

<pre><code>for (i = 0; i &lt; N - 1; i++)
    for(j = i+1; j &lt; N; j++)
        //code
</code></pre>

<p>is equivalent to</p>

<pre><code>int k = 2 * N - 1;
for (int ij = 0; ij &lt; N * (N - 1) / 2; ij++) {
    int i = (int) Math.floor((k - Math.sqrt(k * k - 8 * ij)) / 2);
    int j = i + 1 + ij - (k - i) * i / 2;
    //code
}
</code></pre>

<p>This is completely pointless though...</p>
","java"
"884",25111904,"<blockquote>
  <p>Is Jython the same language as Python?</p>
  
  <p>Yes. Jython is an implementation of the Python language for the Java
  platform. Jython 2.5 implements the same language as CPython 2.5, and
  nearly all of the Core Python standard library modules. (CPython is
  the C implementation of the Python language.) Jython 2.5 uses the same
  regression test suite as CPython, with some minor modifications.</p>
</blockquote>

<p><a href=""https://wiki.python.org/jython/JythonFaq/GeneralInfo"" rel=""nofollow"">https://wiki.python.org/jython/JythonFaq/GeneralInfo</a></p>

<p>So no need to worry about calling external python interpreter. </p>

<p>To solve problems with code checking, you can try this <a href=""http://blog.datenwerke.net/p/the-java-sandbox.html"" rel=""nofollow"">http://blog.datenwerke.net/p/the-java-sandbox.html</a>
Documentation has good samples of how to use it <a href=""http://blog.datenwerke.net/p/java-sandbox-03-documentation.html"" rel=""nofollow"">http://blog.datenwerke.net/p/java-sandbox-03-documentation.html</a></p>
","java"
"885",22075446,"<p>Use subprocess:</p>

<pre class=""lang-python prettyprint-override""><code>from subprocess import call
call([""java"", ""-jar"", ""foo.jar""])
</code></pre>

<p>You could also add other arguments like <code>-cp</code> to the list:</p>

<pre><code>call([""java"", ""-cp"", ""&lt;yourclasspath&gt;"", ""-jar"", ""foo.jar""])
</code></pre>
","java"
"886",2917735,"<p>Make no mistake, GWT is a Java technology. You could perhaps interoperate by using Jython to compile your Python code but your UI will basically need to be written in Java (wrappers are second class citizens here). The reason is that the RPC protocol is proprietary and even though GWT is open I believe the compiler that takes the Java source and creates the Javascript (including the RPC calls) isn't.</p>

<p>With Python you might be better off using an RIA Javascript framework like Yahoo UI (YUI), ExtJS, etc. <a href=""http://ukijs.org/"" rel=""nofollow"">Uki</a> also looks interesting. To give you an example of Uki, here is <a href=""http://ukijs.org/examples/core-examples/wave/"" rel=""nofollow"">google Wave layout in 100 lines of Javascript</a>.</p>
","java"
"887",5099816,"<ul>
<li>Python modules can depend on certain Python versions (e.g. Python 3 vs Python 2 and even may require a minimum Python version (e.g. 2.6) in case of using dedicated language features introduced in some Python version)</li>
<li>Python modules may depend on C extensions which won't work with Jython</li>
<li>Python modules may use CPython features that are not available in Jython</li>
</ul>

<p>In general: most Python-only code should work with Jython - however like in all cases: you have to test, test, test. Good written modules provide unittests - so you should try to run the tests from Jython and see what's happening.</p>
","java"
"888",6370470,"<p><code>M2Crypto.EVP</code> defaults to 'sha1' (SHA1) and you're using <code>MD5WithRSA</code>. I think you should switch <code>SHA1WithRSA</code> (MD5 is a <strong>very</strong> weak algorithm).</p>
","java"
"889",8921400,"<p>I'm sure that you can have only one app at same time, because it's different app servers/VMs for each type. I mean you can't upload different parts, can't have different sdk for different url on same app, etc.</p>

<p>Btw, you can try to use <a href=""http://www.jython.org/"" rel=""nofollow"">jython</a>, it can interpret your Pythong code in Java project. I'm not sure that it's production ready (there was a lot of problems with it when i had tried it few years ago), but maybe it's helpful for your situation</p>
","java"
"890",842075,"<p>If you're considering Java, <a href=""http://www.eclipse.org/swt/"" rel=""nofollow"">SWT</a> is an excellent cross-platform GUI toolkit.</p>
","java"
"891",23448532,"<p>Nope. You should do </p>

<pre><code>""jimbo"".contains(""jim"")
</code></pre>
","java"
"892",9280885,"<p>If c++ is an option you should really take a look at VTK</p>

<p><a href=""http://www.vtk.org/"" rel=""nofollow"">http://www.vtk.org/</a></p>

<p>It is very powerful to display 3D vector fields, and is pretty easy to use</p>
","java"
"893",3040904,"<p>In PHP:</p>

<pre><code>$outfile= 'result.json';
$url='http://search.twitter.com/search.json?q=hi';
$json = file_get_contents($url);
if($json) { 
    if(file_put_contents($outfile, $json, FILE_APPEND)) {
      echo ""Saved JSON fetched from “{$url}” as “{$outfile}”."";
    }
    else {
      echo ""Unable to save JSON to “{$outfile}”."";
    }
}
else {
   echo ""Unable to fetch JSON from “{$url}”."";
}
</code></pre>
","java"
"894",7052169,"<p>I'd start by computing the FFT spectrogram of both the haystack and needle files (so to speak). Then you could try and (fuzzily) match the spectrograms - if you format them as images, you could even use off-the-shelf algorithms for that.</p>

<p>Not sure if that's the canonical or optimal way, but I feel like it should work.</p>
","java"
"895",4534612,"<p>Applying a <a href=""http://en.wikipedia.org/wiki/Multiple_dispatch"" rel=""nofollow"">multimethod</a> to the array might make some sense. You switch the strategy to a more functional style in which you focus on a discrete piece of logic (i.e. the multimethod) instead of a discrete piece of data (i.e. the array objects). </p>

<p>In your shapes example, this prevents you from having to define and implement the <code>Shape</code> interface. (Yes, it's not a big deal here, but what if shape was one of several superclasses you wanted to extend? In Java, you're SOL at this point.) Instead, you implement a smart <code>draw()</code> multimethod that first examines the argument and then dispatches to the proper drawing functionality or error handling if the object isn't drawable.</p>

<p>Comparisons between functional and object-oriented styles are all over the place; here are a couple relevant questions that should provide a good start: <a href=""http://stackoverflow.com/questions/2078978/functional-programming-vs-object-oriented-programming"">Functional programming vs Object Oriented programming</a> and <a href=""http://stackoverflow.com/questions/2294053/explaining-functional-programming-to-object-oriented-programmers-and-less-technic"">Explaining functional programming to object-oriented programmers and less technical people</a>.</p>
","java"
"896",3320161,"<p>It depends on what you need to parse.</p>

<p>If you need to solve a particular problem domain then the best way is to create a <a href=""http://en.wikipedia.org/wiki/Domain-specific_language"" rel=""nofollow"">domain-specific language</a> and <a href=""http://docs.groovy-lang.org/docs/latest/html/documentation/core-domain-specific-languages.html"" rel=""nofollow"">parse it in Groovy</a>.</p>
","java"
"897",842075,"<p>WX all the way! 
I am not a GUI expert, designer or a even a ""GUI guy"", but recently I needed to write a front end for a product config tool (actually it's a collection of tools, but we wanted a single interface to access and run them all).<br />
The tools are all written in Python so naturally I turned to Python for the UI.<br />
I settled on wxPython... one ""import wx"" and a few tutorials later, I was banging out frames, notebooks and button panels like I knew what I was doing.<br />
I found plenty of examples to help me when I got stuck and the wxPython docs were very useful - although they are just C++ docs, they were still pretty intuitive.<br />
A quick web search will turn up tons of wxPython tutorials to get you started.</p>

<p>I've written and refactored the UI couple times, but I had a clean, working prototype in &lt; 1 day.  The tool was cross platform and all the windows and frames matched the native window system (WinXP, Win2K3, Gnome, etc.) - I was definitely impressed. 
If I ever have to write UIs in any other language I will certainly be looking for a wx implementation. </p>
","java"
"898",5561950,"<p>Take a look at <a href=""http://htmlunit.sourceforge.net/apidocs/index.html"">HTMLUnit</a> - a headless Java browser that can be fully controlled by your code. A simple example can be seen here: <a href=""http://htmlunit.sourceforge.net/gettingStarted.html"">http://htmlunit.sourceforge.net/gettingStarted.html</a></p>

<p>(obligatory warning: by screen-scraping the site, you may be breaking its ToS, and possibly open yourself to lawsuits; check whether you are allowed to do it before you start)</p>
","java"
"899",9253652,"<p>Java's <code>java.util.regex.Matcher.find</code> attempts to find the next value that matches, not all the values that match. Change <code>if</code> to <code>while</code> and you should get the result you are looking for.</p>

<pre><code>...
Matcher matcher = pattern.matcher(str);
while (matcher.find()) {
    System.out.println(matcher.group(1));
...
</code></pre>
","java"
"900",4535741,"<p>The right way to do this is to add the attributes to the constructor and add them on your instance.</p>

<pre><code>&gt;&gt;&gt; class A(object):
...    def __init__(self, attribute1, attribute2):
...        self.attribute1 = attribute1
...        self.attribute2 = attribute2
...

&gt;&gt;&gt; a = A(1, 2)
&gt;&gt;&gt; a.attribute1
1
&gt;&gt;&gt; a.attribute2
2
</code></pre>

<p>As for your second question, yes, you need to use <code>self.attribute</code> within the instance to refer to it.</p>
","java"
"901",31225697,"<p>I suspect since the python is on different directory with my tool (/usr/local/python). After I put the code bellow, somehow it works. Thank you guys</p>

<pre><code>ProcessBuilder(""/usr/bin/python"",""/Users/adibangun/Downloads/ManTIME/mantime.py"",""-ppp"",""test"",inputDir.getAbsolutePath(),""i2b2"");
pb.directory(/myToolsDir)
</code></pre>
","java"
"902",13436520,"<p>For <code>-XX:+PrintCompilation</code>, you could use <code>-XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation</code> flags instead to get a ""verbose"" output in separate ""hotspot.log"" file. This file is in XML format and contains both the information from <code>-XX:+PrintCompilation</code> and the cause of such compilations. The file path can be changed via <code>-XX:LogFile=&lt;new_hotspot_log&gt;</code>. Reference: <a href=""https://wikis.oracle.com/display/HotSpotInternals/LogCompilation+overview"" rel=""nofollow"">https://wikis.oracle.com/display/HotSpotInternals/LogCompilation+overview</a></p>

<p>For <code>-XX:+PrintGCDetails</code>, you could use <code>-Xloggc:&lt;gc_log&gt;</code> to redirect the GC output to the specified file. Reference: <code>java -X</code></p>
","java"
"903",30556784,"<p>You can do something like this to add weeks to a calendar.</p>

<pre><code>public static void main(String[] args){
    Calendar cal = Calendar.getInstance();
    cal.set(Calendar.YEAR, 2014);
    cal.set(Calendar.WEEK_OF_YEAR,2);
    System.out.println(cal.get(Calendar.YEAR) + "" ""+ cal.get(Calendar.WEEK_OF_YEAR));

    cal.add(Calendar.WEEK_OF_YEAR, 200);
    System.out.println(cal.get(Calendar.YEAR) + "" ""+ cal.get(Calendar.WEEK_OF_YEAR));


}
</code></pre>
","java"
"904",16461883,"<p>Here's a Java version (untested).  Note that this is complete.  It doesn't require any initial transformation of the input strings.  It also preserves the insertion order of the nodes of the tree:</p>

<pre><code>public class Node implements Iterable&lt;Node&gt; {
    private String name;
    private Map&lt;String, Node&gt; children = new LinkedHashMap&lt;String, Node&gt;();

    public Node(String name) {
        this.name = name;
    }

    public String getName() { return this.name; }

    public Iterator&lt;Node&gt; iterator() { return children.values().iterator(); }

    private Node lookupOrAddChild(String name) {
        Node child = children.get(name);
        if (child = null) {
            child = new Node(name);
            children.put(name, child);
        }
        return child;
    }

    private void addLine(String line) {
        int pos = line.indexOf(""."");
        if (pos &lt; 0) {
            lookupOrAddChild(line);
        } else {
            node = lookupOrAddChild(line.subString(0, pos));
            node.addLine(line.substring(pos + 1));
        }
    }

    public static Node buildTree(String[] input) {
        Node node = new Node("""");
        for (String line : input) {
           node.addLine(line);
        }
        // This assumes the input forms exactly one ""tree""
        return node.children.values().iterator().next();
    }
</code></pre>
","java"
"905",2733881,"<p>That's not exactly supported yet via ASE. You can launch a script from ASE's script directory (/sdcard/ase/scripts) via an intent though. See <a href=""http://code.google.com/p/android-scripting/source/browse/android/Common/src/com/google/ase/IntentBuilders.java"" rel=""nofollow"">http://code.google.com/p/android-scripting/source/browse/android/Common/src/com/google/ase/IntentBuilders.java</a> for the code that ASE uses to launch scripts itself.</p>
","java"
"906",3086467,"<p><strong>Ruby</strong></p>

<p>The Ruby Interpreter is single threaded, which is to say that several of its methods are not thread safe. </p>

<p>In the Rails world, this single-thread has mostly been pushed to the server. So, you'll see nginx running with a pool of mongrel servers, each of which has an interpreter in memory, processes 1 request at a time, and in its own thread.</p>

<p>Passenger, running <a href=""http://www.rubyenterpriseedition.com/"" rel=""nofollow"">""ruby enterprise""</a> brings the concept of garbage collection and some thread safety into Rails, and it's nice.</p>

<p>Still work to be done in Rails on this area, but it's getting there slowly -- but in general, the idea is to have multiple services and servers.</p>
","java"
"907",14601220,"<p>for someone may be concerned, I have resolved the problem in java as follows:</p>

<pre><code>TTransport transport;
transport = new TMemoryInputTransport(byte_data);
TBinaryProtocol tbp = new TBinaryProtocol(transport);
StreamItem si = new StreamItem();
si.read(tbp);
</code></pre>
","java"
"908",20882174,"<p>--datastore_path=Location/datastore.db worked for me </p>
","java"
"909",21287905,"<p>You could use <a href=""http://jackson.codehaus.org/"" rel=""nofollow"">Jackson</a> or <a href=""http://code.google.com/p/google-gson/"" rel=""nofollow"">GSON</a>. You might use anything listed on <a href=""http://json.org/"" rel=""nofollow"">JSON.org</a> under Java, you might be able to use the stuff under ""Python"" (for example <a href=""https://pypi.python.org/pypi/simplejson/"" rel=""nofollow"">simplejson</a>).</p>
","java"
"910",4977135,"<p>Fixed. YAML sucks, so don't use it. All kinds of Google results about how SnakeYAML is derived from PyYaml and what-not, but nobody clearly states exactly what dumps format from PyYaml works with what loadAll routines with SnakeYAML. </p>

<p>Also, performance with YAML is horrid, JSON is far simpler and easier to implement. In Python, where our middleware resides (and most crunching occurs), YAML takes almost twice the time to process than JSON!!</p>

<p>If you are using Python 2.6 or greater, just</p>

<pre><code> import json
    json_doc = json.dumps(projects, default=convert_to_builtin_type)
                    print json_doc
  def convert_to_builtin_type(obj):
     print 'default(', repr(obj), ')'
     # Convert objects to a dictionary of their representation
     d = { '__class__':obj.__class__.__name__,
          '__module__':obj.__module__,
          }
     d.update(obj.__dict__)
     return d
</code></pre>

<p>Then on the Java client (loading) side, use GSon -- this took a lot of head-scratching and searches to figure out because ALL examples on the 'net are virtually useless. Every blogger with 500 ads per page shows you how to convert one single, stupid object and last time I created an app, I used lists, arrays, or anything that held more than one object!! </p>

<pre><code>try {
    serverAddress = new URL(""http://127.0.0.1:5000/projects/"" + ruser.getUserEmail()+""+++++""+ruser.getUserHash());
    //set up out communications stuff
    connection = null;

    //Set up the initial connection
    connection = (HttpURLConnection)serverAddress.openConnection();
    connection.setRequestMethod(""GET"");
    connection.setDoOutput(true);
    connection.setReadTimeout(100000);

    connection.connect();

    //get the output stream writer and write the output to the server
    //not needed in this example

    rd  = new BufferedReader(new InputStreamReader(connection.getInputStream()));
    sb = new StringBuilder();

    while ((line = rd.readLine()) != null)
    {
       sb.append(line + '\n');
    }
    String mystr = sb.toString();
    // Now do the magic.
    Gson gson = new Gson();
    projectData = gson.fromJson(mystr, ProjectData[].class);    
} catch (MalformedURLException e) {
    e.printStackTrace();
} catch (ProtocolException e) {
    e.printStackTrace();
} catch (IOException e) {
    e.printStackTrace();
}
finally
{
    //close the connection, set all objects to null
    connection.disconnect();
    rd = null;
    sb = null;
    connection = null;
}


return projectData;
</code></pre>

<hr>

<p>Done! In a nutshell - YAML sucks and use JSON!! Also, the http connection code is mostly snipped off of this site...now I need to figure out https.</p>
","java"
"911",5616325,"<p>One problem looks like you are adding a child view to another view - but that child view has already been added. Are you dynamically adding a view or building a layout?<code>E/AndroidRuntime(  190):        at org.python.util.Jythonroid.onCreate(Jythonroi
d.java:251)
</code></p>
","java"
"912",37876618,"<p>The best solution would be <em>not</em> to do this.</p>

<p>Now I don't know about your country's legislation, but in mine, any solution of this sort would be highly illegal. If the client is worried about the contractor, there would be other means of ""monitoring"" them.</p>

<ul>
<li>Daily reporting</li>
<li>Set up a proxy blacklisting sites, possibly enforcing it over network tools</li>
<li>Actually <em>meet</em> the person and talk with them about their achievements, difficulties and such. Not <em>inquiring</em>, actually <em>caring</em> about how the project is going. If that doesn't motivate the contractor to work, nothing will.</li>
</ul>
","java"
"913",2159273,"<p>Looks like you are trying to evaluate an incomplete statement in the lines:</p>

<pre><code>engine.eval(""for i in range(10):"");
engine.eval(""   hello_str += str(i)"");
</code></pre>

<p>Here, I assume <code>eval()</code> is trying to evaluate these one-by-one, and finding nothing after the <code>for</code> is erroring out since that is an incomplete statement. Try this:</p>

<pre><code>engine.eval(""for i in range(10):\n   hello_str += str(i)"");
</code></pre>

<p>The newline is not necessary in this case, but it would be if you want to include several statements in the loop body, eg:</p>

<pre><code>engine.eval(""for i in range(10):\n   hello_str += str(i)\n   print i"");
</code></pre>

<p>Also note that in the example above the amount of spacing after each new line should be equal. In fact, I would suggest assembling the script string completely before evaluating it. Or better yet, read it from a separate .py file.</p>
","java"
"914",454182,"<p>Never tried it. But I recently <a href=""http://www.miketec.org/serendipity/index.php?/archives/9-Sure,-Change-Jobs!.html"" rel=""nofollow"">stumbled</a> on a <a href=""http://jepp.sourceforge.net/"" rel=""nofollow"">project named Jepp</a> that may be of interest to you.</p>

<blockquote>
  <p>Jepp embeds CPython in Java. It is safe to use in a heavily threaded environment, it is quite fast and its stability is a main feature and goal. </p>
</blockquote>
","java"
"915",1721351,"<p>Note that it also depends on what exactly you want to achieve: do you care about the time your program waits due to it being preempted by the system scheduler? All the solutions above take actual time elapsed into consideration, but that also involves the time when other processes run instead of your own.</p>

<p>If you don't care about this, all of the solutions above are good. If you do care, you probably need some profiling software to actually see how long the loop takes. </p>

<p>I'd start with a program that does nothing but your loop and (in a linux environment at least) do <code>time you-prg-executable</code>. </p>

<p>Then I'd investigate if there are tools which work like <code>time</code>. Not sure, but I'd look at JRat for java, and gcc's gcov for C and C++. No doubt there are similar tools for the other languages. But, of course, you need to see if they give actual time or not.</p>
","java"
"916",271488,"<p>First, a meta comment: I would highly recommend coding the entire thing in a high-level language, profiling like mad, and optimizing only where profiling shows it's necessary. First optimize the algorithm, then the code, then think about bringing in the heavy iron. Having an optimum algorithm and clean code will make things much easier when/if you need to reimplement in a lower-level language.</p>

<p>Speaking for Python, <a href=""http://www.codeplex.com/Wiki/View.aspx?ProjectName=IronPython"">IronPython</a>/C# is probably the easiest optimization path. </p>

<p>CPython with C++ is doable, but I find C a lot easier to handle (but not all that easy, being C). Two tools that ease this are <a href=""http://cython.org/"">cython</a>/<a href=""http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/"">pyrex</a> (for C) and <a href=""http://shed-skin.blogspot.com/"">shedskin</a> (for C++). These compile Python into C/C++, and from there you can access C/C++ libraries without too much ado.</p>

<p>I've never used jython, but I hear that the jython/Java optimization path isn't all that bad.</p>
","java"
"917",9158329,"<p>Most APIs will indeed have some form of reader-based API that allows you to enumerate a raw protobuf stream. However, that by itself is not enough to fully understand the data, since <em>without the schema</em> the interpretation is ambiguous:</p>

<ul>
<li>a varint could be zig-zag encoded (<code>sint32</code>/<code>sint64</code>), or not (<code>int32</code>/<code>int64</code>/<code>uint32</code>/<code>uint64</code>) - radically changing the meaning, or a boolean, or an enum</li>
<li>a fixed-32/fixed-64 could be a signed or unsigned integer, or could be an IEEE754 float/double</li>
<li>a length-prefixed chunk could be a UTF-8 string, a BLOB, a sub-message, or a ""packed"" repeated set of primitives; if it is a sub-message, you'll have to repeat recursively</li>
</ul>

<p>So... yes and no. Certainly you can get the field numbers of the outermost message.</p>

<p>Another approach would be to use the <em>regular</em> API against a type with <strong>no members</strong> (<code>message Naked {}</code>), and then query the unexpected data (i.e. all of it) via the ""extension"" API that many implementations provide.</p>
","java"
"918",31702855,"<p>Yes, you can run python on Storm. In fact you can run just about code from just about any language on a storm cluster, its just a matter of implementing <a href=""https://storm.apache.org/documentation/Using-non-JVM-languages-with-Storm.html"" rel=""nofollow"">the API</a>.</p>

<p>However, there are some requirements for that to work, and so far as I can tell said requirements are not spelled out in the storm documentation. The fastest path to get up an running would be to take the <a href=""https://github.com/apache/storm/blob/master/examples/storm-starter/multilang/resources/splitsentence.py"" rel=""nofollow"">splitsentence.py example from the storm source</a> and run with it. </p>
","java"
"919",26574114,"<p>You could get all combinations of using the amount of times a, n and d appear:</p>

<pre><code>from itertools import combinations
def sub_s(st,word):
   all_s = (x for x in st if x in word)
   return len([x for x in (combinations(all_s, len(word))) if """".join(x) == word] )
</code></pre>
","java"
"920",1953731,"<p>Do not make this more complex than it needs to be.</p>

<p>Your Java process can -- simply -- spawn a separate subprocess to run your PyTables queries.  Let the Operating System do what OS's do best.</p>

<p>Your Java application can simply fork a process which has the necessary parameters as command-line options.  Then your Java can move on to the next thing while Python runs in the background.</p>

<p>This has HUGE advantages in terms of concurrent performance.  Your Python ""backend"" runs concurrently with your Java simulation ""front end"".</p>
","java"
"921",37920767,"<p>You can consider using <a href=""https://developers.google.com/protocol-buffers/"" rel=""nofollow"">protobuf</a> instead of JSON or even <a href=""http://www.grpc.io/faq/"" rel=""nofollow"">gRPC</a>, complete RPC protocol implemented on top of protobuf. The only thing you have to do using protobuf is define messages and services, all the implementation code will be generated. </p>

<p>Using of complete RPC protocol will help you to avoid writing a lot of boilerplate code. </p>
","java"
"922",30556784,"<p>You can do something like this to add weeks to a calendar.</p>

<pre><code>public static void main(String[] args){
    Calendar cal = Calendar.getInstance();
    cal.set(Calendar.YEAR, 2014);
    cal.set(Calendar.WEEK_OF_YEAR,2);
    System.out.println(cal.get(Calendar.YEAR) + "" ""+ cal.get(Calendar.WEEK_OF_YEAR));

    cal.add(Calendar.WEEK_OF_YEAR, 200);
    System.out.println(cal.get(Calendar.YEAR) + "" ""+ cal.get(Calendar.WEEK_OF_YEAR));


}
</code></pre>
","java"
"923",4657026,"<p>icu4J implements a Hebrew calendar.</p>

<ul>
<li><a href=""http://userguide.icu-project.org/datetime/calendar"" rel=""nofollow"">http://userguide.icu-project.org/datetime/calendar</a></li>
<li><a href=""http://icu-project.org/apiref/icu4j/com/ibm/icu/util/HebrewCalendar.html"" rel=""nofollow"">http://icu-project.org/apiref/icu4j/com/ibm/icu/util/HebrewCalendar.html</a></li>
</ul>

<p>But I have not used it.</p>
","java"
"924",369664,"<p>I second the answer from @S.Lott: It is not possible to use STUN (or any other protocol) to determine with 100% certainty what type of NAT you're behind.</p>

<p>The problem is (as I witnessed recently) that the NAT may sometimes act as <a href=""http://tools.ietf.org/html/rfc4787#section-4.1"" rel=""nofollow"">Address-Dependent</a> (Symmetric) and sometimes as <a href=""http://tools.ietf.org/html/rfc4787#section-4.1"" rel=""nofollow"">Endpoint-Independent</a> (Full, Restricted or Port Restricted cone).</p>

<p>When you think about it, being Address-Dependent means that when you send packets from one socket on a client behind the NAT to two distinct servers, then the NAT will create two custom public address:port tuples for each of the servers. In my case, these bindings seemed completely random, but if the range is small, it sometimes happened that these tuples were actually equal! Which confused the test.</p>

<p>I was using <a href=""http://www.stunprotocol.org/"" rel=""nofollow"">this library</a> at the time and sometimes it told me the NAT's behavior was Address-Dependent and other times it was Endpoint-Independent (the switch between the two also seemed completely random, sometimes it happened after I restarted the device, sometimes after a time period,...).</p>

<p>This happened to me on a mobile device with <a href=""http://en.wikipedia.org/wiki/Slovak_Telekom"" rel=""nofollow"">Slovak Telekom</a>, a company mostly owned by <a href=""http://en.wikipedia.org/wiki/Deutsche_Telekom"" rel=""nofollow"">Deutsche Telekom</a> so I think the problem will be at least Europe-wide.</p>

<p>I would say that the rule here is this: If STUN test tells you that you're behind a Symmetric NAT than that is the case, but if it tells you otherwise, then you can not be 100% sure.</p>

<p>One last note, an easy way to check your NAT's behavior with respect to TCP is to type ""what is my IP address"" into google and then open first (say) five pages. If the pages are <strong>not</strong> consistent about your IP address, your NAT's behavior is Address-Dependent or Address-and-Port-Dependent (Symmetric). But again, if they do correspond, you just can't be sure.</p>
","java"
"925",36321558,"<p>pseudocode:</p>

<pre><code>for each inequation:
    find all real roots of the equivalent equation, i.e. the zero-crossings
    for each interval between two adjacent roots:
        pick any number strictly inside the interval
        evaluate the polynomial in that point
            if the evaluated polimonial is positive:
                add every integer in the interval to the list of solutions to that inequation
                (treat the open-ended intervals outside the extreme roots as special cases, they may contain infinite solutions)
find the integers that are in all the lists of solutions to the individual equations
</code></pre>
","java"
"926",35539111,"<p>You never actually invoked the <code>sumDouble()</code> method. Rather than print out <code>sum</code> (which is an <code>Object</code>), you should print like this:</p>

<pre><code>System.out.println(""Your sum is ""+sum.sumDouble(a,b));
</code></pre>
","java"
"927",9253652,"<p>It's because a <strong>group</strong> for a java match is a capturing bracket.</p>

<p>Your regex only has one set of non-escaped (ie capturing) brackets, the <code>(.*?)</code>.</p>

<p>Group 1 contains the value that gets matched.</p>

<p><strong>There is no group 2</strong> because there is no second set of brackets in your regex.</p>

<p>In the java example, you want to loop through all <em>matches</em>, and print <code>matcher.group(1)</code>.</p>

<pre><code>while ( matcher.find() ) {
    System.out.println(matcher.group(1));
}
</code></pre>

<p>Note the <code>while</code>, which will loop through all matches and tell you group 1 from each.</p>
","java"
"928",39846735,"<p>Thing is: you let that library method <strong>combinations</strong> do all the ""real"" work for you. </p>

<p>And of course: normally that is exactly the way to go. You do <strong>not</strong> want to re-invent the wheel when there is an existing library function that gives you what you need. Your current code is pretty concise, and good to read (except maybe that you should call your list, well, ""list"", but not ""l"").</p>

<p>But this case is different: obviously, most of the execution time for this program will happen in that call. And it seems that google thinks whatever this call is doing .. can be done <strong>faster</strong>. </p>

<p>So, the answer for you is: you actually want to re-invent the wheel, by rewriting your code in a way that is <strong>better</strong> than what it is doing right now! A first starting point might be to check out the source code of <strong>combinations</strong> to understand if/how that call is doing things that you do not need in your context.</p>

<p><em>Guessing</em>: that call creates <strong>a lot</strong> of permutations that are not ideal. All of that is <strong>wasted</strong> time. You want to step back and consider how to build those lucky triples from your input <strong>without</strong> creating a ton of not so lucky triples!</p>
","java"
"929",27197191,"<p>Short answer: there's no such convention. As a language, Python combines both object-oriented and functional paradigms. For me personally, the choice which one to pick in each particular case is the most subtile skill for a Python developer.</p>

<p>You should answer lots of questions, e.g. how your object should be used? would it be shared among threads? is performance an issue? what are the conventions of application architecture? Perhaps the answers would later change so be ready for refactoring. </p>

<p>Python is much less restrictive that Java and cannot give any guarantees concerning the state of an object. It can neither make assumptions to perform low-level performance optimisations as Java do. So the definition 'mutable'/'immutable' is a mere convention for Python classes. It's more how we understand the object than a technical feature of the language.</p>

<p>In general case (or in doubt) I'd suggest to follow the <a href=""http://en.wikipedia.org/wiki/Principle_of_least_astonishment"" rel=""nofollow"">POLA principle</a> and stick to common patterns. For example, if your object behaves like a string, return new instance; if like a dictionary, perform in-place modifications. Extreme cases are usually wrong, good Python design uses the best of two worlds.</p>
","java"
"930",6787378,"<ol>
<li><p>If you're going to use Jython then you should use Jython.  </p>

<p><code>jython django-admin.py startproject testing</code></p></li>
<li><p>Spring and Hibernate have nothing to do with Jython.</p></li>
<li><p><a href=""http://wiki.python.org/jython/WhyJython"" rel=""nofollow"">""Why Jython""</a></p></li>
</ol>
","java"
"931",4986273,"<p>Byte in java is a signed data type - and yeah I never understood why they did that either. You'll need to use a short (well since all bit ops are used on ints anyhow, just use a int really) and ignore the higher 8bit (otherwise sign extension would be a problem)</p>

<pre><code> System.out.println(((short) ((32809 &amp; 0xFF00) &gt;&gt; 8)) &amp; 0xFF);
</code></pre>
","java"
"932",10366091,"<p>This depends on OS or Window Manager implementation. For this to
work there should be some kind of ""hook"" into these events(e.g. right click), 
along with the context it was fired(e.g. right click on the Desktop/Folder/File).</p>

<p>But it is highly improbable you could choose the language you would implement
such a thing, even if it is possible on your OS.</p>
","java"
"933",3255330,"<p>Why not use the XMPP protocol (aka Jabbber) ?</p>
","java"
"934",28755003,"<p>Assuming you meant <code>i+1</code>, not <code>1+1</code>, the  code</p>

<pre><code>for (i = 0; i &lt; N - 1; i++)
    for(j = i+1; j &lt; N; j++)
        //code
</code></pre>

<p>is equivalent to</p>

<pre><code>int k = 2 * N - 1;
for (int ij = 0; ij &lt; N * (N - 1) / 2; ij++) {
    int i = (int) Math.floor((k - Math.sqrt(k * k - 8 * ij)) / 2);
    int j = i + 1 + ij - (k - i) * i / 2;
    //code
}
</code></pre>

<p>This is completely pointless though...</p>
","java"
"935",2140268,"<p>Comments about bad-practices apart - here is the code you asked in the language you asked for.
The best thing if you are keeping the system this way, probably would be to make these java files be automatically generated in the build process itself -- you 'd just keep a names list in a .txt file in the directory. This script is suitable to do that. </p>

<p>(It won't modify your files, it genrate new ones based on the template you posted here)</p>

<pre><code>import re, sys

template = """"""Foo extends Bar{
    public Foo(){
%s
    }

%s
}
""""""

tag_templ =   """"""        m_Tags.add(""%s"");""""""
getter_templ = """"""    public String GetJane() { return m_ParsedValue.get( m_Tags.get(%d) ); }""""""

def parse_names(filename):
    data = open(filename).read()
    names = re.findall(r'm_Tags\.add\(""(.*?)""', data)
    return names

def create_file(filename, names):
    tag_lines = [tag_templ % name for name in names]
    getter_lines = [getter_templ % (i + 1) for i in range(len(names))]
    code = template % (""\n"".join(tag_lines), ""\n"".join(getter_lines))
    file = open(filename,""wt"")
    file.write(code)
    file.close()

def insert_name(after, new_name, names):
    names.insert(names.index(after) + 1, new_name)

if __name__ == ""__main__"":
    if len(sys.argv ) &lt; 4:
        sys.stderr.write(""Usage: changer.py &lt;filename&gt; &lt;name-before-insertion&gt; &lt;new-name&gt;"")
        sys.exit(1)
    filename, name_before, new_name = sys.argv[1:]
    names = parse_names(filename)
    insert_name(name_before, new_name, names)
    create_file(filename, names)
</code></pre>
","java"
"936",13322039,"<p>You can set a Java property on the command line like this:</p>

<pre><code>java -D&lt;propertyName1&gt;=&lt;propertyVal1&gt; -D&lt;propertyName2&gt;=&lt;propertyVal2&gt; ...
</code></pre>

<p>The System.getProperty(""propertyName1"") will return ""propertyVal1"".</p>

<p>Example:</p>

<pre><code>java -Dfile.encoding=utf-8 -jar MyJar.jar
</code></pre>

<p>This will work in a bash script. I've never tried it from Python, but i guess this <a href=""http://stackoverflow.com/questions/89228/calling-an-external-command-in-python"" title=""answer"">answer</a> might help you achieve that.</p>
","java"
"937",23877147,"<p>A NullPointerException, as the name states is an Exception (run-time Exception I should say) which is thrown by the Compiler, when you try to use a Null value where a value is needed/must needed. So, the place where you're using <code>str</code> must be checked for its value, before executing some function which would require some of the checking and some valid value parameters. String can be null, but sometimes the method would need a valid value to work on. </p>

<p><a href=""http://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html"" rel=""nofollow"">http://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html</a></p>

<p>If you just want to <strong>catch</strong> the exception then here</p>

<pre><code>try {
  String str = null;
  TurkishMorphParser parser = TurkishMorphParser.createWithDefaults();
  str = new Stm(parser).parse(word);
  //System.out.println(""str = "" + str);
  String replace = str.replace(""["","""");
  String replace1 = replace.replace(""]"","""");
  List&lt;String&gt; result1 = new ArrayList&lt;String&gt;(Arrays.asList(replace1.split("","")));
  String result = result1.get(0).toString();
  //System.out.println(""Result = "" + result);
  return result;
} catch (NullPointerException error) {
  /* Display message */
  System.out.print(""Sorry, there was an error: "" + e.Message);
}
</code></pre>

<p>However, I guess when it gives you nothing, that is the place where you might get the Error.</p>

<pre><code>System.out.println(""str = "" + str);
</code></pre>

<p>Maybe that is why you commented it out.</p>

<p>So, you can handle it too. If after all the processing of the above line, <code>str</code> is a <code>null</code> </p>

<pre><code>if(str == null) {
  System.out.print(""Sorry, doesn't recognise it."");
} else {
  System.out.println(""str = "" + );
}
</code></pre>

<p>Then again, move forward to the execution and check for the value again. This way, it would minimize the error! :)</p>
","java"
"938",36721109,"<p>There isn't any direct way to query that information using the Java Time API but you can calculate it.</p>

<pre><code>public static void main(String[] args) {
    long ordinal = LocalDate.now().toEpochDay() + (146097 * 5L) - (31L * 365L + 7L);

    System.out.println(ordinal);
}
</code></pre>

<p>Run today, 19th April 2016, it outputs <code>736073</code>, which is consistent with Python's output.</p>

<p>From a <a href=""https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html"" rel=""nofollow""><code>LocalDate</code></a>, you can get the Epoch day with <a href=""https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html#toEpochDay--"" rel=""nofollow""><code>toEpochDay()</code></a>. If you take a look <a href=""http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8u40-b25/java/time/LocalDate.java#LocalDate.toEpochDay%28%29"" rel=""nofollow"">inside the current implementation</a>, you'll find that it actually calculates the total number of days since year 0 and subtracts that with the constant</p>

<pre><code>static final long DAYS_0000_TO_1970 = (DAYS_PER_CYCLE * 5L) - (30L * 365L + 7L);
</code></pre>

<p>where <code>DAYS_PER_CYCLE = 146097</code> is the number of days in a 400 year cycle. That constant isn't public, so we can't reuse it directly.</p>

<p>From the Python documentation of <a href=""https://docs.python.org/3/library/datetime.html#datetime.date.toordinal"" rel=""nofollow""><code>toordinal()</code></a>, it defines year 1 to have an ordinal of 1. The calculus above by the Java API supposes that it is year 0 instead so we just need to adjust for that.</p>
","java"
"939",1733073,"<p>You should look at this blog post: <a href=""http://corte.si/%2Fposts/code/timsort/index.html"" rel=""nofollow"">Visualising Sorting Algorithms: Python's timsort</a></p>

<p><img src=""http://corte.si/%2Fposts/code/timsort/combo.png"" alt=""alt text""></p>

<p><strong>Summary</strong>:</p>

<blockquote>
  <p>The business-end of timsort is a mergesort that operates on runs of pre-sorted elements. A minimum run length minrun is chosen to make sure the final merges are as balanced as possible - for 64 elements, minrun happens to be 32. Before the merges begin, a single pass is made through the data to detect pre-existing runs of sorted elements. Descending runs are handled by simply reversing them in place. If the resultant run length is less than minrun, it is boosted to minrun using insertion sort. On a shuffled array with no significant pre-existing runs, this process looks exactly like our guess above: pre-sorting blocks of minrun elements using insertion sort, before merging with merge sort.</p>
</blockquote>

<p>[...]</p>

<ul>
<li>timsort finds a descending run, and reverses the run in-place. This is done directly on the array of pointers, so seems ""instant"" from our vantage point.</li>
<li>The run is now boosted to length minrun using insertion sort.</li>
<li>No run is detected at the beginning of the next block, and insertion sort is used to sort the entire block. Note that the sorted elements at the bottom of this block are not treated specially - timsort doesn't detect runs that start in the middle of blocks being boosted to minrun.</li>
<li>Finally, mergesort is used to merge the runs.</li>
</ul>
","java"
"940",2112952,"<p>You need to fix your if statements the ""=="" operator checks for equality, and you must put the variable you are checking against in each section of the statement.</p>

<pre><code>public int winCraps{
    roll = rollDice();
    if (roll == 7 || roll == 11) {
        return true;
    }
    else if(roll == 2 || roll == 3 || roll == 12) {
        return false;
    }
    else{
        return rollforPoint(roll);
    }
}
</code></pre>

<p>In you rollDice() method, the way you assign values to each die is incorrect.  I recommend reading up on random numbers (since this is homework, I'll leave that to you).</p>

<p>Also, remember in java you must <strong>always end each statement with a semicolon</strong></p>
","java"
"941",37489128,"<p>You can call the python version from the java one. This avoids the duplicate code.
You’ll still have to do the to/from JNI marshalling though:</p>

<pre><code>void encrypt(int size, unsigned char *buffer){
    for(int i=0; i &lt; size; i++){
        buffer[i]+=1; 
        printf(""%c"", buffer[i]);
    }
}

JNIEXPORT void JNICALL Java_jniTest_passBytes
  (JNIEnv *env, jclass cls, jbyteArray array) {
    unsigned char *buffer = (*env)-&gt;GetByteArrayElements(env, array, NULL);
    jsize size = (*env)-&gt;GetArrayLength(env,array);

    encrypt(size, buffer);

    (*env)-&gt;ReleaseByteArrayElements(env, array, buffer, 0);
}
</code></pre>
","java"
"942",24089806,"<p>You can spawn a python process:</p>

<pre><code>Process p = Runtime.getRuntime().exec(""python ""+yourpythonprog+"" ""+yourargs);
</code></pre>

<p>Then use the <code>Process</code> object to read the output of your python program.</p>
","java"
"943",7901238,"<p>You can also use <code>logging.exception</code> from the <code>logging</code> module. It will print the current exception's stacktrace into the default logger as a message of severity <code>ERROR</code>.</p>

<p>Link: <a href=""http://docs.python.org/2/library/logging.html#logging.Logger.exception"" rel=""nofollow"">http://docs.python.org/2/library/logging.html#logging.Logger.exception</a></p>
","java"
"944",21877718,"<p>As a forward to my answer, whitelisting and blacklisting only go so far and are proven easily broken by the most determined of hackers. Don't bother with these styles of security.</p>

<p>About as safe as you are going to get is to use <a href=""http://pypy.readthedocs.org/en/latest/sandbox.html"" rel=""nofollow"">pypy-sandbox</a> it creates an OS level sandbox and tries to isolate processes that could lead to nasty execution. </p>

<p>For real security you probably want something more like this following model.</p>

<ul>
<li>Using SELinux as the host fire up a virtual machine running SELinux</li>
<li>Disable all ports except for SSH and ensure patches are up to date</li>
<li>Upload the code to a non executable directory.</li>
<li>Chroot and ulimit all the things</li>
<li>Execute the code through pypy-sandbox</li>
<li>Destroy the machine when execution is complete</li>
</ul>

<p>Or maybe I am just paranoid.</p>
","java"
"945",1085898,"<p>An important question to consider in deciding between Python and Java is <strong>how you will use the datastore in each language</strong> (and most other angles to the original question have already been covered quite well in this topic).</p>

<p><strong>For Java</strong>, the standard method is to use JDO or JPA.  These are great for portability but are not very well suited to the datastore.</p>

<p>A low-level API is available but this is too low level for day-to-day use - it is more suitable for building 3rd party libraries.</p>

<p><strong>For Python</strong> there is an API designed specifically to provide applications with easy but powerful access to the datastore.  It is great except that it is not portable so it locks you into GAE.</p>

<p>Fortunately, there are solutions being developed for the weaknesses listed for both languages.</p>

<p><strong>For Java</strong>, the low-level API is being used to develop persistence libraries that are much better suited to the datastore then JDO/JPA (IMO).  Examples include the <a href=""https://github.com/siena/siena"" rel=""nofollow"">Siena project</a>, and <a href=""https://code.google.com/p/objectify-appengine/"" rel=""nofollow"">Objectify</a>.  </p>

<p>I've recently started using Objectify and am finding it to be very easy to use and well suited to the datastore, and its growing popularity has translated into good support.  For example, Objectify is officially supported by Google's new Cloud Endpoints service.  On the other hand, Objectify only works with the datastore, while Siena is 'inspired' by the datastore but is designed to work with a variety of both SQL databases and NoSQL datastores.</p>

<p><strong>For Python</strong>, there are efforts being made to allow the use of the Python GAE datastore API off of the GAE.  One example is the SQLite backend that Google released for use with the SDK, but I doubt they intend this to grow into something production ready.  The <a href=""http://code.google.com/p/typhoonae/"" rel=""nofollow"">TyphoonAE</a> project probably has more potential, but I don't think it is production ready yet either (correct me if I am wrong).</p>

<p>If anyone has experience with any of these alternatives or knows of others, please add them in a comment.  Personally, I really like the GAE datastore - I find it to be a considerable improvement over the AWS SimpleDB - so I wish for the success of these efforts to alleviate some of the issues in using it.</p>
","java"
"946",33067606,"<pre><code>for i in range(1, c+1):
    for j in range (i, C+1):
        print j
</code></pre>
","java"
"947",3744180,"<p>In Java, I can think of two reasons why the <code>()</code> is required:</p>

<p>1) Java had a specific design goal to have a ""C/C++ like"" syntax, to make it easy for C and C++ programmers to learn the language.  Both C and C++ require the parentheses.</p>

<p>2) The Java syntax specifically requires the parentheses to disambiguate a reference to an attribute or local from a call to a method.  This is because method names and attribute / local names are declared in different namespaces.  So the following is legal Java:</p>

<pre><code>public class SomeClass {
    private int name;
    private int name() { ... }

    ...

    int norm = name;  // this one
}
</code></pre>

<p>If the <code>()</code> was not required for a method call, the compiler would not be able to tell if the labeled statement (""this one"") was assigning the value of the <code>name</code> attribute or the result of calling the <code>name()</code> method.</p>
","java"
"948",37433389,"<p>Running <code>python C:\Users\Me\HelloWorld.py</code> executes the script and collects the standard output:</p>

<pre><code>try {
        Process proc = Runtime.getRuntime().exec(""python C:\Users\Me\HelloWorld.py"");
        BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));
        String result = null;
        while ((result = reader.readLine()) != null) {
            PrintWriter out = resp.getWriter();
            out.println(""&lt;div&gt;"" + result + ""&lt;/div&gt;"");
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
</code></pre>
","java"
"949",5532481,"<p>Why would you want to do this in Python? For tasks like this, especially Java, you are better off using <a href=""http://ant.apache.org/"" rel=""nofollow"">Apache Ant</a>. Write commands in xml and then ant runs for you. </p>
","java"
"950",1850717,"<p>Assuming you're using <a href=""http://pydev.org/"" rel=""nofollow"">PyDev</a>, you need to add PyLucene to your import path. This can be done in the preferences pane somewhere under the PyDev section. (Sorry, I don't have PyDev installed on this computer so I can't be more specific.) Not having used PyLucene I can't tell you exactly which path you need to add, but it should be the path where you have PyLucene installed.</p>
","java"
"951",16453758,"<p>You need to increase the OS support for number of open files.</p>

<p>in linux you can use to view current limit</p>

<pre><code>cat /proc/sys/fs/file-max
</code></pre>

<p>Use ulimit to change the number</p>

<p><a href=""http://www.cyberciti.biz/faq/linux-increase-the-maximum-number-of-open-files/"" rel=""nofollow"">http://www.cyberciti.biz/faq/linux-increase-the-maximum-number-of-open-files/</a></p>

<p>Edit: To make limits permenent
<a href=""http://posidev.com/blog/2009/06/04/set-ulimit-parameters-on-ubuntu/"" rel=""nofollow"">http://posidev.com/blog/2009/06/04/set-ulimit-parameters-on-ubuntu/</a></p>
","java"
"952",5364485,"<p>I may be too late, but here's what I got:
There is a problem in your python padding routine. If the cleartext's size is a multiple of 16, no padding will be added, while Java expects 16 '\x10'.</p>

<p>This may of course not solve your corruption problem during transport. Your best bet would be to check whether the problem comes from the cipher or the transport: how about writing the encoded text in a file and have Java read from it, just to be sure?</p>
","java"
"953",33654514,"<p>The <a href=""http://docs.oracle.com/javase/7/docs/api/java/io/DataOutputStream.html#writeUTF(java.lang.String)"" rel=""nofollow"">JavaDoc</a> of <code>DataOutputStream#writeUTF(...)</code> says:</p>

<blockquote>
  <p>First, two bytes are written to the output stream as if by the
  writeShort method giving the number of bytes to follow</p>
</blockquote>

<p>In you python code your <code>data</code> value will be prefixed with two bytes for the length of the string to follow.</p>
","java"
"954",18479510,"<p>When the arguments to integer division are not both positive, a decision must be made for rounding of the quotient and sign of the remainder. GMP supports floor division (f_div...), ceiling division (c_div...), and truncating division (t_div...). </p>

<p>Using gmpy2 to access GMP via Python,</p>

<pre><code>&gt;&gt;&gt; import gmpy2
&gt;&gt;&gt; a = -48197174570431531987668852939807674377435188974148779416366905274642031729688518691
&gt;&gt;&gt; b = 4322669160730708444058642850762359547515258361061655693150034467061
&gt;&gt;&gt; gmpy2.f_divmod(a,b)
(mpz(-11149864303351921), mpz(1542354793066875276328139562907995977816446564586050094773477055490))
&gt;&gt;&gt; gmpy2.c_divmod(a,b)
(mpz(-11149864303351920), mpz(-2780314367663833167730503287854363569698811796475605598376557411571))
&gt;&gt;&gt; gmpy2.t_divmod(a,b)
(mpz(-11149864303351920), mpz(-2780314367663833167730503287854363569698811796475605598376557411571))
&gt;&gt;&gt; help(gmpy2.f_divmod)
f_divmod(x, y) -&gt; (quotient, remainder)

Return the quotient and remainder of x divided by y. The quotient
is rounded towards -Inf (floor rounding) and the remainder will
have the same sign as y. x and y must be integers.

&gt;&gt;&gt; help(gmpy2.c_divmod)
c_divmod(x, y) -&gt; (quotient, remainder)

Return the quotient and remainder of x divided by y. The quotient
is rounded towards +Inf (ceiling rounding) and the remainder will
have the opposite sign of y. x and y must be integers.

&gt;&gt;&gt; help(gmpy2.t_divmod)
t_divmod(x, y) -&gt; (quotient, remainder)

Return the quotient and remainder of x divided by y. The quotient
is rounded towards zero (truncation) and the remainder will have
the same sign as x. x and y must be integers.
</code></pre>
","java"
"955",3368246,"<p>You are lucky, since Google AppEngine provides CRON jobs both for Python and Java.
<a href=""http://code.google.com/appengine/docs/python/config/cron.html"" rel=""nofollow"">GAE - Python</a>
<a href=""http://code.google.com/appengine/docs/java/config/cron.html"" rel=""nofollow"">GAE - Java</a></p>
","java"
"956",4641625,"<p>ASE is probably the way to go.</p>

<p>I'm not a Jython expert, but I expect part of the problem with trying to go that route is that Android isn't really Java -- while the base language is the same, Android Java code does not share any of the ""standard"" Java libraries and it compiles into its own bytecode language.</p>

<p>Having said that, there is a defunct project for using Jython with Android. Its author has killed the project and is directing users to ASE:</p>

<p><a href=""http://code.google.com/p/jythonroid/"" rel=""nofollow"">http://code.google.com/p/jythonroid/</a></p>
","java"
"957",32775012,"<p>Plain CPython is slow by nature - it comes from the very design of the interpreter. Speaking simplified, CPython is a C++ program that constantly reads your instructions from a file, parses them and acts accordingly.</p>

<p>So for every instruction, you have a full ""context switch"" from your code down to its representations in C++, including all name lookups, transformations for wrappers, <em>then</em> the actual computation and then back to your code again. Especially loops are costly, because it means you are doing the same again and again. Since CPython is acting per-line, it cannot do any optimization, such as prefetching data, vectorizing etc.</p>

<p>The upside is that you can do powerful introspection and self-modification, with a very simple implementation. The downside is that the interpreter has to go all the way at every step.</p>

<p>In contrast, both Java and PyPy are just-in-time compiled. When they go through a loop, they will realize that they did the same thing already (instruction wise) and be prepared for it. This is why PyPy may be slower than CPython sometimes: it needs a warm-up phase in which it can actually optimize repeated operations. If operations are repeated only a bit or never, there is no advantage.</p>

<hr>

<p>Disclaimer: This is a very simplified view of the CPython interpreter. For example, there are some ""short-circuit"" instructions such as list comprehensions which are handled more efficiently than regular loops. As these can still call arbitrary code, they are limited in performance as well, however.</p>
","java"
"958",31752898,"<p>Its not a properties file even if it is looking similar. Those are ini-files which can be parsed using <a href=""http://ini4j.sourceforge.net/tutorial/OneMinuteTutorial.java.html"" rel=""nofollow"" title=""ini4j"">ini4j</a>.</p>
","java"
"959",27273499,"<p>I'm not sure I understand what you want exactly, but in Java I remember that I could launch multiple JVM and run my java programs on different OS processes, using inter-processes communication (socket, pipe or whatever you want) to do multi-core processing and syncronization. Knowing that, it might be possible to then set a process (whole JVM) exclusively on a core. You can get the PID of the JVM.</p>
","java"
"960",34077482,"<p>JPMML-SkLearn expected that <code>ndarray.shape</code> is tuple of <code>i4</code> (mapped to <code>java.lang.Integer</code> by the Pyrolite library). However, in this case it was a tuple of <code>i8</code> (mapped to <code>java.lang.Long</code>). Hence the cast exception.</p>

<p>This issue has been addressed in JPMML-SkLearn <a href=""https://github.com/jpmml/jpmml-sklearn/commit/f7c16ac2fbfd735ac086e173d0c19dd3ab9aac45"" rel=""nofollow"">commit f7c16ac2fb</a>.</p>

<p>If you should encounter another exception (data translation between platforms could be tricky), then you should also open a JPMML-SkLearn issue about it.</p>
","java"
"961",27901278,"<p>The ctypes module in CPython (2.7) defines a <code>create_string_buffer</code> function. The ctypes module in Jython (2.7 beta 3) does not. </p>

<p>I don't really know more than this, but it seems reasonable to conclude that support for ctypes in Jython is incomplete. See also:</p>

<ul>
<li><a href=""http://bugs.jython.org/issue2148"" rel=""nofollow"">http://bugs.jython.org/issue2148</a></li>
<li><a href=""http://fwierzbicki.blogspot.se/2014/08/jython-27-beta3-released.html"" rel=""nofollow"">http://fwierzbicki.blogspot.se/2014/08/jython-27-beta3-released.html</a> (ctypes is mentioned in one of the comments)</li>
</ul>
","java"
"962",1925360,"<p>In effect, Python <em>is</em> a rules engine.</p>

<p>""The engine will be used as way to automate a house, like turning the light off when somebody leaves a room etc.""</p>

<p>You need sensors and controllers.  You write your ""rules"" as ordinary Python objects.</p>

<p>Your main ""program"" collects events from your sensors and sends events to your controllers.  </p>

<p>If you can read from your sensors via ordinary USB, that's even better.  The marine industry uses a couple of closely related standards like NMEA 0183 and NMEA 2000 for specifying the traffic on the bus from sensor to controller.</p>

<p>You don't need Yet Another Rules Language.  You have Python.</p>
","java"
"963",2690147,"<p>Python also comes <em>With Batteries Included</em>... The only place where I've felt Python lacking is a good GUI toolkit (no, TK doesn't compare to Swing xD).</p>
","java"
"964",37876618,"<p>The best solution would be <em>not</em> to do this.</p>

<p>Now I don't know about your country's legislation, but in mine, any solution of this sort would be highly illegal. If the client is worried about the contractor, there would be other means of ""monitoring"" them.</p>

<ul>
<li>Daily reporting</li>
<li>Set up a proxy blacklisting sites, possibly enforcing it over network tools</li>
<li>Actually <em>meet</em> the person and talk with them about their achievements, difficulties and such. Not <em>inquiring</em>, actually <em>caring</em> about how the project is going. If that doesn't motivate the contractor to work, nothing will.</li>
</ul>
","java"
"965",4014670,"<p>You can write a WEB APPLICATION. The encryption part is solved by simple HTTPS usage. On the server side (your home computer with USB devices attached to it) you should use <strong>Python</strong> (since you're quite experienced with it) and a Python Web Framework you want (I.E. Django).</p>
","java"
"966",4909306,"<p>Python web frameworks do it in a similar way as some Java-based frameworks. I can speak for Django here.</p>

<p>A good comparison could be Play! vs. Django. Both of them foster using an MVC architecture (or MTV = models, templates, views) and already provide you with a lot of things like CRUD operations in admin pages, ORM, authentication, URL configurations, a template language and much more.</p>

<p>Other Java-based frameworks might differ a lot, and I can't give you a general answer. Depending on the choice, there are only few differences. You can simply choose the language and framework you like the most. I'd recommend to go through some tutorials (<a href=""http://docs.djangoproject.com/en/dev/intro/tutorial01/"" rel=""nofollow"">Django tutorial</a>, <a href=""http://www.playframework.org/documentation/1.1.1/guide1"" rel=""nofollow"">Play! framework tutorial</a> for instance) and look which one works best for your needs.</p>
","java"
"967",17840004,"<p>What about official GitHub <a href=""https://github.com/antlr/grammars-v4"" rel=""nofollow"">ANTLR4 grammar repository</a>? You can find many common language grammars. There is even a <a href=""https://github.com/antlr/grammars-v4/tree/master/python3"" rel=""nofollow"">python3 directory</a> containing <code>Python3.g4</code>.</p>

<p>This should help you out.</p>
","java"
"968",802243,"<p>Checkout <a href=""http://opencv.willowgarage.com/wiki/PythonInterface"" rel=""nofollow"">OpenCV Python Interface</a></p>
","java"
"969",4052691,"<p>To get totally unbiased is impossible, you can do various stuff like running minimum processes etc but IMO best way is to run scripts in random order over a long period of time over different days and get average which will be as near to unbias as possible.</p>

<p>Because ultimately code will run in such environment in random order and you are interested in average behavior not some numbers.</p>
","java"
"970",40026885,"<p>In a terminal, <code>pip install bs4</code>. Then you can extract the text with python like so:</p>

<pre><code>import bs4

for cell in [
    '&lt;html&gt;The indicator lights on the control cabinet&amp;nbsp;are to be replaced with 24Vdc&amp;nbsp;LED\'s. 3 Red &amp;amp;&amp;nbsp;3 Green.&lt;/html&gt;',
    '&lt;html&gt;&lt;div&gt; &lt;span style=""""FONT-SIZE: 18pt""""&gt;Close the Monthly LAD and Lanyard Work orders to show they were executed. &lt;/span&gt;&lt;/div&gt;']:
    print(bs4.BeautifulSoup(cell).text.strip())
</code></pre>

<p>Result:</p>

<pre><code>The indicator lights on the control cabinet are to be replaced with 24Vdc LED's. 3 Red &amp; 3 Green.
Close the Monthly LAD and Lanyard Work orders to show they were executed.
</code></pre>
","java"
"971",18484843,"<p>tcollector doesn't care whether the collector you write is in Python or a shell script or what.  As long as you put the collector in <code>tcollector/collectors/0</code> it should be picked up automatically.  If it is not, then check that your shell script is executable (<code>chmod a+x</code>) and that it starts with a shebang (<code>#!/bin/sh</code> for example).</p>
","java"
"972",2802711,"<pre><code>  public static void main(String[] args) throws FileNotFoundException {
    Scanner scanner = new Scanner(new File(""scan.txt""));
    try {
      while (scanner.hasNextLine()) {
        System.out.println(scanner.nextLine());
      }
    } finally {
      scanner.close();
    }
  }
</code></pre>

<p>Some caveats:</p>

<ul>
<li>That uses the default system encoding, but you should <a href=""http://java.sun.com/javase/6/docs/api/java/util/Scanner.html#Scanner%28java.io.File,%20java.lang.String%29"" rel=""nofollow"">specify the file encoding</a></li>
<li>Scanner swallows I/O exceptions, so you may want to check <a href=""http://java.sun.com/javase/6/docs/api/java/util/Scanner.html#ioException%28%29"" rel=""nofollow"">ioException()</a> at the end for proper error handling</li>
</ul>
","java"
"973",7535716,"<p>Call Netpbm programs
<a href=""http://netpbm.sourceforge.net/"" rel=""nofollow"">http://netpbm.sourceforge.net/</a>
from a Python script using the following commands:</p>

<pre><code>$ pngtopnm test.png | pnmquant 16 | pnmtopng &gt; test16.png

$ file test16.png
test16.png: PNG image data, 700 x 303, 4-bit colormap, non-interlaced
</code></pre>

<p>And GIMP reports test16.png as having <code>Color space: Indexed color (16 colors)</code>,
which I guess is what you want.</p>

<p>This is not a pure Python solution but PIL is also not pure Python and has dependencies on shared libraries too.  I think you cannot avoid a dependency on some external image software.</p>
","java"
"974",19259285,"<p>Try having your DefaultExecutor run <code>""python -v""</code> and see if it gives you any hints. Maybe Java is using the wrong version of python for some reason to be discovered.</p>

<p>Or try running:</p>

<pre><code>DefaultExecutor executor = new DefaultExecutor();
String s = ""python  \""import sys; print sys.executable\""""
executor.execute(s);
</code></pre>

<p>That might allow you to see which version of python Java is using.</p>
","java"
"975",929988,"<p>I don't think there is an exact equivalent, however there are anonymous classes that are about as close as you can get.  But still pretty different.  Joel Spolsky wrote an article about how the students taught only Java are missing out on these beauties of functional style programming: <a href=""http://www.joelonsoftware.com/items/2006/08/01.html"" rel=""nofollow"">Can Your Programming Language Do This?</a>.</p>
","java"
"976",30012060,"<p>According to the Javadoc, <code>Runtime.exec(String)</code> breaks the command into the command-args list using a <code>StringTokenizer</code>, which will probably break your command into:</p>

<pre><code>bash
-c
'source
activate
abc_env'
</code></pre>

<p>Which is obviously not what you want. What you should do is probably use the version of <code>Runtime.exec(String[])</code> that accepts a ready list of arguments, passing to it <code>new String[] {""bash"", ""-c"", ""source activate abc_env""}</code>.</p>

<p>Now, to get an idea why it's not working, you should not only read from its <code>stdout</code> but also from <code>stderr</code>, using <code>p.getErrorStream()</code>. Just print out what you read, and it will be a great debugging aid.</p>

<p>Re: your edit. Now it looks like it's working fine, as far as Java and bash are concerned. The output ""activate: No such file or directory"" is probably the output from the successful run of the <code>source</code> command. It just that <code>source</code> can't find the <code>activate</code> file. Is it in the working directory? If not, you probably should have <code>""cd /wherever/your/files/are; source activate cvxpy_env""</code>. Oh, and if your python script depends on whatever side-effects the source command has, you probably have to execute it in the same <code>bash</code> instance, that is:</p>

<pre><code>String[] command = {
                ""/bin/bash"",
                ""-c"",
                ""cd /wherever/your/files/are &amp;&amp; source activate cvxpy_env &amp;&amp; python example.py""
        };
</code></pre>

<p>Or better yet, pack it all into a single shell script, and then just <code>Runtime.exec(""./my_script.sh"")</code> (don't forget to <code>chmod +x</code> it, though).</p>
","java"
"977",36584975,"<p>Java's <code>for (a : b)</code> loop loops over <em>values</em>, not indices.</p>

<p><code>index</code> is not actually an index.</p>
","java"
"978",24872557,"<p>Your python code appends a colon to the input String before calling Base64</p>

<pre><code>&gt;&gt;&gt; print '%s:' % 'test'
test:
</code></pre>

<p>When I add the colon to your java code, I am able to get the same result in my testing (python and Java),</p>

<pre><code>String user = System.getProperty(""user.name"") + "":"";
byte[] encoded_str = Base64.encodeBase64(user
    .getBytes());
String encoded_string = new String(encoded_str)
    .trim();
System.out.println(encoded_string);
</code></pre>
","java"
"979",1462160,"<p>I read that to mean 1 GB stored during the course of a day, not added in a day, so in other words you can have up to 1 GB of storage for free. If you store more, calculated daily, you have to pay for that additional storage. There is no maximum on how much you can store, you just get billed for it.</p>
","java"
"980",25432317,"<p>Two things to note here, <code>multipart</code> has to be set to <code>true</code> and <code>inline</code> image should take <code>byte[]</code> or <code>File</code> or <code>InputStreamSource</code> as the last param :</p>

<pre><code>sendMail {
    multipart true //has to be there as first line

    from ""sender@somedomain.com""
    to ""receiver@somedomain.com""
    subject ""Report - Sample""
    html htmlStr

    //Use raw byte array instead of string
    inline 'imageId', 'image/png', byteArray
}
</code></pre>
","java"
"981",376765,"<p>I've tried Pythonid before and found it very limited. There's a <a href=""http://plugins.intellij.net/plugin/?id=631"" rel=""nofollow"">new Python plugin</a> from JetBrains, the people that make IDEA, which looks pretty nice, though it's <a href=""http://www.jetbrains.net/confluence/display/PYH/Release+Notes"" rel=""nofollow"">still very unfinished</a>.</p>
","java"
"982",10116436,"<p>You asked about linking AutoIt with Java. For my purposes, I've done this using a ProcessBuilder to create a Process, then get the Processes InputStream and ErrorStream and be sure to handle these streams in a separate thread. I have AutoIt communicate with my Java program using the InputStream. A good article for this (though a little out of date) is this one: <a href=""http://www.javaworld.com/javaworld/jw-12-2000/jw-1229-traps.html"" rel=""nofollow"">When Runtime.exec() won't</a>. It is key to be sure that the process be run on a background thread and that the two streams be read in their own threads. If you're doing this in a Swing GUI, then extra care must be taken that all Swing calls be made on the main Swing event thread, the EDT.</p>
","java"
"983",1801459,"<p>Maybe you should look into using associate arrays (aka dict in python) to avoid having duplicate elements in the first place.</p>
","java"
"984",1859865,"<p>Quoting <a href=""http://en.wikipedia.org/wiki/Jython"">Wikipedia</a>:</p>

<blockquote>
  <p>Jython, successor of JPython, is an implementation of the Python programming language written in Java.</p>
</blockquote>

<p>As for what uses it may have:</p>

<blockquote>
  <p>Jython programs can seamlessly import and use any Java class. Except for some standard modules, Jython programs use Java classes instead of Python modules.</p>
</blockquote>

<p>Performance measurements of Jython, IronPython and CPython show that both Jython and IronPython outperform CPython for some cases with large datasets.</p>
","java"
"985",1120709,"<p>Isn't the 6510 in the C64? 
You might be able to make use of the java libraries that emulate c64 code</p>

<p><a href=""http://www.dreamfabric.com/c64/"" rel=""nofollow"">http://www.dreamfabric.com/c64/</a></p>

<p><a href=""http://www.jac64.com/jac64-java-based-c64-emulator.html"" rel=""nofollow"">http://www.jac64.com/jac64-java-based-c64-emulator.html</a></p>

<p>If you aren't afraid of C++ try this general purpose one:</p>

<p><a href=""http://cef.sourceforge.net/index.php"" rel=""nofollow"">http://cef.sourceforge.net/index.php</a></p>
","java"
"986",3734463,"<p>Have you looked at <a href=""http://download.oracle.com/javase/6/docs/api/java/util/PriorityQueue.html"" rel=""nofollow""><code>java.util.PriorityQueue</code></a>?</p>
","java"
"987",2507463,"<p>My first thought would be to use Hibernate and Java, but I may be biased because that is what my experience is in. You generally map your Model classes via Hibernate after you create the database anyway, so it might not be a bad choice.</p>

<p>I'll let it explain itself to you: <a href=""http://www.hibernate.org/"" rel=""nofollow"">Hibernate's website</a></p>
","java"
"988",13503861,"<p>I would suspect this is due to Server Name Indication support introduced on the client side in Java 7.</p>

<p>SNI allows the client to specify the host name within the SSL/TLS initial request, in particular to be able to host multiple host names on the same IP address/port with distinct certificates (what Apache Httpd calls name-based virtual hosts). Knowing the requested host name during the SSL/TLS handshake allows the server to server the right certificate, before any HTTP traffic is used (the HTTP <code>Host</code> header is used at the HTTP level, but it's too late for HTTPS).</p>

<p>When the client doesn't support it, the server doesn't know which host name is really required by the client and will usually fall back onto a default host value and serve the default certificate.</p>

<p>(Note that you'll experience the same problem with any version of IE on Win XP and possibly some mobile browsers.)</p>

<p><strong>EDIT:</strong> Following your edit (<code>URL url = new URL(urlString); // https://abc.myhost.com</code>).</p>

<p>This seems to confirm the SNI issue. (You can check using Wireshark to see if there's a server name extension in the TLS Client Hello message.)</p>

<p>With Java 7 and any client supporting SNI, when requesting <code>https://abc.myhost.com</code>, you will indeed get a certificate valid for <code>abc.myhost.com</code> (provided that the server is correctly configured), because <code>HttpsURLConnection</code> also tells the JSSE (the Java SSL/TLS stack) to use the server name extension and initiate the SSL/TLS connection with the host name for that URL.</p>

<p>With Java 6 and any client that doesn't support SNI (Python 2.7, at least without other libraries), you'll get the certificate that the server presents by default when connecting to that IP address and port.</p>

<p>It has nothing to do with <code>HttpsURLConnection.getServerCertificates()</code> or <code>SSLConnection.get_peer_cert()</code>. Rather, it's because the server expects the client to support SNI, which some older clients/platforms don't.</p>

<p>If you need to support Java 6, Python 2.x, Internet Explorer (or other clients that use the default MS API) on Windows XP, you won't be able to use SNI. In this case, you should contact the server administrator to change the configuration not to use SNI (which may require an additional IP address if these multiple hosts are required).</p>
","java"
"989",3914615,"<p>You could put shell script output to some storage on server. And use AJAX on the web page to poll the server and get updates from that storage to the page.</p>

<p>If you will decide to use JSF for web page creation I can recommend ""a4j:poll"" component from ajax2jsf library. It is very simple and straightforward. Very easy way to poll server from the web page.</p>
","java"
"990",17135496,"<p>After trying everything, Yowsup library worked for me. The bug that I was facing was recently fixed. Anyone trying to do something with Whatsapp should try it.</p>
","java"
"991",11065260,"<p><strong>Check out this: <a href=""http://stackoverflow.com/questions/3652554/calling-java-from-python"">Calling Java from Python</a></strong></p>

<p>""<strong>You could also use Py4J. There is an example on the frontpage and lots of documentation, but essentially, you just call Java methods from your python code as if they were python methods:</strong></p>

<pre><code>from py4j.java_gateway import JavaGateway
</code></pre>

<blockquote>
  <blockquote>
    <blockquote>
      <p>gateway = JavaGateway()                        # connect to the JVM</p>
      
      <p>java_object = gateway.jvm.mypackage.MyClass()  # invoke constructor</p>
      
      <p>other_object = java_object.doThat()</p>
      
      <p>other_object.doThis(1,'abc')</p>
      
      <p>gateway.jvm.java.lang.System.out.println('Hello World!') # call a static method</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>As opposed to Jython, one part of Py4J runs in the Python VM so it is always ""up to date"" with the latest version of Python and you can use libraries that do not run well on Jython (e.g., lxml). The other part runs in the Java VM you want to call.</p>

<p><strong>The communication is done through sockets instead of JNI and Py4J has its own protocol (to optimize certain cases, to manage memory, etc.)</strong>""</p>
","java"
"992",9280885,"<p>If c++ is an option you should really take a look at VTK</p>

<p><a href=""http://www.vtk.org/"" rel=""nofollow"">http://www.vtk.org/</a></p>

<p>It is very powerful to display 3D vector fields, and is pretty easy to use</p>
","java"
"993",18114735,"<p>Your problem is that you are passing two options two the script rather than the four that getopt expects. That is, <code>-i infile.txt</code> is treated as one option, not, as getopt expects, the two options <code>-i</code> and <code>infile.txt</code>, and the same thing is happening to <code>-o outfile.txt</code>. You can fix this by replacing the line:</p>

<pre><code>String[] cmdArray = new String[] { python.toString(), script.toString(), ""-i infile.txt"", ""-o outfile.txt"" };
</code></pre>

<p>with this line:</p>

<pre><code>String[] cmdArray = new String[] { python.toString(), script.toString(), ""-i"", ""infile.txt"", ""-o"", ""outfile.txt"" };
</code></pre>

<p>Notice that now <code>-i</code> and <code>infile.txt</code> are now separate array elements, as are <code>-o</code> and <code>-outfile.txt</code>.</p>
","java"
"994",3882249,"<p>You can <a href=""http://docs.google.com/support/bin/answer.py?hl=en&amp;answer=86101"" rel=""nofollow"">embed Google docs presentations</a> in your site.</p>
","java"
"995",9611275,"<p>Python comes with modules for CSV files, XML, and JSON, so one of those would likely do the trick quite well.</p>
","java"
"996",16871370,"<p>Ultimately the best source of information is the Android source code itself which you can get from Google's site (Start with Android.com, you'll find it..).  Generally the Android platform is a collection of open-source libraries and programs written in a few languages (C++ and Java mostly from memory) with a number of build tools and scripts thrown in to pull it all together. As far as learning to program for the Android platform goes, start looking at the Android.com site, you can get all the tools and documentation from there, as well as emulators to allow you to play with sample code without needing to buy a phone. Good luck and have fun!</p>
","java"
"997",14762048,"<p>You can do this, but finding how to do it in the documentation is kind of a wild goose chase.</p>

<p>The <a href=""http://docs.python.org/2/library/subprocess.html#subprocess.call""><code>subprocess.call()</code> documentation</a> says,</p>

<blockquote>
  <p><strong><code>subprocess.call(args, *, stdin=None, stdout=None, stderr=None, shell=False)</code></strong>
  The arguments shown above are merely the most common ones, described below in <a href=""http://docs.python.org/2/library/subprocess.html#frequently-used-arguments"">Frequently Used Arguments</a> (hence the slightly odd notation in the abbreviated signature). </p>
</blockquote>

<p>Then the <a href=""http://docs.python.org/2/library/subprocess.html#frequently-used-arguments"">Frequently Used Arguments</a> section, says, at the very end after describing a bunch of other arguments:</p>

<blockquote>
  <p>These options, along with all of the other options, are described in more detail in the <a href=""http://docs.python.org/2/library/subprocess.html#subprocess.Popen""><code>Popen</code></a> constructor documentation.</p>
</blockquote>

<p>Well then! The <a href=""http://docs.python.org/2/library/subprocess.html#subprocess.Popen""><code>Popen</code></a> documentation gives the full signature:</p>

<blockquote>
  <p><code>class subprocess.Popen(args, bufsize=0, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=False, shell=False, cwd=None, env=None, universal_newlines=False, startupinfo=None, creationflags=0)</code></p>
</blockquote>

<p><code>env</code> is the one you want! However, if you just pass <code>env={'JAVA_OPTS': 'foo'}</code>, then that will override <em>all</em> environment variables, including stuff like <code>CLASSPATH</code>, which could break other things. So you probably want to use code like this to add a <code>JAVA_OPTS</code> environment variable for the new process execution, without setting it in the current process:</p>

<pre><code>#!/usr/bin/env python2.7

import os
import subprocess

# Make a copy of the environment    
env = dict(os.environ)
env['JAVA_OPTS'] = 'foo'
subprocess.call(['java', '-jar', 'temp.jar'], env=env)
</code></pre>
","java"
"998",10215225,"<p>If your function does not require anything (so it has no parameters) then you are allowed to avoid passing anything, this is done by declaring it as</p>

<pre><code>void noArgumentsFunction() {
  // body
}
</code></pre>

<p>But the <code>main</code> function, that is a boiler plate, must accept an array of <code>String</code>s. That's why you are forced to declare the signature to accept it (and then ignore it in case). The funcion must accept this parameter because it's the <a href=""http://en.wikipedia.org/wiki/Main_function_%28programming%29"" rel=""nofollow"">entry point</a> for your program and any Java program must support a array of parameters that is passed with command line (exactly as every C/C++ program, also if you are not forced to do it).</p>
","java"
"999",26574114,"<p>You could get all combinations of using the amount of times a, n and d appear:</p>

<pre><code>from itertools import combinations
def sub_s(st,word):
   all_s = (x for x in st if x in word)
   return len([x for x in (combinations(all_s, len(word))) if """".join(x) == word] )
</code></pre>
","java"
"1000",32476826,"<p>You can use a ShellCommandPrecondition for this which will let you write a custom precondition.</p>

<pre><code>{
  ""objects"": [
    {
      ""schedule"": {
        ""ref"": ""DefaultSchedule""
      },
      ""resourceRole"": ""DataPipelineDefaultResourceRole"",
      ""role"": ""DataPipelineDefaultRole"",
      ""name"": ""DefaultResource1"",
      ""id"": ""ResourceId_dWoZ0"",
      ""type"": ""Ec2Resource"",
      ""terminateAfter"": ""1 Hour""
    },
    {
      ""name"": ""DefaultPrecondition1"",
      ""id"": ""PreconditionId_yA2rV"",
      ""type"": ""ShellCommandPrecondition"",
      ""command"": ""&lt;Script to check mysql field&gt;""
    },
    {
      ""occurrences"": ""1"",
      ""period"": ""1 Day"",
      ""name"": ""RunOnce"",
      ""id"": ""DefaultSchedule"",
      ""type"": ""Schedule"",
      ""startAt"": ""FIRST_ACTIVATION_DATE_TIME""
    },
    {
      ""failureAndRerunMode"": ""CASCADE"",
      ""schedule"": {
        ""ref"": ""DefaultSchedule""
      },
      ""resourceRole"": ""DataPipelineDefaultResourceRole"",
      ""role"": ""DataPipelineDefaultRole"",
      ""pipelineLogUri"": ""s3://&lt;mybucket&gt;"",
      ""scheduleType"": ""cron"",
      ""name"": ""Default"",
      ""id"": ""Default""
    },
    {
      ""schedule"": {
        ""ref"": ""DefaultSchedule""
      },
      ""name"": ""DefaultActivity1"",
      ""runsOn"": {
        ""ref"": ""ResourceId_dWoZ0""
      },
      ""precondition"": {
        ""ref"": ""PreconditionId_yA2rV""
      },
      ""id"": ""ActivityId_gmQ0W"",
      ""type"": ""ShellCommandActivity"",
      ""command"": ""echo 'Hello world'""
    }
  ],
  ""parameters"": []
}
</code></pre>
","java"
"1001",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1002",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1003",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1004",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1005",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1006",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1007",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1008",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1009",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1010",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1011",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1012",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1013",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1014",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1015",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1016",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1017",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1018",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1019",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1020",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1021",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1022",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1023",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1024",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1025",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1026",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1027",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1028",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1029",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1030",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1031",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1032",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1033",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1034",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1035",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1036",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1037",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1038",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1039",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1040",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1041",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1042",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1043",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1044",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1045",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1046",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1047",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1048",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1049",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1050",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1051",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1052",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1053",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1054",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1055",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1056",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1057",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1058",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1059",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1060",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1061",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1062",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1063",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1064",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1065",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1066",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1067",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1068",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1069",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1070",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1071",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1072",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1073",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1074",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1075",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1076",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1077",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1078",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1079",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1080",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1081",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1082",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1083",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1084",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1085",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1086",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1087",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1088",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1089",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1090",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1091",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1092",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1093",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1094",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1095",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1096",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1097",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1098",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1099",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1100",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1101",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1102",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1103",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1104",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1105",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1106",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1107",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1108",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1109",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1110",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1111",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1112",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1113",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1114",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1115",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1116",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1117",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1118",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1119",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1120",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1121",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1122",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1123",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1124",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1125",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1126",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1127",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1128",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1129",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1130",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1131",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1132",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1133",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1134",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1135",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1136",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1137",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1138",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1139",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1140",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1141",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1142",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1143",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1144",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1145",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1146",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1147",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1148",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1149",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1150",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1151",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1152",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1153",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1154",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1155",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1156",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1157",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1158",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1159",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1160",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1161",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1162",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1163",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1164",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1165",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1166",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1167",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1168",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1169",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1170",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1171",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1172",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1173",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1174",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1175",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1176",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1177",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1178",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1179",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1180",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1181",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1182",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1183",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1184",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1185",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1186",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1187",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1188",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1189",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1190",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1191",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1192",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1193",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1194",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1195",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1196",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1197",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1198",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1199",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1200",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1201",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1202",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1203",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1204",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1205",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1206",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1207",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1208",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1209",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1210",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1211",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1212",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1213",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1214",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1215",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1216",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1217",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1218",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1219",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1220",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1221",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1222",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1223",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1224",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1225",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1226",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1227",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1228",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1229",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1230",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1231",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1232",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1233",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1234",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1235",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1236",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1237",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1238",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1239",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1240",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1241",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1242",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1243",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1244",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1245",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1246",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1247",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1248",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1249",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1250",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1251",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1252",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1253",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1254",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1255",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1256",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1257",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1258",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1259",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1260",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1261",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1262",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1263",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1264",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1265",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1266",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1267",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1268",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1269",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1270",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1271",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1272",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1273",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1274",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1275",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1276",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1277",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1278",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1279",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1280",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1281",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1282",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1283",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1284",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1285",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1286",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1287",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1288",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1289",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1290",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1291",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1292",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1293",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1294",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1295",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1296",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1297",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1298",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1299",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1300",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1301",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1302",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1303",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1304",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1305",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1306",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1307",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1308",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1309",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1310",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1311",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1312",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1313",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1314",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1315",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1316",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1317",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1318",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1319",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1320",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1321",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1322",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1323",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1324",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1325",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1326",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1327",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1328",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1329",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1330",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1331",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1332",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1333",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1334",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1335",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1336",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1337",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1338",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1339",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1340",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1341",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1342",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1343",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1344",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1345",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1346",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1347",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1348",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1349",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1350",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1351",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1352",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1353",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1354",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1355",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1356",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1357",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1358",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1359",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1360",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1361",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1362",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1363",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1364",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1365",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1366",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1367",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1368",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1369",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1370",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1371",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1372",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1373",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1374",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1375",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1376",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1377",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1378",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1379",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1380",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1381",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1382",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1383",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1384",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1385",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1386",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1387",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1388",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1389",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1390",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1391",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1392",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1393",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1394",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1395",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1396",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1397",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1398",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1399",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1400",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1401",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1402",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1403",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1404",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1405",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1406",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1407",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1408",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1409",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1410",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1411",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1412",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1413",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1414",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1415",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1416",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1417",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1418",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1419",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1420",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1421",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1422",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1423",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1424",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1425",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1426",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1427",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1428",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1429",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1430",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1431",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1432",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1433",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1434",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1435",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1436",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1437",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1438",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1439",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1440",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1441",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1442",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1443",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1444",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1445",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1446",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1447",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1448",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1449",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1450",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1451",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1452",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1453",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1454",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1455",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1456",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1457",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1458",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1459",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1460",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1461",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1462",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1463",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1464",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1465",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1466",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1467",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1468",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1469",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1470",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1471",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1472",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1473",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1474",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1475",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1476",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1477",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1478",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1479",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1480",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1481",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1482",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1483",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1484",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1485",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1486",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1487",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1488",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1489",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1490",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1491",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1492",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1493",10026797,"<p>There is <a href=""https://pypi.python.org/pypi/attrdict"" rel=""nofollow"">an attrdict library</a> that does exactly that in a very safe manner, but if you want, a quick and dirty (possibly leaking memory) approach was given in <a href=""http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python#answer-14620633"">this answer</a>:</p>

<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'
aa = json.loads(j, object_hook=AttrDict)
</code></pre>
","json"
"1494",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1495",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1496",10026797,"<p>I found the answer:  <a href=""http://docs.python.org/reference/datamodel.html?highlight=__getattr__#new-style-special-lookup"" rel=""nofollow"">There is intentionally no way to automatically map the special methods in python, using <code>__getattribute__</code></a>.  So to achieve what I want, I need to explicitely define all special methods like <code>__len__</code> one after the other.</p>
","json"
"1497",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1498",8423240,"<pre><code>import json

json.dumps(obj_instance.sqlmeta.asDict())
</code></pre>

<p>In my case this object contained datetimes which json doesn't serialize, so I did something like this:</p>

<pre><code>json.dumps(dict((k, str(v)) for (k,v) in obj_instance.sqlmeta.asDict().items()))
</code></pre>
","json"
"1499",8423240,"<p>You can use the python <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">json module</a> with the SQLObject <a href=""http://sqlobject.org/SQLObject.html#class-sqlmeta"" rel=""nofollow"">sqlmeta</a> class. Like this:</p>

<pre><code>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</code></pre>

<p>When I run this with your class <code>Foo</code> I get:</p>

<pre><code>&gt;&gt;&gt; print to_json(f)
{""bar"": ""test"", ""lulz"": ""only for the"", ""baz"": true}
</code></pre>

<p><strong>Edit:</strong> if you want to include <a href=""http://sqlobject.org/SQLObject.html#adding-magic-attributes-properties"" rel=""nofollow"">magic attributes</a> in your json string and you don't mind using something of a hack, you could abuse the fact that the attributes of your object are python properties. For example, if I add a magic attribute <code>foo</code> to your original sample class:</p>

<pre><code>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return ""foo""
</code></pre>

<p>Then I can define the <code>to_json()</code> function like this:</p>

<pre><code>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</code></pre>

<p>Now, if I do this:</p>

<pre><code>f = Foo(bar = ""test"", lulz = ""only for the"")
print to_json(f)
</code></pre>

<p>I get the following result:</p>

<pre><code>{""baz"": true, ""lulz"": ""only for the"", ""bar"": ""test"", ""foo"": ""foo""}
</code></pre>
","json"
"1500",10026797,"<p>I think you're making this more complex than it needs to be. If I understand you correctly, all you should need to do is this:</p>

<pre><code>import json

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

j = '{""y"": [2, 3, {""a"": 55, ""b"": 66}], ""x"": 4}'

aa = json.loads(j, object_hook=Struct)

for i in aa.y:
    print(i)
</code></pre>

<p>When you load JSON, the <code>object_hook</code> parameter lets you specify a callable object to process objects that it loads. I've just used it to turn the dict into an object that allows attribute access to its keys. <a href=""http://docs.python.org/library/json#json.load"" rel=""nofollow"">Docs</a></p>
","json"
"1501",24750856,"<p>If you want just to build up a structure by urls, better start with such a class</p>

<pre><code>class Node(object):

    def __init__(self, name):
        self.name = name
        self.children = {}

    def insert(self, paths):
        child_name = paths.pop(0)
        if not child_name in self.children:
            self.children[child_name] = Node(child_name)
        if paths:
            self.children[child_name].insert(paths)
</code></pre>

<p>And this is how to use it.</p>

<pre><code>with open('urls.txt') as urls:
    root = Node('')
    for url in urls:
        root.insert(url.split('/'))
</code></pre>
","python"
"1502",18679504,"<p>The <a href=""http://pyqt.sourceforge.net/Docs/PyQt4/qmessagebox.html#setButtonText"" rel=""nofollow""><code>QMessageBox::setButtonText</code></a> is what you need.</p>

<p><strong>Edit:</strong></p>

<p>Thanks to <a href=""http://stackoverflow.com/questions/18679504/qtgui-qmessagebox-information-and-customizing-it/18679886#comment27517306_18679886"">Bakuriu</a> for pointing this out.</p>

<p>The <code>setButtonText</code> method mentioned above would work when used with PyQt/PySide library compiled against Qt4.3 or earlier. <a href=""http://qt.gitorious.org/pyside/pyside/source/d2a47ab8f27af7e74d34797464da85c128c17c37%3aPySide/QtGui/typesystem_gui_common.xml#L4317"" rel=""nofollow"">Source</a>.</p>

<p>And for later versions, changing the text of a button would involve:</p>

<p><a href=""http://srinikom.github.io/pyside-docs/PySide/QtGui/QMessageBox.html#PySide.QtGui.PySide.QtGui.QMessageBox.button"" rel=""nofollow""><code>button = messageBox.button(which)</code></a></p>

<p><a href=""http://srinikom.github.io/pyside-docs/PySide/QtGui/QAbstractButton.html#PySide.QtGui.PySide.QtGui.QAbstractButton.setText"" rel=""nofollow""><code>button.setText(text)</code></a></p>
","python"
"1503",21842950,"<p>why don't you use a dictionary for the data, adding additional keys is then easy</p>

<pre><code>dataList = []
keys = myData[0].split(',')
for row in myData:
    tempdict = dict()
    for index, value in enumerate(row.split(',')):
        tempdict[keys[index]] = value
        # if your additional values are going to be determined here then 
        # you can do whatever calculations you need and add them
        # otherwise you do work with this list elsewhere
    dataList.append(tempdict)
</code></pre>
","python"
"1504",18017127,"<p>Use a source code analysis plugin; there are several to choose from, offering different levels of integration and auto-completion, and support for Sublime Text 2 and / or 3.</p>

<ul>
<li><a href=""https://github.com/SublimeCodeIntel/SublimeCodeIntel"" rel=""nofollow"">SublimeCodeIntel</a> - <em>Full-featured code intelligence and smart autocomplete engine</em></li>
<li><a href=""https://github.com/JulianEberius/SublimePythonIDE"" rel=""nofollow"">SublimePythonIDE</a> - <em>ST3 only: A rewrite of SublimeRope for ST3, uses the Rope library to add python completions and refactoring to ST3</em></li>
<li><a href=""https://github.com/eliquious/Python-Auto-Complete"" rel=""nofollow"">Python-Auto-Complete</a> - <em>A Sublime Text 2 plugin which adds additional auto-completion capability to Python scripts</em></li>
<li><a href=""https://github.com/JulianEberius/SublimeRope"" rel=""nofollow"">SublimeRope</a> - <em>ST2 only, use SublimePythonIDE with ST3: Adds Python completions and some IDE-like functions to Sublime Text 2, through the use of the Rope library</em></li>
</ul>

<p>All packages are available through <a href=""http://wbond.net/sublime_packages/package_control"" rel=""nofollow"">Sublime Package Control</a>.</p>
","python"
"1505",37590723,"<p>It seems to me you need more than threads. If you need from your main program to be terminated quickly and run a long background task, you need to fork. I can't test right now, but I think you should try :</p>

<pre><code>from multiprocessing import Process

#...

def getinfo_fast():
    data = getinfofromcachefile()

    p = Process(target=update_cachefile)
    p.start()
    # no join hence main program terminates
    return data

print getinfo_fast()
</code></pre>
","python"
"1506",25214255,"<p>Look into iF Statements for Python. Check out the documentation for Python online,but essentially its just:</p>

<pre><code>if [condition]:
    [statements]
elif [condition]:
    [statements]
else:
    [statements]
</code></pre>
","python"
"1507",15995292,"<p>Due to the <a href=""http://docs.python.org/2/tutorial/floatingpoint.html"" rel=""nofollow"">inaccuracy of floating point</a>, there will always come a time when the value of <code>x</code> is so small that Python can't store its value, and it essentially becomes <code>0</code>. It takes 54 iterations (<a href=""http://stackoverflow.com/a/15995317/1907098"">53, actually</a>) to get to that stage, which is why <code>i</code> is 54.</p>

<p>For example,</p>

<pre><code>&gt;&gt;&gt; 1e-1000
0.0
</code></pre>
","python"
"1508",7862987,"<p>For input files you could use <a href=""http://docs.python.org/library/fileinput.html""><code>fileinput</code></a> module. It follows common convention for input files: if no files given or filename is '-' it reads stdin, otherwise it reads from files given at a command-line.</p>

<p>There is no need in <code>-f</code> and <code>--file</code> options. If your program always requires an input file then it is not an option.</p>

<p><code>-o</code> and <code>--output</code> is used to specify <a href=""http://www.gnu.org/prep/standards/html_node/Option-Table.html#Option-Table"">the output file name in various programs</a>.</p>

<h3>optparse</h3>

<pre><code>#!/usr/bin/env python
import fileinput
import sys
from optparse import OptionParser

parser = OptionParser()
parser.add_option('-o', '--output',
    help='Specifies the output file.  The default is stdout.')
options, files = parser.parse_args()
if options.output and options.output != '-':
   sys.stdout = open(options.output, 'w')

for line in fileinput.input(files):
    process(line)
</code></pre>

<h3>argparse</h3>

<p><a href=""http://docs.python.org/library/argparse.html""><code>argparse</code></a> module allows you to specify explicitly files as arguments:</p>

<pre><code>#!/usr/bin/env python
import fileinput
import sys
from argparse import ArgumentParser

parser = ArgumentParser()
parser.add_argument('files', nargs='*', help='specify input files')
group = parser.add_mutually_exclusive_group()
group.add_argument('-o', '--output', 
    help='specify the output file.  The default is stdout')
group.add_argument('-i', '--inplace', action='store_true',
    help='modify files inplace')
args = parser.parse_args()

if args.output and args.output != '-':
   sys.stdout = open(args.output, 'w')

for line in fileinput.input(args.files, inplace=args.inplace):
    process(line)
</code></pre>

<p>Note: I've added <code>--inplace</code> option in the second example:</p>

<pre><code>$ python util-argparse.py --help
usage: util-argparse.py [-h] [-o OUTPUT | -i] [files [files ...]]

positional arguments:
  files                 specify input files

optional arguments:
  -h, --help            show this help message and exit
  -o OUTPUT, --output OUTPUT
                        specify the output file. The default is stdout
  -i, --inplace         modify files inplace
</code></pre>
","python"
"1509",26046578,"<p>The main mistake I did was on this line  <strong>rows = soup.find_all('table')[1].find_all('tr')</strong> &lt;- this created a list item. 
To fix the problem I change the line to <strong>table= soup.find_all('table')[1]</strong> then <strong>rows=table.find_all('tr')</strong></p>
","python"
"1510",29836812,"<p>So you want the word starting after @ up to a whitespace?</p>

<pre><code>user=text[text.find(""@"")+1:].split()[0]
print(user)
bob
</code></pre>

<p>EDIT: as @bgstech note, in cases where the string does not have a ""@"", make a check before:</p>

<pre><code>if ""@"" in text:
    user=text[text.find(""@"")+1:].split()[0]
else:
    user=""something_else_appropriate""
</code></pre>
","python"
"1511",28856038,"<p>Write the code you're <code>exec</code>ing to a file, and <a href=""https://stackoverflow.com/questions/1186789/what-is-the-best-way-to-call-a-python-script-from-another-python-script"">run it</a>.</p>

<p>Or better still, accept code input from a file <em>in the first place</em>. This is potentially more secure and makes the code more easily auditable. It also makes it easier for the user to change it later, if that feature is desired.</p>

<p>You should avoid using <code>exec</code> for code you don't control - it's extremely dangerous. Unless you're writing  procedurally generated code, there's no reason for using it.</p>
","python"
"1512",31072487,"<p>Another way is to serialize into Json and write to file.</p>

<pre><code>import json

ll = [ { 'akey1':'val1', 'akey2':'val2'}, {'bkey1':'bkey1', 'bkey2':'bkey2'}]

# write to file
with open('backup.json', 'w') as fout:     
    fout.write(json.dumps(ll))

# read from file
with open('backup.json', 'r') as fin: 
    ll_in = json.load(fin)

print ll_in
</code></pre>
","python"
"1513",14487990,"<p>You won't even get as far as running the model clean method. Django will run the form's validation code first, and because your field is not defined with <code>blank=True</code>, the form will enforce that constraint first.</p>

<p>What you should do is to override the form, setting <code>required=False</code> to the <code>name</code> field, then writing a <em>form</em> clean method which sets values in - and returns - <code>self.cleaned_data</code>:</p>

<pre><code>class TestForm(forms.ModelForm):
    name = forms.CharField(required=False)

    class Meta:
        model = Test

    def clean(self):
        self.cleaned_data['name'] = 'Robin Hood'
        return self.cleaned_data
</code></pre>

<p>and reference that form in your admin class:</p>

<pre><code>class TestAdmin(admin.ModelAdmin):
    form = TestForm
</code></pre>
","python"
"1514",30220930,"<p><code>profile.pets</code> is a method.</p>

<p>You have to call it </p>

<pre><code>pets = profile.pets()
</code></pre>
","python"
"1515",37686810,"<p>Depends what you want <code>self.BROADCASTED</code> to contain. I'm assuming you've simplified your method <code>foo</code> for this example, but because of that it's not clear what the purpose of <code>foo</code> is.</p>

<p>If you want it to contain <code>[a,b,c,..]</code>, then do <code>broadcasted_list.value()</code>. </p>

<p>If you want that variable to contain a reference to a broadcasted object, pass in <code>broadcasted_list</code>. </p>

<p>Assuming you need the values within the list to perform further calculations, you would want to use <code>broadcasted_list.value()</code>. I think you'll find that if you pass in <code>broadcasted_list</code> you will end up with merely a reference to an object, something that looks like this: <code>&lt;pyspark.broadcast.Broadcast object at 0x1f36f50&gt;</code>.</p>
","python"
"1516",28902742,"<p>Kinda simple approach, to not use introspection at all and explicitly define which methods to call:</p>

<pre><code>class A(object):
    methods_to_call = [
        ""get_title_char_count"",
        ""get_title_word_count"",
        ""get_body_char_count"",
    ]
    ...
    def features_to_dict(self):
        feature_dict = {}
        for method in self.methods_to_call:
            feature_dict[method[4:]] = getattr(self, method)()

        return feature_dict
</code></pre>
","python"
"1517",38017937,"<p>Here's a vectorized approach making use of NumPy functions along the way -</p>

<pre><code># Convert strings in a to numeric labels
aID = (np.fromstring(a, dtype=np.uint8)-97).reshape(a.shape)

# Get the argsort for getting sorted keys from dictionary
dk = d.keys()
sidx = np.searchsorted(sorted(dk),dk)

# Extract values from d and sorted by the argsort indices.
# Then, index with the numeric labels from a and multiply with b.
d_vals= np.take(d.values(),sidx)
out = b*d_vals[aID]
</code></pre>

<p>Please note that the keys are assumed to be single character strings. If they are not in that format, you can use <code>np.unique</code> to get numeric labels corresponding to elements in <code>a</code>, like so -</p>

<pre><code>aID = np.unique(a,return_inverse=True)[1].reshape(a.shape)
</code></pre>

<p><strong>Runtime test</strong></p>

<p>In this section, let's use those <code>6 keys</code> and bigger arrays and time all the approaches posted thus far including the original one suggested in the question -</p>

<pre><code>In [238]: def original_app(a,b,d): # From question
     ...:     c = np.zeros(a.shape)
     ...:     for i in range(a.shape[0]):
     ...:         for j in range(a.shape[1]):
     ...:             c[i,j] = b[i,j] * d[a[i,j]]
     ...:     return c
     ...: 
     ...: def vectorized_app(a,b,d): # Proposed code earlier
     ...:     aID = (np.fromstring(a, dtype=np.uint8)-97).reshape(a.shape)
     ...:     dk = d.keys()
     ...:     sidx = np.searchsorted(sorted(dk),dk)
     ...:     d_vals= np.take(d.values(),sidx)
     ...:     return b*d_vals[aID]
     ...: 

In [239]: # Setup inputs
     ...: M, N = 400,500 # Dataisze
     ...: d = {'a': 600, 'b': 100, 'c': 700, 'd': 550, 'e': 200, 'f':80}
     ...: strings = np.array(d.keys())
     ...: a = strings[np.random.randint(0,6,(M,N))]
     ...: b = np.random.rand(*a.shape)
     ...: 

In [240]: %timeit original_app(a,b,d)
1 loops, best of 3: 219 ms per loop

In [241]: %timeit b*np.vectorize(d.get)(a) # @TheBlackCat's solution
10 loops, best of 3: 34.9 ms per loop

In [242]: %timeit vectorized_app(a,b,d)
100 loops, best of 3: 3.17 ms per loop

In [243]: np.allclose(original_app(a,b,d),vectorized_app(a,b,d))
Out[243]: True

In [244]: np.allclose(original_app(a,b,d),b*np.vectorize(d.get)(a))
Out[244]: True
</code></pre>
","python"
"1518",25770971,"<p>You need to view the array containing twice the number of floats floats as complex numbers:</p>

<pre><code>&gt;&gt;&gt; shared_array_base = multiprocessing.Array(ctypes.c_double, 3*3*2)
&gt;&gt;&gt; shared_array = np.ctypeslib.as_array(shared_array_base.get_obj())
&gt;&gt;&gt; shared_array = shared_array.view(np.complex128).reshape(3, 3)
</code></pre>

<p>The complex number format is [re0, im0, re1, im1, re2, im2, ...]:</p>

<pre><code>&gt;&gt;&gt; shared_array[1,1] = 1+2j
&gt;&gt;&gt; shared_array.base
array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  2.,  0.,  0.,  0.,
        0.,  0.,  0.,  0.,  0.])
&gt;&gt;&gt; shared_array.base.base
&lt;multiprocessing.sharedctypes.c_double_Array_18 object at 0x7f7c1b5d1f80&gt;
</code></pre>
","python"
"1519",9679054,"<p>Per <a href=""http://stackoverflow.com/users/553995/praveen-gollakota"">Praveen Gollakota's</a> comment, the original method will work fine. In Python 2.x, you can also use the <a href=""http://docs.python.org/library/itertools.html"" rel=""nofollow"">izip</a> function in the <code>itertools</code> module. Either of these methods will work:</p>

<pre><code>import itertools

x = ['a', 'b', 'c', 'd']
y = [1, 2, 3, 4]

method1 = dict(zip(x, y))
method2 = itertools.izip(x, y)
</code></pre>

<p>In Python 3.x, <code>zip</code> returns an iterator by default, so this method will work perfectly:</p>

<pre><code>x = ['a', 'b', 'c', 'd']
y = [1, 2, 3, 4]

method1 = dict(zip(x, y))
</code></pre>
","python"
"1520",17338925,"<p>I see you are using virtualenv. Usually when I encounter that error your are facing is because the packages don't work well with virtualenv. </p>

<p>Have you tried installing the packages on your main python install folder? (not in virtualenv)</p>

<p>I think this happens because some setup.py files make assumptions about the host environment and don't follow the setup.py best practices. </p>

<p>If you are still stuck give it a try. </p>
","python"
"1521",39368446,"<p>For example if you have list = [ [1,2],[4,5] ] 
then you can use 
[[float(s) for s in xs] for xs in list]
 and it's output is:
 [[1.0, 2.0], [4.0, 5.0]] </p>
","python"
"1522",761519,"<p>You should check out <a href=""http://www.python.org/dev/peps/pep-0008/"">PEP 8</a>, the Style Guide for Python Code:</p>

<blockquote>
  <p>Package and Module Names Modules should have short, all-lowercase names. Underscores can be used in the module name if it improves readability. Python packages should also have short, all-lowercase names, although the use of underscores is discouraged.</p>
  
  <p>Since module names are mapped to file names, and some file systems are case insensitive and truncate long names, it is important that module names be chosen to be fairly short -- this won't be a problem on Unix, but it may be a problem when the code is transported to older Mac or Windows versions, or DOS.</p>
</blockquote>

<p>In other words: rename your file :)</p>
","python"
"1523",35779091,"<p>You need to put <code>{{ form.as_table }}</code> in your template, then your desired apperance will be achived.</p>

<p>If you need another appearance take look at the <a href=""https://docs.djangoproject.com/en/1.9/topics/forms/#form-rendering-options"" rel=""nofollow"">docs</a>.</p>
","python"
"1524",17606740,"<blockquote>
  <p>Closing socket after subprocess.Popen leaves socket in TIME_WAIT as long as child process is still running</p>
</blockquote>

<p>No it doesn't. It leaves it in TIME_WAIT for a fixed amount of time, 2 or 4 minutes. After the close it has nothing to do with the child process at all.</p>
","python"
"1525",9697424,"<p>A problem occurs if you fire 200 requests to a server, responses could be delayed and therefore urllib.urlopen will hang.</p>

<p>Another thing i noticed: If an URLError is raised, the program stays in the while loop until sleeptime is greater than 10. So an URLError error will let this script sleep for 55 sec (1+2+3.. etc)</p>
","python"
"1526",6208274,"<p>They will be sent to the email address defined at the top of the crontab, or to the crontab's owner by default. See the <code>crontab(5)</code> man page for more details.</p>
","python"
"1527",22890201,"<p>if you enter into the shell:</p>

<pre><code>print type(dct.viewkeys())
</code></pre>

<p>it will return:</p>

<pre><code>&lt;type 'dict_keys'&gt;
</code></pre>

<p><code>dict_keys</code> is a <code>Dictionary view</code> object, new in Python 2.7.</p>

<p>from PEP 3106:</p>

<blockquote>
  <p>The dictionary methods keys(), values(), and items() are different in Python 3.x. They return an object called a view instead of a fully materialized list.</p>
  
  <p>It’s not possible to change the return values of keys(), values(), and items() in Python 2.7 because too much code would break. Instead the 3.x versions were added under the new names viewkeys(), viewvalues(), and viewitems().</p>
</blockquote>

<pre><code>&gt;&gt;&gt;
&gt;&gt;&gt; d = dict((i*10, chr(65+i)) for i in range(26))
&gt;&gt;&gt; d
{0: 'A', 130: 'N', 10: 'B', 140: 'O', 20: ..., 250: 'Z'}
&gt;&gt;&gt; d.viewkeys()
dict_keys([0, 130, 10, 140, 20, 150, 30, ..., 250])
</code></pre>

<p>Views are iterable, but the key and item views also behave like sets; &amp; performs intersection, and | performs union:</p>

<pre><code>&gt;&gt;&gt;
&gt;&gt;&gt; d1 = dict((i*10, chr(65+i)) for i in range(26))
&gt;&gt;&gt; d2 = dict((i**.5, i) for i in range(1000))
&gt;&gt;&gt; d1.viewkeys() &amp; d2.viewkeys()
set([0.0, 10.0, 20.0, 30.0])
&gt;&gt;&gt; d1.viewkeys() | range(0, 30)
set([0, 1, 130, 3, 4, 5, 6, ..., 120, 250])
</code></pre>

<p>The view keeps track of the dictionary and its contents change as the dictionary is modified:</p>

<pre><code>&gt;&gt;&gt;
&gt;&gt;&gt; vk = d.viewkeys()
&gt;&gt;&gt; vk
dict_keys([0, 130, 10, ..., 250])
&gt;&gt;&gt; d[260] = '&amp;'
&gt;&gt;&gt; vk
dict_keys([0, 130, 260, 10, ..., 250])
</code></pre>

<p>However, note that you can’t add or remove keys while you’re iterating over the view:</p>

<pre><code>&gt;&gt;&gt;
&gt;&gt;&gt; for k in vk:
...     d[k*2] = k
...
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
RuntimeError: dictionary changed size during iteration
</code></pre>
","python"
"1528",5967866,"<p>There's the option <code>--extra-search-dir</code> that allows to define a local directory containing the desired version of setuptools. This is explained in the <a href=""http://www.virtualenv.org/en/latest/virtualenv.html#the-extra-search-dir-option"" rel=""nofollow"">docs</a>.</p>
","python"
"1529",20286006,"<p>Because you assign to <code>result</code> and <code>end</code> <em>before</em> letting the user play. Also, the <code>start</code> in the first if-body is meaningless.</p>
","python"
"1530",33272402,"<p>Reason for this error is, you are passing <strong>string</strong> instead of <strong>date</strong> to <strong>datetime.date()</strong>. When we receive a date data it will be string type, you have to convert that to date type.</p>

<p>Try this code:- I am including a sample code for adding 60 days to your plant date. please make necessary changes to suit your need.</p>

<pre><code>def calculateplandate(self):
    if self.date_plant:
        start = datetime.strptime(self.date_plant, DEFAULT_SERVER_DATE_FORMAT)
        conv = datetime.date(d1)
        hasil = start + datetime.timedelta(days=60) # for adding 60 days
        self.nursery_plandate = hasil
</code></pre>

<p>Hope this helps.</p>
","python"
"1531",3986222,"<pre><code>matrix = [
['56','23','4'],
['45','5','67'],
['1','52','22']
]

list_A = ['0','1','2']
list_B = ['2','0','1']

for x in zip(list_A,list_B):
    a,b=map(int,x)
    print(matrix[a][b])
# 4
# 45
# 52
</code></pre>
","python"
"1532",12629818,"<p>For the dropdown, add an on Change listener that redirects to a different url. The url could be something like process.php?city=Maine</p>

<p>To add an onchange listener</p>

<pre><code>document.getElementById('citydropdown').addEventListener('change', myFunc, false);
</code></pre>

<p>To redirect in javascript:</p>

<pre><code>window.location = newUrl;
</code></pre>
","python"
"1533",39720735,"<pre><code>import numpy as np
import matplotlib.pyplot as plt
np.random.seed(4)
im = np.random.randint(0, 255, (16, 16))
I = np.dstack([im, im, im])
I[np.logical_and(np.logical_and(I[:, :, 0]==15, I[:, :, 1]==15), I[:, :, 2]==15)] = [0, 1, 0]
plt.figure()
plt.imshow(I, interpolation='nearest' )
plt.figure()
plt.imshow(im, interpolation='nearest', cmap='Greys')
plt.show()
</code></pre>
","python"
"1534",38862203,"<p>You reference an item in a list by using square brackets, like so</p>

<pre><code>c = new_lst[a]
d = new_lst[b]
</code></pre>
","python"
"1535",7822956,"<p>Python's integers can grow arbitrarily large. In order to compute the raw <a href=""http://en.wikipedia.org/wiki/Two%27s_complement"">two's-complement</a> the way you want it, you would need to specify the desired bit width. Your example shows <code>-199703103</code> in 64-bit two's complement, but it just as well could have been 32-bit or 128-bit, resulting in a different number of <code>0xf</code>'s at the start.</p>

<p><code>hex()</code> doesn't do that. I suggest the following as an alternative:</p>

<pre><code>def tohex(val, nbits):
  return hex((val + (1 &lt;&lt; nbits)) % (1 &lt;&lt; nbits))

print tohex(-199703103, 64)
print tohex(199703103, 64)
</code></pre>

<p>This prints out:</p>

<pre><code>0xfffffffff418c5c1L
0xbe73a3fL
</code></pre>
","python"
"1536",38454203,"<p>Just loop through the dictionary and use the <a href=""https://docs.python.org/2/library/csv.html#writer-objects"" rel=""nofollow"">Python csv writer</a> to write to the csv file.</p>

<pre><code>with open('output.csv', 'w') as csv_file:
    csvwriter = csv.writer(csv_file, delimiter='\t')
    for session in users_item:
        for item in users_item[session]:
            csvwriter.writerow([session, item, users_item[session][item]])
</code></pre>
","python"
"1537",30417170,"<p>They are inverse relationships: <code>A</code> contains <code>B</code>, and <code>B</code> is within <code>A</code>.</p>

<pre><code>   &gt;&gt;&gt; A.contains(B)
   True
   &gt;&gt;&gt; B.within(A)
   True

   +----------------------------------+
   |                                  |
   |         +----------+             |
   |         |          |             |
   |         |          |             |
   |         |          |             |
   |         |          |             |
   |         |          |             |
   |         |    B     |             |
   |         |          |             |
   |         +----------+             |
   |                                  |
   |                                  |
   |   A                              |
   |                                  |
   +----------------------------------+
</code></pre>
","python"
"1538",33382857,"<p>In case anyone else ever faces this, I solved the issue. In order to get the data to display, I had to change <code>axes[i,j].plot(...)</code> to <code>axes[i,j].scatter(...)</code>, which I could've sworn I'd tried before:</p>

<p><a href=""http://i.stack.imgur.com/35vbl.png"" rel=""nofollow""><img src=""http://i.stack.imgur.com/35vbl.png"" alt=""Proper output""></a></p>
","python"
"1539",31430814,"<p>If you make the result a list of <em>lists</em>, rather than of <em>tuples</em>, you can <code>append</code> to them:</p>

<pre><code>&gt;&gt;&gt; out = list(map(list, zip(foo, bar)))
&gt;&gt;&gt; out
[[1, 1], [2, 2], [3, 3]]
&gt;&gt;&gt; for old, new in zip(out, baz):
    old.append(new)


&gt;&gt;&gt; out
[[1, 1, 1], [2, 2, 2], [3, 3, 3]]
</code></pre>

<p>If you stick with tuples you can use tuple addition to add the <code>new</code> element, e.g. within a <a href=""https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"" rel=""nofollow"">list comprehension</a>:</p>

<pre><code>&gt;&gt;&gt; out = list(zip(foo, bar))
&gt;&gt;&gt; out[:] = [old + (new,) for old, new in zip(out, baz)]
&gt;&gt;&gt; out
[(1, 1, 1), (2, 2, 2), (3, 3, 3)]
</code></pre>

<p>Otherwise, I think what you have is as neat as it's going to get.</p>
","python"
"1540",25326649,"<p>As in <strong>@jojo</strong>'s answer, but using pandas:</p>

<pre><code>df.A = df.A.where(df.A &gt; 0.5, (1/df.A)*-1)
</code></pre>

<p>or</p>

<pre><code>df.A.where(df.A &gt; 0.5, (1/df.A)*-1, inplace=True) # this should be faster
</code></pre>

<p>.where docstring:</p>

<blockquote>
  <p>Definition:  df.A.where(self, cond, other=nan, inplace=False,
  axis=None, level=None, try_cast=False, raise_on_error=True) </p>
  
  <p>Docstring:
  Return an object of same shape as self and whose corresponding entries
  are from self where cond is True and otherwise are from other.</p>
</blockquote>
","python"
"1541",14940979,"<p>URL are awkward to capture with regex, according to what I've read</p>

<p>Probably using the following regex pattern will be good for you:</p>

<pre><code>pat = 'Website is: (%s)' % fireball
</code></pre>

<p>where fireball is a pattern to catch URLs that you'll find here:</p>

<p><a href=""http://daringfireball.net/2010/07/improved_regex_for_matching_urls"" rel=""nofollow"">daringfireball.net/2010/07/improved_regex_for_matching_urls</a></p>
","python"
"1542",20979993,"<p>The issue is with your init_printing statement.  In a notebook, you do not want to run latex, instead you should use mathjax, so try this instead:</p>

<pre><code>init_printing(use_latex='mathjax')
</code></pre>

<p>When I use this, I get normal pretty printing everywhere, even when I have a sympy expression as the last line of the cell.</p>
","python"
"1543",24232098,"<p>this works fine:</p>

<pre><code>query = [[8.87155979, 2.50616085]]
any(query[0] in x[0] for x in C.values())
</code></pre>
","python"
"1544",39345995,"<p>Python functions always return a unique value. The comma operator is the constructor of tuples so <code>self.first_name, self.last_name</code> evaluates to a tuple and that tuple is the actual value the function is returning.</p>
","python"
"1545",8761860,"<p>Your solution is correct, fast, and probably the best/easiest from a practical standpoint. </p>

<p>The other poster's solutions have worse time complexities than your solution. For a hash, as you are using, the time complexity is indeed O(n). Each insertion is O(1) and there are n words, so the insertion phase costs O(n). Iterating through and finding the max is then O(n). The space is also O(n) as you mentioned.</p>

<p>Note that you will not be able to terminate your algorithm early using Chris's solution because searching your hash table is costly and there is no way for you to perform this in O(1) time after each insertion.</p>

<p>A heap will cost more in time because you need to maintain the heap during each insertion. A heap insertion is O(log(n)) and thus the total cost for insertion will be O(nlog(n)).</p>
","python"
"1546",37840772,"<p>You need a data structure to old these informations, and defining protocols for handling this data structure.</p>

<p>For example common, well supported, data structures used in a Client/Server architecture are json(suggested)/XML you can also generate a .txt file with the result.</p>

<p>Just encode your results in python 2.x and decode them in python 3.y.</p>
","python"
"1547",438149,"<p>No you don't need to use classes for scripting.</p>

<p>However, when you start using the unit testing framework unittest, that will involve classes so you need to understand at least how to sub-class the TestCase class, eg:</p>

<pre><code>import unittest
import os

class TestLint(unittest.TestCase):

    def testLintCreatesLog(self):
        # stuff that does things to create the file lint.log removed...
        assert os.path.exists('lint.log')  # this should be here after lint        
        assert os.path.getsize('lint.log') == 0 # nothing in the log - assume happy

if __name__ == '__main__':
    # When this module is executed from the command-line, run all its tests
    unittest.main()
</code></pre>
","python"
"1548",32216305,"<p><strong>You need to lookup <code>HTTP_AUTHORIZATION</code> key instead of <code>AUTHORIZATION</code> because Django appends <code>HTTP_</code> prefix to the header name.</strong></p>

<p>From the Django docs on <a href=""https://docs.djangoproject.com/en/1.8/ref/request-response/#django.http.HttpRequest.META"" rel=""nofollow"">request.META:</a></p>

<blockquote>
  <p>With the exception of <code>CONTENT_LENGTH</code> and <code>CONTENT_TYPE</code>, any HTTP 
  headers in the request are converted to META keys by
  converting all characters to uppercase, replacing any hyphens with
  underscores <strong>and adding an HTTP_ prefix to the name</strong>. So, for example, a
  header called <code>X-Bender</code> would be mapped to the META key <code>HTTP_X_BENDER</code>.</p>
</blockquote>

<p>So, to retrieve the API key, you need to do:</p>

<pre><code>API_key = request.META.get('HTTP_Authorization')
</code></pre>
","python"
"1549",17993522,"<p>I bet you $5 that the image thresholding inside findChessboardCorners is producing garbage because of the background in the masked image.</p>

<p>I recommend doing a crop, extracting the chessboard, then offsetting the coordinates of the found corners by the crop window position.</p>
","python"
"1550",35588680,"<p>Assuming you are only asking about dispatching commands once they've been received and decoded from <code>json</code> into a <code>dict</code>, you can use use another <code>dict</code> to map command names to the functions that implement them. Here, <code>msg</code> is the decoded message <code>dict</code> that was passed to shredderclient</p>

<pre><code>def command1(msg):
    print(msg['arg'])

def command2(msg):
    print(msg['arg'])

dispatch_table = {'command1':command1, 'command2':command2}

def process_message(msg):
    try:
        cmd = dispatch_table[msg['command']]
    except KeyError:
        print('invalid command')
        return None
    cmd(msg)
</code></pre>
","python"
"1551",23046140,"<p>Before posting raw code, I'd like to add an small explanation as per the conversation that took place in the comments to your <a href=""http://stackoverflow.com/q/23046140/289011"">question</a>.</p>

<p><a href=""https://docs.python.org/2/library/smtplib.html"" rel=""nofollow"">smtplib</a> connects to an existing SMTP server. You can see it more like an Outlook Express. Outlook is a client (or a <a href=""http://en.wikipedia.org/wiki/Mail_user_agent"" rel=""nofollow"">Mail User Agent</a>, if you wanna get fancy). It doesn't send emails by itself. It connects to whatever SMTP server it has configured among its accounts and tells that server <em>""Hey, I'm user xxx@hotmail.com (and here's my password to prove it). Could you send this for me?""</em></p>

<p>If you wanted to, having your own SMTP server is doable (for instance, in Linux, an easily configurable SMTP server would be Postfix, and I'm sure there are many for Windows) Once you set one up, it'll start listening for incoming connections in its port 25 (usually) and, if whatever bytes come through that port follow the <a href=""http://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol"" rel=""nofollow"">SMTP protocol</a>, it'll send it to its destination. IMHO, this isn't such a great idea (nowadays). The reason is that now, every (decent) email provider will consider emails coming from unverified SMTP servers as spam. If you want to send emails, is much better relying in a well known SMTP server (such as the one at <code>smtp.live.com</code>, the ones hotmail uses), authenticate against it with your username and password, and send your email relying (as in <a href=""http://www.xeams.com/smtprelay.htm"" rel=""nofollow"">SMTP Relay</a>) on it.</p>

<p>So this said, here's some code that sends an HTML text with an attachment <code>borrajax.jpeg</code> to an email account relying on <code>smtp.live.com</code>.</p>

<p>You'll need to edit the code below to set your hotmail's password (maybe your hotmail's username as well, if it's not <code>124@hotmail.co.uk</code> as shown in your question) and email recipients. I removed mines from the code after my tests for obvious security reasons... for me <strong>:-D</strong> and I put back the ones I saw in your question. Also, this scripts assumes it'll find a <code>.jpeg</code> picture called <code>borrajax.jpeg</code> in the same directory where the Python script is being run:</p>

<pre><code>import smtplib
from email.mime.image import MIMEImage
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

def send_mail():
    test_str=""This is a test""
    me=""124@hotmail.co.uk""
    me_password=""XXX""   # Put YOUR hotmail password here
    you=""123@live.com""
    msg = MIMEMultipart()
    msg['Subject'] = test_str
    msg['From'] = me
    msg['To'] = you
    msg.preamble = test_str
    msg_txt = (""&lt;html&gt;""
                ""&lt;head&gt;&lt;/head&gt;""
                ""&lt;body&gt;""
                    ""&lt;h1&gt;Yey!!&lt;/h1&gt;""
                    ""&lt;p&gt;%s&lt;/p&gt;""
                ""&lt;/body&gt;""
            ""&lt;/html&gt;"" % test_str)
    msg.attach(MIMEText(msg_txt, 'html'))
    with open(""borrajax.jpeg"") as f:
        msg.attach(MIMEImage(f.read()))
    smtp_conn = smtplib.SMTP(""smtp.live.com"", timeout=10)
    print ""connection stablished""
    smtp_conn.starttls()
    smtp_conn.ehlo_or_helo_if_needed()
    smtp_conn.login(me, me_password)
    smtp_conn.sendmail(me, you, msg.as_string())
    smtp_conn.quit()

if __name__ == ""__main__"":
    send_mail()
</code></pre>

<p>When I run the example (as I said, I edited the recipient and the sender) it sent an email to a Gmail account using my (old) hotmail account. This is what I received in my Gmail:</p>

<p><img src=""http://i.stack.imgur.com/i4djv.png"" alt=""Gmail screenshot""></p>

<p>There's a lot of stuff you can do with the <a href=""https://docs.python.org/2/library/email.html"" rel=""nofollow"">email</a> Python module. Have fun!!</p>

<p><strong>EDIT:</strong> </p>

<p>Gorramit!! Your comment about attaching a text file wouldn't let me relax!! <strong>:-D</strong> I had to see it myself. Following what was detailed <a href=""http://stackoverflow.com/questions/9541837/attach-a-txt-file-in-python-smtplib"">in this question</a>, I added some code to add a text file as an attachment.</p>

<pre><code>msg_txt = (""&lt;html&gt;""
            ""&lt;head&gt;&lt;/head&gt;""
            ""&lt;body&gt;""
                ""&lt;h1&gt;Yey!!&lt;/h1&gt;""
                ""&lt;p&gt;%s&lt;/p&gt;""
            ""&lt;/body&gt;""
        ""&lt;/html&gt;"" % test_str)
msg.attach(MIMEText(msg_txt, 'html'))
with open(""borrajax.jpeg"", ""r"") as f:
    msg.attach(MIMEImage(f.read()))
#
# Start new stuff
#
with open(""foo.txt"", ""r"") as f:
    txt_attachment = MIMEText(f.read())
    txt_attachment.add_header('Content-Disposition',
                              'attachment',
                               filename=f.name)
    msg.attach(txt_attachment)
#
# End new stuff
#
smtp_conn = smtplib.SMTP(""smtp.live.com"", timeout=10)
print ""connection stablished""
</code></pre>

<p>And yep, it works... I have a <code>foo.txt</code> file in the same directory where the script is run and it sends it properly as an attachment. </p>
","python"
"1552",16355895,"<p>Also you can run sql command in a migration (Django 1.8): </p>

<pre><code>class Migration(migrations.Migration):

    # ...

    operations = [
        migrations.RunSQL('create extension hstore;'),
        # ...
</code></pre>
","python"
"1553",30923835,"<p>You could try setting the timeout for the socket should fit your requirement if I understand correctly that you just need to wait one time for 20 seconds.</p>

<pre><code>s.settimeout(20)
reply = s.recv(4096)
</code></pre>

<p><a href=""https://docs.python.org/3.4/library/socket.html#socket.socket.settimeout"" rel=""nofollow"">Python Socket settimeout()</a></p>

<p>However you are not guaranteed to get all the data packets delivered at once. So as was mentioned in a comment, you should be looping. The way to do this would be to place the socket in nonblocking mode. </p>

<p>Outside of your loop, you need a <code>buffer_variable</code> that would hold the total results from the recv().</p>

<p>Prior to entering your loop, you would start a timer. Upon entering you loop you would begin calling <code>recv()</code> on the socket while saving the result in a <code>local_variable</code>. Each time you get something new in <code>local_variable</code> you append it to <code>buffer_variable</code>. </p>

<p>When the timer expires, you would then <code>break</code> the loop, and process your data from <code>buffer_variable</code> accordingly.</p>
","python"
"1554",37192942,"<p>With minor tweaks in the aforementioned post, you can get it to work.</p>

<pre><code>&gt;&gt;&gt;import re
&gt;&gt;&gt;from datetime import datetime

&gt;&gt;&gt;text = ""Campaign on 01.11.2015""

&gt;&gt;&gt;match = re.search(r'\d{2}.\d{2}.\d{4}', text)
&gt;&gt;&gt;date = datetime.strptime(match.group(), '%d.%m.%Y').date()
&gt;&gt;&gt;print str(date).replace(""-"", """")
20151101
</code></pre>
","python"
"1555",4432491,"<p>It can't be done portably in Python before version 2.6; it needs the information in sys.float_info, which is new in Python 2.6.</p>

<p>If you want to do it non-portably, i.e. for your particular platform, you would need to look at the <code>float.h</code> file for the C compiler that was used to produce your 2.4/5 Python, or at the sys.float_info returned by a 2.6 or 2.7 implementation on your platform (and trust that it applies to your 2.4/5 Python). Then you would need to look at the <code>float_hex</code> function in the Python source (Objects/floatobject.c) and translate that to Python and test it (against a 2.6/7 Python, perhaps).</p>

<p>This seems like a lot of work, for what? What is your goal? What do you want to do that can't be achieved with <code>repr(your_float)</code>?</p>

<p><strong>Edit</strong>: need for a unique identifier</p>

<p>Note that time.time() is not very precise:</p>

<p>""""""
time.time() 
Return the time as a floating point number expressed in seconds since the epoch, in UTC. Note that even though the time is always returned as a floating point number, not all systems provide time with a better precision than 1 second. While this function normally returns non-decreasing values, it can return a lower value than a previous call if the system clock has been set back between the two calls.
""""""</p>

<p>Allowing for up to a billionth of a second resolution:</p>

<pre><code>&gt;&gt;&gt; hex(int(time.time() * 1000000000))
'0x11ef11c41cf98b00L'
&gt;&gt;&gt;
</code></pre>

<p>Is that good enough?</p>
","python"
"1556",36333737,"<p>I would suggest colorama library:</p>

<p><a href=""https://pypi.python.org/pypi/colorama"" rel=""nofollow"">https://pypi.python.org/pypi/colorama</a></p>

<p>Example:</p>

<pre><code>from colorama import Fore, Back, Style

print(Fore.RED + 'some red text')
print(Back.GREEN + 'and with a green background')
print(Style.DIM + 'and in dim text')
print(Style.RESET_ALL)
print('back to normal now')
</code></pre>
","python"
"1557",8151424,"<p>You could create a decorator that calls the <code>checkConnectivity</code> function. Example:</p>

<pre><code>def checkConnectivity():
    print 'Checking connection'

def CheckConnectionDecorator(fn):
    def new(*args, **kwargs):
        checkConnectivity()
        return fn(*args, **kwargs)
    return new

@CheckConnectionDecorator
def insertToTable():
    print 'Insertion'

@CheckConnectionDecorator
def anotherQueryFunction():
    print 'Another query'
</code></pre>
","python"
"1558",25554873,"<p>There is some iffiness to this based on the version of python you are using.  </p>

<p>If python2, which I assume you are using because of the print statement, the main problem you have is that you are getting a string from the read, so if the value is say 50 you would get an ascii value of 2 if you print it.  You need to tell python that those bits should be in an int type not a str type and a simple cast does not do that.</p>

<p>I personally would use the struct package and do the following:</p>

<pre><code>with open(test_filename, ""rb"") as f:
    bytes = f.read(1)
num = struct.unpack(""B"", bytes)[0]
print num
</code></pre>

<p>Another option would be to encode the string to hex and read it in as a hex string (which looks like is what you are trying):</p>

<pre><code>num = int(bytes.encode(""hex_codec""), 16))
print num
</code></pre>

<p>One final option would be to put the string in a bytearray and pull the first byte:</p>

<pre><code>num = bytearray(bytes)[0]
print num
</code></pre>

<p>If you are actually using python 3 this is simpler because you will get back a bytes object (if so dont name a variable bytes, very confusing).  With a bytes object you can just pull the first element out which will be pulled out as an int:</p>

<pre><code>num = bytes[0]
print num
</code></pre>
","python"
"1559",27660270,"<p>thank you all for your responses. The code was fine. I just put it into another script and it just worked fine. I'm not sure if there was some caching issue or not. </p>

<p>Closing topic. </p>
","python"
"1560",6130902,"<p>As you can see from traceback attribute <code>metadata</code> of mapped class is used internally by declarative extension for SQLAlchemy's <code>MetaData</code> instance, while you replaced it with your own relation (<code>backref=""metadata""</code>) with different meaning. Renaming it to something else should solve the problem.</p>
","python"
"1561",31247820,"<p>Pass the <code>Event</code> object to the thread target function so that they are shared between main thread and the <code>pool</code> thread:</p>

<pre><code>def poll_files(....., trigger):
    ....
    trigger.set()

# main thread
trigger = threading.Event()
poll = threading.Thread(target=poll_files, args=myargs + (trigger,))
...
trigger.wait()
</code></pre>
","python"
"1562",36573627,"<p>When functions are called they always <strong>return</strong> something they processes.</p>

<pre><code>def myfunction():
    print('asd')
</code></pre>

<p>This will <strong>print</strong> the output. Since there is nothing explicitly returned, the function by default return <code>None</code></p>

<p>Now lets add a bit of complexity to your function:</p>

<pre><code>def myfunction(text):
    print(text * 2)
</code></pre>

<p>This will print the text it gets twice. And it works just fine. But lets say you need to store the ""printed twice"" text to a variable.</p>

<hr>

<p>Try this:</p>

<pre><code>def myfunction(text):
    print(text * 2)

twoText = myFunction(""some text foo"")
print(twoText)
</code></pre>

<p>Output should look like this:</p>

<pre><code>some text foosome text foo
None
</code></pre>

<p>This is happening because you are in your function first <strong>printing</strong> twice <code>some text foo</code> and then <strong>printing</strong> what your function <strong>returned</strong>. In this case it <strong>returned</strong> <code>None</code> since nothing was explicitly <strong>returned</strong>.</p>

<hr>

<p>To fix this you just replace <code>print</code> with <code>return</code>.</p>

<pre><code>def myfunction(text):
    return text * 2

twoText = myFunction(""some text foo"")
print(twoText)
</code></pre>

<p>The output is correct because you print only the return of the function.</p>

<pre><code>some text foosome text foo
</code></pre>

<hr>

<p>The math function returnes data like this:</p>

<pre><code>def cos(number):
    # Insert super complex math calculation here
    return result
</code></pre>

<p>If it didn't do this you would not be able to store the result in a variable, instead it would just be printed.</p>
","python"
"1563",471660,"<p>I think that B is problematic. The thread would only run on one CPU, and even if it runs a process, the thread is still running. A may be better.</p>

<p>It is best to try and measure both in terms of time and see which one is faster and which one scales well. However, I'll reiterate that I highly doubt that B will scale well.</p>
","python"
"1564",25612670,"<p>You are joining your string incorrectly:</p>

<pre><code>serialized = ''
for k, v in sorted(result.items()):
    if v is not None:
        serialized = serialized.join(v)
</code></pre>

<p>This uses <code>selialized</code> as built so far as the joining string, with the new string treated as individual characters:</p>

<pre><code>&gt;&gt;&gt; serialized = ''
&gt;&gt;&gt; for v in ('foo', 'bar', 'baz'):
...     serialized = serialized.join(v)
... 
&gt;&gt;&gt; serialized
'bbfooafoorabfooafoorz'
</code></pre>

<p>where <code>'foo'.join('bar')</code> produced <code>'bfooafoor'</code>, which then was used to join the characters of <code>baz</code>.</p>

<p>Build a <em>list</em>, then return that:</p>

<pre><code>if None in result.viewvalues():
    # one or more keys came back empty, abort
    return
serialized = ''.join([v for k, v in sorted(result.items())])
</code></pre>
","python"
"1565",2132718,"<p>The <a href=""http://docs.python.org/library/stdtypes.html#dict"" rel=""nofollow""><CODE>dict</CODE> type</a> has a <a href=""http://docs.python.org/library/stdtypes.html#dict.get"" rel=""nofollow""><CODE>get</CODE> function</a>, where if the key doesn't exist in the dictionary, the 2nd argument to <code>get</code> is the value that it should return.  Similarly there is <a href=""http://docs.python.org/library/stdtypes.html#dict.setdefault"" rel=""nofollow""><CODE>setdefault</CODE></a>, which returns the value in the <code>dict</code> if the key exists, otherwise it sets the value according to your default parameter and then returns your default parameter.</p>

<p>You could extend the <code>list</code> type to have a <code>getindexdefault</code> method.</p>

<pre><code>class SuperDuperList(list):
    def getindexdefault(self, elem, default):
        try:
            thing_index = self.index(elem)
            return thing_index
        except ValueError:
            return default
</code></pre>

<p>Which could then be used like:</p>

<pre><code>mylist = SuperDuperList([0,1,2])
index = mylist.getindexdefault( 'asdf', -1 )
</code></pre>
","python"
"1566",25537399,"<p>I set up a direct comparison to test them, found that their assumptions can <a href=""http://stackoverflow.com/questions/28755617/why-do-r-and-statsmodels-give-slightly-different-anova-results"" title=""differ slightly"">differ slightly</a> , got a hint from a statistician, and here is an example of ANOVA on a pandas dataframe matching R's results:</p>

<pre><code>import pandas as pd
import statsmodels.api as sm
from statsmodels.formula.api import ols


# R code on R sample dataset

#&gt; anova(with(ChickWeight, lm(weight ~ Time + Diet)))
#Analysis of Variance Table
#
#Response: weight
#           Df  Sum Sq Mean Sq  F value    Pr(&gt;F)
#Time        1 2042344 2042344 1576.460 &lt; 2.2e-16 ***
#Diet        3  129876   43292   33.417 &lt; 2.2e-16 ***
#Residuals 573  742336    1296
#write.csv(file='ChickWeight.csv', x=ChickWeight, row.names=F)

cw = pd.read_csv('ChickWeight.csv')

cw_lm=ols('weight ~ Time + C(Diet)', data=cw).fit() #Specify C for Categorical
print(sm.stats.anova_lm(cw_lm, typ=2))
#                  sum_sq   df            F         PR(&gt;F)
#C(Diet)    129876.056995    3    33.416570   6.473189e-20
#Time      2016357.148493    1  1556.400956  1.803038e-165
#Residual   742336.119560  573          NaN            NaN
</code></pre>
","python"
"1567",3330637,"<p>For the second query, you need to use MapReduce, which can get a big hairy. This will work:</p>

<pre><code>map = function() {
    for (var i = 0, j = this.actions.length; i &lt; j; i++) {
        emit(this.actions[i].time, this.actions[i].action);
    }
}
reduce = function(key, value_array) {
    var array = [];
    for (var i = 0, j = value_array.length; i &lt; j; i++) {
        if (value_array[i]['actions']) {
            array = array.concat(value_array[i]['actions']);
        } else {
            array.push(value_array[i]);
        }
    }
    return ({ actions: array });
}

res = db.test.mapReduce(map, reduce)
db[res.result].find()
</code></pre>

<p>This would return something like this, where the <code>_id</code> keys are your timestamps:</p>

<pre><code>{ ""_id"" : 123, ""value"" : { ""actions"" : [ ""jump"" ] } }
{ ""_id"" : 125, ""value"" : { ""actions"" : [ ""neigh"", ""canter"" ] } }
{ ""_id"" : 127, ""value"" : { ""actions"" : [ ""whinny"" ] } }
</code></pre>

<p>Unfortunately, mongo doesn't currently support returning an array from a reduce function, thus necessitating the silly <code>{actions: [...]}</code> syntax.</p>
","python"
"1568",3788439,"<p>Writing and reading from a socket are separate.  You can try to close a socket for writing and leave it open for reading.</p>

<p>See <a href=""http://docs.python.org/library/socket.html#socket.socket.shutdown"" rel=""nofollow"">http://docs.python.org/library/socket.html#socket.socket.shutdown</a></p>

<p>Also, what FTP does is use two sockets: one for data, and one for this ""confirmation"".</p>

<p>You'd be happier using a second socket for this additional metadata.</p>
","python"
"1569",27802755,"<p>Interesting question. 
It appears that your decay factor, if call it so, is 0.25, the following two steps do what is intended (first 10 observations printed, the resultant is called <code>z</code>):</p>

<pre><code>In [67]:

z = df.groupby('x').y.apply(lambda x: np.convolve(x, np.power(0.25, range(len(x)))[:len(x)], mode='full')[:len(x)])
print z
x
1     [1.0, 2.25, 3.5625, 4.890625, 6.22265625]
2     [1.0, 2.25, 3.5625, 4.890625, 6.22265625]
3     [1.0, 2.25, 3.5625, 4.890625, 6.22265625]
4     [1.0, 2.25, 3.5625, 4.890625, 6.22265625]
5     [1.0, 2.25, 3.5625, 4.890625, 6.22265625]
6     [1.0, 2.25, 3.5625, 4.890625, 6.22265625]
7     [1.0, 2.25, 3.5625, 4.890625, 6.22265625]
8     [1.0, 2.25, 3.5625, 4.890625, 6.22265625]
9     [1.0, 2.25, 3.5625, 4.890625, 6.22265625]
10    [1.0, 2.25, 3.5625, 4.890625, 6.22265625]
Name: y, dtype: object
In [68]:

print pd.concat([pd.DataFrame({'x': i, 'z': v}) for i, v in zip(z.index.values, z.values)]).head(10)
   x         z
0  1  1.000000
1  1  2.250000
2  1  3.562500
3  1  4.890625
4  1  6.222656
0  2  1.000000
1  2  2.250000
2  2  3.562500
3  2  4.890625
4  2  6.222656
</code></pre>

<p>Basically, the cumulative sum operation (with a factor) is done using <code>numpy.convolve</code>. The rest is straight forward: just <code>groupby</code> the data into groups, apply the <code>convolve</code> and then <code>concat</code> the resultants together.</p>
","python"
"1570",13017599,"<p>First, I would <code>shuffle</code> the <code>Characters</code>:</p>

<pre><code>Characters = [Percy,Annabeth,Leo,Chuck,Sarah]
random.shuffle(Characters)
</code></pre>

<p>Now when you run your callback, you <code>pop</code> one character out:</p>

<pre><code>def callback():
    try:
       C = Characters.pop()  #popping the last one is more efficient than the first.
    except IndexError:
       return None

    return C()
</code></pre>

<p>Since this destroys <code>Characters</code>, you may want to keep a copy of it around to reset if you need to:</p>

<pre><code> random.shuffle(Characters)
 Characters_save = Characters[:]

 def reset_characters():
     Characters[:] = Characters_save[:]
</code></pre>
","python"
"1571",15238276,"<pre><code>from collections import Counter
import re

reg = re.compile('\S{4,}')

s = ""hello this is hello this is baby baby baby baby hello""
c = Counter(ma.group() for ma in reg.finditer(s))
print c
</code></pre>

<p>result</p>

<pre><code>Counter({'baby': 4, 'hello': 3, 'this': 2})
</code></pre>

<p>Also:</p>

<pre><code>from collections import defaultdict
d = defaultdict(int)

s = ""hello this is hello this is baby baby baby baby hello""

for w in s.split():
    if len(w)&gt;=4:
        d[w] += 1

print d
</code></pre>
","python"
"1572",24940788,"<p>You could use:</p>

<pre><code>wordlist = ['hi there', 'help please', 'with my problem']
hyphenated_wordlist = map(lambda s: s.replace(' ', '-'), wordlist)
</code></pre>
","python"
"1573",22299232,"<p>You can set up ""Shared Folders"" for the the Virtualbox image.</p>

<p>But a more convenient way might be to do it the opposite way around, i.e. having the folder locally on your host OS and sharing it to your guest. 
Have a look at this link, specifially for Django as you pointed out to be interested in: <a href=""http://gettingstartedwithdjango.com/en/lessons/introduction-and-launch/"" rel=""nofollow"">http://gettingstartedwithdjango.com/en/lessons/introduction-and-launch/</a></p>
","python"
"1574",18591778,"<p>You could use eval() function wich allows to execute python code contained in a string:</p>

<pre><code>def get_truth(inp,relate,cut):
    return eval(""{} {} {}"".format(inp, relate, cut))

print get_truth(1.0,'&lt;',0.0)  # False
print get_truth(1.0,'&gt;',0.0)  # True
</code></pre>
","python"
"1575",3510846,"<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; noise_words_list = ['of', 'the', 'in', 'for', 'at']
&gt;&gt;&gt; phrases = ['of New York', 'of the New York']
&gt;&gt;&gt; noise_re = re.compile('\\b(%s)\\W'%('|'.join(map(re.escape,noise_words_list))),re.I)
&gt;&gt;&gt; [noise_re.sub('',p) for p in phrases]
['New York', 'New York']
</code></pre>
","python"
"1576",17927887,"<p>Bind the entry to a <a href=""http://effbot.org/tkinterbook/variable.htm"" rel=""nofollow"">variable</a>. Trace the variable change.</p>

<pre><code>try:
    from Tkinter import *
except ImportError:
    from tkinter import *

def print_entry_value(*args):
    print(v.get())

root = Tk()
v = StringVar()
v.trace('w', print_entry_value)
e = Entry(root, textvariable=v)
e.pack()
root.mainloop()
</code></pre>
","python"
"1577",6181763,"<pre><code>list=mystr.split("" "",mystr.count("" ""))
</code></pre>
","python"
"1578",13786635,"<p>This sounds a lot like AI programming just because of the way that they 'tag' questions and responses. Maybe take a look at <a href=""http://pyaiml.sourceforge.net/"" rel=""nofollow"">http://pyaiml.sourceforge.net/</a> and the artificial intelligence markup language. I don't have much experience with it, but you might be able to tweak it to your needs instead of doing it from scratch. </p>
","python"
"1579",11814657,"<p>why not make them dicts of dicts like so</p>

<pre><code>def mydicts(arg1=None):
    dicter = {'a': {'a1':1, 'a2':2},
              'b': {'b1':1, 'b2':2},
              'c': {'c1':1, 'c2':2},
              'd': {'d1':1, 'd2':2},
              }

    #if arg1 is None return all the dictionaries.
    if arg1 is None:
        arg1 = ['a', 'b', 'c', 'd']

    # Check if arg1 is a list and if not make it one 
    # Example you pass it a str or int

    if not isinstance(arg1, list):
        arg1 = [arg1]

    return [dicter.get(x, {}) for x in arg1]
</code></pre>

<p>Note, this will also return a list of items back to you.</p>
","python"
"1580",39723135,"<h1>A good first approach to scraping: Pattern Matching Heuristic</h1>

<p>What you want to do, at a high level, is this:</p>

<ol>
<li>Identify a pattern in the source.</li>
<li>Represent the nature of the pattern in the code.</li>
<li>Scrape according to that code.</li>
</ol>

<h3>I won't code the entire thing here, but outline the general approach I would take.</h3>

<p>A. Notice that there's a pattern to the way the reports are named. If there is a pattern, then we can assume it is possible to represent it in code.</p>

<p>B. Of primary interest is the last part of the url, <code>'/ar/dfiw00216tsar.txt'.</code></p>

<ol>
<li>/ar/ references the state</li>
<li>dfiw appears constant, at first glance</li>
<li>00216 references the date</li>
<li>tsar references the type of report</li>
<li>.txt appears constant, at first glance</li>
</ol>

<p>From here, we can know to build a dictionary of all the possible states, and a dictionary of all the possible report types, and iterate through all of those combinations, including date, in each iteration of the for loop, getting the url, then saving it or otherwise processing it as needed.</p>
","python"
"1581",11802036,"<p>The vast majority of the processing time in your code comes from this line:</p>

<pre><code>idx = np.all([times&gt;=start,times&lt;=end],0)
</code></pre>

<p>This is because for each spike, you are comparing <em>every value</em> in times against start and end. Since you have uniform time steps in this example (and I presume this is true in your data as well), it is much faster to simply compute the start and end indexes:</p>

<pre><code># This replaces the last loop in your example:
for i in range(N):        
    spike_times = spiketimes[i]
    datarow = data[i]
    if len(spike_times) &gt; 0:
        for spike_time in spike_times:
            start=max(spike_time-dtbin,0)
            end=min(spike_time+dtbin,t)
            #idx = np.all([times&gt;=start,times&lt;=end],0)
            #datarow[idx] = np.NaN
            datarow[int(start/dt):int(end/dt)] = np.NaN
    ## replaced this with equivalent for testing
    means[i] = datarow[~np.isnan(datarow)].mean()  
</code></pre>

<p>This reduces the run time for me from ~100s to ~1.5s.
You can also shave off a bit more time by vectorizing the loop over spike_times. The effect of this will depend on the characteristics of your data (should be most effective for high spike rates):</p>

<pre><code>kernel = np.ones(20, dtype=bool)
for i in range(N):        
    spike_times = spiketimes[i]
    datarow = data[i]
    mask = np.zeros(len(datarow), dtype=bool)
    indexes = (spike_times / dt).astype(int)
    mask[indexes] = True  
    mask = np.convolve(mask, kernel)[10:-9]

    means[i] = datarow[~mask].mean()
</code></pre>
","python"
"1582",34527388,"<p>Keep it simple.If there is a single button then try:</p>

<p><strong>Example 1 -</strong></p>

<pre><code>browser.find_element_by_class_name(""section-select-all"").click()
</code></pre>

<p>If multiple buttons with same class name then you can use this:</p>

<p><strong>Example 2 -</strong></p>

<pre><code>buttons = browser.find_elements_by_class_name(""section-select-all"")
for button in buttons:
    button.click()
</code></pre>

<p>If the buttons are in a frame, then make sure you switch to the frame before clicking on it.</p>
","python"
"1583",29277493,"<pre><code>Attempting creation of direct-tcpip channel on client Transport
*** Caught exception: &lt;class '[...]'&gt;: (1, 'Administratively prohibited')
</code></pre>

<p>The container ssh server is rejecting your direct-tcpip channel request because it has been configured to refuse these requests. I gather the intent here is to proxy SFTP sessions to the correct container? And I imagine the container SSH server has been configured in <a href=""https://wiki.archlinux.org/index.php/SFTP_chroot"" rel=""nofollow"">the usual fashion</a> to only permit these people to do SFTP? SFTP sessions go through a session channel, not a direct-tcpip channel.</p>

<p>I'm not a python coder and can't give you the specific paramiko code, but your relay agent should open a session channel to the container server and invoke the ""sftp"" subsystem. And if possible, your relay agent should only do this when the remote client requested an SFTP session, not for other types of channel requests.</p>
","python"
"1584",10935113,"<p>I haven't tried it myself, but you might try setting DEBUG_PROPAGATE_EXCEPTIONS = True</p>

<p><a href=""https://docs.djangoproject.com/en/dev/ref/settings/"" rel=""nofollow"">https://docs.djangoproject.com/en/dev/ref/settings/</a></p>
","python"
"1585",7870041,"<p>Good point on the different file systems, etc., Eric Smith.  But why not use tempfile.NamedTemporaryFile with the dir parameter and avoid doing all that context manager lifting yourself?</p>

<pre><code>def is_fs_case_sensitive(path):
    #
    # Force case with the prefix
    #
    with tempfile.NamedTemporaryFile(prefix='TmP',dir=path) as tmp_file:
        return(not os.path.exists(tmp_file.name.lower()))
</code></pre>

<p>I should also mention that your solution does not guarantee that you are actually testing for case sensitivity.  Unless you check the default prefix (using tempfile.gettempprefix()) to make sure it contains a lower-case character.  So including the prefix here is not really optional.</p>

<p>Your solution cleans up the temp file.  I agree that it seemed obvious, but one never knows, do one?</p>
","python"
"1586",22734578,"<p>If you aren't worried about the consistency of the file, then it's pretty easy.</p>

<pre><code>def readFile(path):
    f = open(path, 'r')
    return f.readlines()

def parseVertexes(lines):
    coordinates = []

    for index, line in enumerate(lines):
        if index % 5 == 1: #second line in vertex
            coordinates.append(line.split("" ""))
</code></pre>

<p>I haven't fully tested, but that should work. You'll have to build up more infrastructure to handle cases if the file isn't consistent.</p>
","python"
"1587",18218276,"<pre><code>from random import randint
print(randint(0, 100))
</code></pre>

<p>Is this what you're looking for?<br>
Try Googling along the lines of (first hit): <a href=""http://docs.python.org/2/library/random.html#random.randint"" rel=""nofollow"">python random integer</a></p>
","python"
"1588",38205364,"<p>The answer depends on what your trying to achieve:</p>

<p><strong>time.sleep(delayTime)</strong>:<br></p>

<ul>
<li>Action: Suspend execution of the current thread for the given number of seconds.</li>
<li>Any caught signal will terminate the sleep() following execution of that signal’s catching routine</li>
</ul>

<p><strong>select.select([],[],[],delayTime)</strong>:<br>
This is a straightforward interface to the Unix <code>select()</code> system call. The first three arguments are sequences of ‘waitable objects’:<br></p>

<ul>
<li><strong>rlist</strong>: wait until ready for reading</li>
<li><strong>wlist</strong>: wait until ready for writing</li>
<li><strong>xlist</strong>: wait for an “exceptional condition”</li>
</ul>

<p>So now, after we understand the two interfaces we can understand that the answer is depends on the purpose: <br>
If all you want to do is to suspend the current thread - the first option is simpler. But if there are object to wait on - use the second method.
In temp of efficiency - I don't think there are differences if all you are looking for is the simplest use-case (just suspend the main thread).</p>
","python"
"1589",32395635,"<p>I think you might have missed to include the addon directory which includes the custom module.</p>

<p>It can be accomplished via two methods.</p>

<ol>
<li><p>You can add to, the addons_path directive in openerp-server.conf, (separate paths with a comma) </p>

<pre><code>eg: addons_path = /opt/openerp/server/openerp/addons,custom_path_here
</code></pre></li>
<li><p>You can use </p>

<pre><code>--addons='addon_path', 
</code></pre>

<p>if starting your server from the command line.</p></li>
</ol>
","python"
"1590",197009,"<p>Within the directory, there should be a directory called '.svn'. Within this, a file named 'locked' indicates that the directory is locked.</p>
","python"
"1591",37990019,"<p>try this:</p>

<pre><code>df['date'] += pd.Timedelta(df['UTC shift'], unit='H')
</code></pre>
","python"
"1592",16886322,"<p>Hmm, your program is rather verbose and hence hard to read.  For example, you don't need to initialise lots of those variables in the first few lines.  And there is no need to assign to the <code>inp</code> variable and then copy that into <code>a</code> and then <code>b</code>.  And you don't use the <code>seq</code> list or the <code>s</code> variable at all.</p>

<p>Anyway that's not the problem.  There are two bugs.  I think that if you had compared the printed intermediate answers to a hand-worked example you should have found the problems.</p>

<p>The first problem is that you have a typo in the second line here: </p>

<pre><code>aqr = aqc - (q * aqd)#These two lines are the main part of the justification
bqr = bqc - (q * aqd)#-/
</code></pre>

<p>in the second line, <code>aqd</code> should be <code>bqd</code></p>

<p>The second problem is that in this bit of code </p>

<pre><code>aqd = aqr
bqd = bqr
aqc = aqd
bqc = bqd
</code></pre>

<p>you make <code>aqd</code> be <code>aqr</code> and then <code>aqc</code> be <code>aqd</code>.  So <code>aqc</code> and <code>aqd</code> end up the same.  Whereas you actually want the assignments in the other order:</p>

<pre><code>aqc = aqd
bqc = bqd
aqd = aqr
bqd = bqr
</code></pre>

<p>Then the code works.  But I would prefer to see it written more like this which is I think a lot clearer.  I have left out the prints but I'm sure you can add them back:</p>

<pre><code>a = input('Please enter the first number, ""a"":\n')
b = input('Please enter the second number, ""b"":\n')
if a &lt; b:
    a,b = b,a

r1,r2 = a,b
s1,s2 = 1,0
t1,t2 = 0,1
while r2 &gt; 0:
    q,r = divmod(r1,r2)
    r1,r2 = r2,r
    s1,s2 = s2,s1 - q * s2
    t1,t2 = t2,t1 - q * t2

print r1,s1,t1
</code></pre>

<p>Finally, it might be worth looking at a recursive version which expresses the structure of the solution even more clearly, I think.</p>

<p>Hope this helps.</p>
","python"
"1593",998514,"<p>Unfortunately, it's impossible in the Python implementation of Sax.</p>

<p>This code from the Python library (v2.5) tells you all you need to know:</p>

<pre><code>class AttributesImpl:

    def __init__(self, attrs):
        """"""Non-NS-aware implementation.
        attrs should be of the form {name : value}.""""""

        self._attrs = attrs
</code></pre>

<p>The <code>StartElement</code> handler is passed an object implementing the <code>AttributeImpl</code> specification, which uses a plain ol' Python <code>dict</code> type to store key/value pairs. Python <code>dict</code> types do not guarantee order of keys.</p>
","python"
"1594",2036236,"<p>The language you've shown an example for is probably too complex to write a simple (and bug-free) parsing function for. I'd suggest reading up on parsing techniques such as recursive-descent or table-driven parsing such as LL(1), LL(k), etc.</p>

<p>But that may be too general and/or complicated. It might be easier to simplify your rules language to something simple like delimited text.</p>

<p>For example, something like</p>

<p>chocolate:sweet<br>
chocolate.lindt:tasty<br>
chocolate.lindt.*:smooth,creamy(1)</p>

<p>This would be easier to parse and could be done without formal parsers.</p>
","python"
"1595",31265631,"<p>For this you can try contains operator instead.</p>

<p>It is not case sensitive. However the contains operator only performs prefix matching for a title. For example, the title ""HelloWorld"" would match for title contains 'Hello' but not title contains 'World'. Tried to make the search with contains operator and it did list the file.</p>
","python"
"1596",1709283,"<p>solution seems pretty straightforward:</p>

<pre><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; mlat = sum(x['lat'] for x in l) / len(l)
&gt;&gt;&gt; mlng = sum(x['lng'] for x in l) / len(l)
&gt;&gt;&gt; def algo(x):
    return (math.atan2(x['lat'] - mlat, x['lng'] - mlng) + 2 * math.pi) % (2*math.pi)

&gt;&gt;&gt; l.sort(key=algo)
</code></pre>

<p>basically, <code>algo</code> normalises the input into the <code>[0, 2pi]</code> space and it would be naturally sorted ""counter-clockwise"". Note that the % operator and the * operator have the same precedence so the parenthesis around (2*math.pi) are important to get a valid result.</p>
","python"
"1597",39045980,"<p>Your problem is most likely on this line (line 5):</p>

<pre><code>computer_choice_total =+computer_choice
</code></pre>

<p><code>=+</code> isn't a valid Python operator. Instead, use <code>+=</code>, like this:</p>

<pre><code>computer_choice_total += computer_choice
</code></pre>

<p>Also, you'll want to make sure your Python code is indented properly, or else it won't run as you intend it to.</p>
","python"
"1598",39069001,"<p>Before:</p>

<pre><code>print(""[ NOW PLAYING ] ... %s"" % name)
</code></pre>

<p>input:</p>

<pre><code>self.usertext.SetValue(""[ NOW PLAYING ] ... %s"" % name)
</code></pre>

<p>P.S. Your indentation is a mess</p>
","python"
"1599",15415858,"<p>Similar to @Denis:</p>

<pre><code>if x.ndim == 2:
    x.shape += (1,)
</code></pre>
","python"
"1600",5998380,"<p>Would standard tar/zip files work for you?</p>

<p><a href=""http://docs.python.org/library/zipfile.html"" rel=""nofollow"">http://docs.python.org/library/zipfile.html</a></p>

<p><a href=""http://docs.python.org/library/tarfile.html"" rel=""nofollow"">http://docs.python.org/library/tarfile.html</a></p>
","python"
"1601",23638949,"<p><code>return</code> is the end of a function.  Full stop.  You can only return one thing.  So you need to <em>accumulate</em> some values within your loop, then <code>return</code> it at the end.  I'll leave that to you if you want to tweak your existing code.</p>

<p>Your way of thinking - initially return a thing, maintain state, and continue on from there next go-around, is actually how a <strong>generator</strong> works:</p>

<pre><code>def translate(n):
    consonants = set(""bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ"")
    for letter in n:
        if letter in consonants:
            yield '{}o{}'.format(letter,letter)
        else:
            yield letter

''.join(translate('this is fun'))
Out[44]: 'tothohisos isos fofunon'
</code></pre>

<p>Brushed up a few things, but the heart of your code is there.</p>

<p>So... yeah.  Having written this, I'm not sure what you're looking for in an answer.  If you're looking for alternate ways to write it, here is what I'd probably do:</p>

<pre><code>from string import ascii_letters
def translate(s):
    consonants = set(ascii_letters) - set('aeiouAEIOU')
    def _mapper(c):
        return '{}o{}'.format(c,c) if c in consonants else c
    return ''.join(map(_mapper, s))
</code></pre>
","python"
"1602",17892474,"<p>No. The results you got were due to arbitrary choices internal to the <code>dict</code> implementation that you cannot depend on always happening. (There is a subclass of <code>dict</code> that does keep track of insertion order, though: <code>collections.OrderedDict</code>.) I believe that with the current implementation, if you switch the order of the PL1 and PL2 lines, PL1 will probably still be deleted.</p>
","python"
"1603",30911268,"<p>You can set <code>clip_on=False</code> in a <code>Rectangle patch</code> so that it can extend beyond the axis boundaries.</p>

<pre><code>import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import numpy as np

fig,ax=plt.subplots(2,1)

x=np.linspace(0,np.pi*2,50)

ax[0].plot(x,np.sin(x),'b-')
ax[1].plot(x,np.sin(x),'b-')

rect=mpatches.Rectangle([0.35,0.1], 0.1, 0.8, 
         ec='k', fc='g', alpha=0.5, clip_on=False, transform=fig.transFigure)
ax[1].add_patch(rect)

fig.savefig('figure.png')
</code></pre>

<p><img src=""http://i.stack.imgur.com/3OfW7.png"" alt=""enter image description here""></p>

<p>Note: setting the rectangle on the first axis would have made it go behind the second axis, unless you want to manually change the zorder of the two axes.</p>
","python"
"1604",6019736,"<p>To source the recipients you can try this : </p>

<pre><code># add a new parameter 'recipientfile'
parser.add_option('-f', '--recipientfile',
              type='string', action='store', metavar='RECIPIENT_FILE',
              default=None, dest='recipient_file',
              help='A To: header value (a file containing this)')

opts, args = parser.parse_args()
if not opts.sender or (not opts.recipients or not opts.recipient_file):
    parser.print_help()
    sys.exit(1)
directory = opts.directory
if not directory:
    directory = '.'
try:                      # load the text file containing recipient1, recipient2, ....
    rec_file = open(opts.recipient_file)
    recipients = rec_file.read()
    rec_file.close()
except OSError:
    print ""/!\ Bad file %s""%opts.recipient_file
    recipients = COMMASPACE.join(opts.recipients)
# Create the enclosing (outer) message
outer = MIMEMultipart()
outer['Subject'] = 'Malware submission'
outer['To'] = recipients
outer['From'] = opts.sender
outer.preamble = 'You will not see this in a MIME-aware mail reader.\n'
</code></pre>
","python"
"1605",11318592,"<p>works only in <strong>python 2.x</strong>:</p>

<pre><code>&gt;&gt;&gt; def list_cons(*args):
       return map(None,args)

&gt;&gt;&gt; list_cons(1,2,3,4)
[1, 2, 3, 4]
</code></pre>
","python"
"1606",4030153,"<p><code>is</code>, <code>and</code>, and <code>or</code> cannot be overloaded. Use the <a href=""http://docs.python.org/library/language.html"" rel=""nofollow"">Python language services</a> if you want to write a Pythonesque DSL.</p>
","python"
"1607",38463622,"<p>It looks like you've mistakenly indented the code in <code>hello.py</code>. This line should not be indented at all:</p>

<pre><code>def make_app():
</code></pre>

<p>That is to say, in the Tornado docs <code>make_app</code> is a module-level function, but in your code you've made it a member of MainHandler.</p>
","python"
"1608",4664306,"<p>In this hot controversy, I dare to propose:</p>

<p>(I know, I know , there is timeit, but I'm not so trained with timeit, and clock() seems to me to be sufficient for the case)</p>

<pre><code>import os
from time import clock

separ = os.sep
ospath = os.path
ospathjoin = os.path.join

A,B,C,D,E,F,G,H = [],[],[],[],[],[],[],[]
n = 1000

for essays in xrange(100):

    te = clock()
    for i in xrange(n):
        xa = os.path.join('C:\WINNT\system32','Microsoft\Crypto','RSA\MachineKeys')
    A.append(clock()-te)


    te = clock()
    for i in xrange(n):
        xb = ospath.join('C:\WINNT\system32','Microsoft\Crypto','RSA\MachineKeys')
    B.append(clock()-te)


    te = clock()
    for i in xrange(n):
        xc = ospathjoin('C:\WINNT\system32','Microsoft\Crypto','RSA\MachineKeys')
    C.append(clock()-te)


    te = clock()
    for i in xrange(n):
        xd = 'C:\WINNT\system32'+os.sep+'Microsoft\Crypto'+os.sep+'RSA\MachineKeys'
    D.append(clock()-te)


    te = clock()
    for i in xrange(n):
        xe = '%s\\%s\\%s' % ('C:\WINNT\system32','Microsoft\Crypto','RSA\MachineKeys')
    E.append(clock()-te)


    te = clock()
    for i in xrange(n):
        xf = 'C:\WINNT\system32'+separ+'Microsoft\Crypto'+separ+'RSA\MachineKeys'
    F.append(clock()-te)


    te = clock()
    for i in xrange(n):
        xg = os.sep.join(('C:\WINNT\system32','Microsoft\Crypto','RSA\MachineKeys'))
    G.append(clock()-te)


    te = clock()
    for i in xrange(n):
        xh = separ.join(('C:\WINNT\system32','Microsoft\Crypto','RSA\MachineKeys'))
    H.append(clock()-te)

print min(A), ""os.path.join('C:\WINNT\system32','Microsoft\Crypto','RSA\MachineKeys')""
print min(B), ""ospath.join('C:\WINNT\system32','Microsoft\Crypto','RSA\MachineKeys')""
print min(C), ""ospathjoin('C:\WINNT\system32','Microsoft\Crypto','RSA\MachineKeys')""
print min(D), ""'C:\WINNT\system32'+os.sep+'Microsoft\Crypto'+os.sep+'RSA\MachineKeys'""
print min(E), ""'%s\\%s\\%s' % ('C:\WINNT\system32','Microsoft\Crypto','RSA\MachineKeys')""
print min(F), ""'C:\WINNT\system32'+separ+'Microsoft\Crypto'+separ+'RSA\MachineKeys'""
print min(G), ""os.sep.join('C:\WINNT\system32','Microsoft\Crypto','RSA\MachineKeys')""
print min(H), ""separ.join('C:\WINNT\system32','Microsoft\Crypto','RSA\MachineKeys')""
print 'xa==xb==xc==xd==xe==xf==xg==xh==',xa==xb==xc==xd==xe==xf==xg==xh
</code></pre>

<p>result</p>

<p>0.0284533369465 os.path.join('C:\WINNT\system32','Microsoft\Crypto','RSA\MachineKeys')</p>

<p>0.0277652606686 ospath.join('C:\WINNT\system32','Microsoft\Crypto','RSA\MachineKeys')</p>

<p>0.0272489939364 ospathjoin('C:\WINNT\system32','Microsoft\Crypto','RSA\MachineKeys')</p>

<p>0.00398598145854 'C:\WINNT\system32'+os.sep+'Microsoft\Crypto'+os.sep+'RSA\MachineKeys'</p>

<p>0.00375075603184 '%s\%s\%s' % ('C:\WINNT\system32','Microsoft\Crypto','RSA\MachineKeys')</p>

<p>0.00330824168994 'C:\WINNT\system32'+separ+'Microsoft\Crypto'+separ+'RSA\MachineKeys'</p>

<p>0.00292467338726 os.sep.join('C:\WINNT\system32','Microsoft\Crypto','RSA\MachineKeys')</p>

<p>0.00261401937956 separ.join('C:\WINNT\system32','Microsoft\Crypto','RSA\MachineKeys')</p>

<p>True</p>

<p>with </p>

<p>separ = os.sep</p>

<p>ospath = os.path</p>

<p>ospathjoin = os.path.join</p>
","python"
"1609",2576715,"<p>If the problem is to pass some command from /bar application to /foo application and you are using some servlet-like approach (the Python code is loaded once and not for each request as in CGI), you can just change some class property of the /foo application and be ready to react to the change in the /foo instance (by checking the property state).</p>

<p>Obviously the /foo application should not return right after the first request and yield content line by line.</p>

<p>Thought this is just theory, I have not tried that myself.</p>
","python"
"1610",1818054,"<p>You have executed 3 queries and MySQLdb creates a result set for each. You have to fetch first result, then call <code>cursor.nextset()</code>, fetch second and so on. </p>

<p>This answers your question, but won't be useful for you, because it won't solve locking issue. You have to understand how FOR UPDATE works first: it locks returned rows till the end of transaction. To avoid long lock wait you have to make it as short as possible: <code>SELECT ... FOR UPDATE</code>, <code>UPDATE SET in_use=1 ...</code>, <code>COMMIT</code>. You actually don't need to put them into single SQL statement, 3 <code>execute()</code> calls will be OK too. But you have have to commit before long computation, otherwise lock will be held too long and updating <code>in_use</code> (offline lock) is meaningless. And sure you can do the same thing using ORM too.</p>
","python"
"1611",7042496,"<p>It turns out that numpy offers a simple fix for this problem. The following code works as intended.</p>

<pre><code>class MyArray( object ):
  __array_priority__ = 1. # &lt;- fixes the problem
  def __rmul__( self, other ):
    return MyArray()
</code></pre>

<p>More information can be found <a href=""http://docs.scipy.org/doc/numpy/reference/arrays.classes.html"" rel=""nofollow"">here</a>.</p>
","python"
"1612",37844054,"<p>You can just get the values from the dictionary, and the values from the sublist, no need to key or index:</p>

<pre><code>for sublist in myDict.values():
    for value in sublist:
        print(value)
</code></pre>
","python"
"1613",23431088,"<p><code>BeautifulSoup</code> cannot distinguish visible text from other text in the HTML markup. This particular website does a very good job of obfuscating the markup and makes web-scraping of the page more complex. You can try to understand what text is visible but it's not that easy since there are a lot of irrelevant elements being inserted that can be directly made invisible via <code>style</code> or via the <code>class</code>. Some of the <code>IP</code> parts are in <code>span</code>s, some of them are not a part of any tag. </p>

<p>One workaround would be to use <a href=""http://selenium-python.readthedocs.org/"" rel=""nofollow""><code>Selenium</code></a> which can grab only <code>visible</code> text from the element. For example, this code will print you all the <code>IP</code>s in the particular table:</p>

<pre><code>from selenium.webdriver.firefox import webdriver

browser = webdriver.WebDriver()
browser.get('https://www.hidemyass.com/proxy-list')

rows = browser.find_elements_by_xpath('//table[@id=""listtable""]//tr')
for row in rows[1:]:
    cells = row.find_elements_by_tag_name('td')
    print cells[1].text

browser.close()
</code></pre>

<p>See also:</p>

<ul>
<li><a href=""http://stackoverflow.com/questions/1936466/beautifulsoup-grab-visible-webpage-text"">BeautifulSoup Grab Visible Webpage Text</a></li>
</ul>

<p>Hope that helps.</p>
","python"
"1614",2917127,"<pre><code>servers = ('http://www.google.com', 'http://www.stackoverflow.com')
for server in servers:
    try:
        u = urllib2.urlopen(server)
    except urllib2.URLError:
        continue
    else:
        break
else:
    raise
</code></pre>

<p>This code breaks out of the loop if the url connection <em>doesn't</em> raise an error (<code>else: break</code> part).</p>

<p>Do you want the 2nd one used <em>only</em> if the first fails?</p>

<p><em>edit: I thought that the <code>else:</code> following the for loop should <code>raise</code> because of the <code>break</code>, but in my quick test that didn't work ... because my understanding of <a href=""http://docs.python.org/reference/compound_stmts.html#the-for-statement"" rel=""nofollow"">for/else</a> was wrong</em>  </p>
","python"
"1615",12180225,"<p>From <a href=""http://stackoverflow.com/questions/2686520/unable-to-build-mercurial-on-osx-python-h-not-found"">this SO question</a>, I was able to find Python.h in /Developer/SDKs/MacOSX10.7.sdk/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7. (note that i have Xcode installed)</p>

<p>I then ran <code>sudo python setup.py build_ext --include-dirs /Developer/SDKs/MacOSX10.7.sdk/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7:/Developer/SDKs/MacOSX10.7.sdk/usr/include</code></p>

<p>(note: <code>/Developer/SDKs/MacOSX10.7.sdk/usr/include</code> added because stdio.h was missing once the Python.h was resolved)</p>

<p>Finally, I ran <code>sudo python setup.py install</code></p>
","python"
"1616",2937353,"<pre><code>def matrix_to_string(matrix, col):
        lines = []
        for e in matrix:
            lines.append(str([""{0:&gt;{1}}"".format(str(x), col) for x in e])[1:-1].replace(',','').replace('\'',''))
        pattern = re.compile(r'\b0\b')
        lines = [re.sub(pattern, ' ', e) for e in lines]
        return '\n'.join(lines)
</code></pre>

<p>Example:</p>

<pre><code>matrix = [[0,1,0,3],[1,2,3,4],[10,20,30,40]]
print(matrix_to_string(matrix, 2))
</code></pre>

<p>Output:</p>

<pre><code>    1     3
 1  2  3  4
10 20 30 40
</code></pre>
","python"
"1617",23666850,"<p>You've named both your routes ""user_page"", so I bet the first one (which takes no arguments) is winning and when you try to construct a url with arguments it fails. Rename the functions so they're different and that should fix it. </p>
","python"
"1618",36660233,"<p>When you use + to join two strings, the order matters: <code>'A' + 'B'</code> will give you <code>'AB'</code> while  <code>'B' + 'A'</code> will give you <code>'BA'</code>.  So in your function, each time you do:</p>

<pre><code>output = letter + output
</code></pre>

<p>it's taking the new letter, and adding the string of previous letters to the right of it.  (If you did output = output + letter, you'd just be adding the new letter to the right of the previous letters, which would result in the same exact string that you started with.)</p>
","python"
"1619",11192796,"<p>Here is the trail of investigations.</p>

<p>From flask.blueprints</p>

<pre><code>class Blueprint(_PackageBoundObject):
    ....
    def __init__(self, name, import_name, static_folder=None,
                 static_url_path=None, template_folder=None,
                 ...)
        _PackageBoundObject.__init__(self, import_name, template_folder)
    ....
</code></pre>

<p>From flask.helpers</p>

<pre><code>@locked_cached_property
def jinja_loader(self):
    """"""The Jinja loader for this package bound object.

    .. versionadded:: 0.5
    """"""
    if self.template_folder is not None:
        return FileSystemLoader(os.path.join(self.root_path,
                                             self.template_folder))
</code></pre>

<p>Investigation Result:</p>

<ol>
<li>template_folder which is passed to <code>Blueprints</code> is subsequently to class <code>_PackageBoundObject</code> </li>
<li>It is treated as a single string and not as a list of folders</li>
</ol>

<p>Result:</p>

<ol>
<li><strong>You can not pass multiple paths for template_folder</strong></li>
</ol>
","python"
"1620",19868404,"<p>Python lists <em>do</em> have an <code>index</code> method. But it only finds values that are equal to the argument, not values that have an argument that matches your partial value.</p>

<p>There's really nothing in Python that finds partial-structure matches like this; you can search/filter/etc. on equality, or on a predicate function, but anything else you have to write yourself.</p>

<p>The easiest way to do this is with a loop. You can write it explicitly:</p>

<pre><code>for index, element in enumerate(my_array):
    if element[""extension""] == "".py"":
        return index
</code></pre>

<p>… or in a comprehension:</p>

<pre><code>return next(index for index, element in enumerate(array)
            if element[""extension""] == "".py"")
</code></pre>

<p>Alternatively, you can turn the matching into a function, and pass it to <code>filter</code>, or use it as a <code>key</code> function in a more complex higher-order function, but there doesn't seem to be any real advantage to that here.</p>

<p>And of course you can write your own <code>indexOf</code>-like function that matches partial structures if you want.</p>
","python"
"1621",32626380,"<p>You can use a <a href=""http://scottmoonen.com/2008/02/01/python-generators-saving-time-and-memory/"" rel=""nofollow"">generator container</a> instead of a list to store the result of <code>re.findall</code> which is much optimized in terms of memory use, you can also use <code>re.finditer</code> instead of <code>findall</code> which returns an iterator.</p>

<pre><code>with open('E:\\Book\\1800.txt', ""r"", encoding='ISO-8859-1') as File_1800:
       words_1800=(re.findall('\w+', line.lower()) for line in File_1800)
</code></pre>

<p>Then the <code>words_1800</code> will be an iterator contain lists of founded words or use </p>

<pre><code>with open('E:\\Book\\1800.txt', ""r"", encoding='ISO-8859-1') as File_1800:
       words_1800=(re.finditer('\w+', line.lower()) for line in File_1800)
</code></pre>

<p>to get an iterator contains iterators.</p>
","python"
"1622",35251858,"<p>I searched for some WAVE-files on a Removable Device (SD-Card) with this code:</p>

<pre><code>#include &lt;Array.au3&gt;

; Register search function
Global $DBT_DEVICEARRIVAL = ""0x00008000""
Global $WM_DEVICECHANGE = 0x0219
Global $drives = DriveGetDrive(""REMOVABLE"")
GUIRegisterMsg($WM_DEVICECHANGE, ""searchOnSD"")

; check all already known removable devices
If UBound($drives) &gt; 0 Then
    For $drive In $drives
        If StringRegExp($drive, ""^[[:alpha:]]:$"") Then check($drive)
    Next
EndIf

; search for WAV-file on SD-Card
Func searchOnSD($hWndGUI, $MsgID, $WParam, $LParam)
    If $WParam == $DBT_DEVICEARRIVAL Then
        $newDrives = DriveGetDrive(""REMOVABLE"")
        $drive = $newDrives
        For $i = 0 To UBound($drives) - 2
            _ArrayDelete($drive, 0)
        Next
        If UBound($drive) &gt; 0 Then
            $drive = $drive[0]
            If StringRegExp($drive, ""^[[:alpha:]]:$"") Then
                ConsoleWrite(""new removable ("" &amp; $drive &amp; "") found."" &amp; @CR)
                check($drive)
            EndIf
        EndIf
    EndIf
    $drives = DriveGetDrive(""REMOVABLE"")
EndFunc   ;==&gt;searchOnSD
</code></pre>

<p>In the <code>check($drive)</code> function I then performed something with the WAVE file after evaluating <code>DriveStatus($drive) == ""READY"" And FileExists($wavFile)</code>.</p>
","python"
"1623",39502475,"<p>Because you're not waiting for the mouse button to be released before you trigger your buttons.</p>

<ul>
<li>When <code>pause()</code> starts, it brings up two buttons.</li>
<li>User moves mouse to <code>Main Menu</code>.</li>
<li>User clicks mouse.</li>
<li>As soon as the mouse button is depressed, <code>game_intro()</code> is called, which puts a <code>Quit</code> button in the same place.</li>
<li>The mouse button is <em>still</em> depressed, so the game quits.</li>
</ul>
","python"
"1624",1731102,"<p>12340 is not any data (in sense that there are much bigger data to process on the market).</p>

<p>Even better approach would use build in sqlite module.
If not use some simple format like CSV for example. This is a structure organized.
If not use threads, you could process two files simultaneously.  </p>
","python"
"1625",12333628,"<p>You have a list, not a dictionary. Also you shouldn't name your variable <code>list</code> as it is the name of a built-in.</p>

<pre><code>&gt;&gt;&gt; content
['xlnx&gt;XLNX&lt;', 'yhoo&gt;YHOO&lt;']
&gt;&gt;&gt; tickers = []
&gt;&gt;&gt; for s in content:
...     tickers.append(''.join(i for i in s if i.isupper()))
... 
&gt;&gt;&gt; tickers
['XLNX', 'YHOO']
</code></pre>
","python"
"1626",29100261,"<p>You can use <a href=""https://docs.python.org/2/library/functions.html#zip"" rel=""nofollow""><code>zip</code></a> function for compare the letters :</p>

<pre><code>&gt;&gt;&gt; a='1357'
&gt;&gt;&gt; b='1358'
&gt;&gt;&gt; l=[]
&gt;&gt;&gt; for i,j in zip(a,b):
...   if i==j :l.append('Y')
...   else :l.append('N')
... 
&gt;&gt;&gt; ''.join(l)
'YYYN'
</code></pre>

<p>And for check the answer you can use a generator expression within <code>all</code> :</p>

<pre><code>&gt;&gt;&gt; all(i=='Y' for i in l)
False
</code></pre>
","python"
"1627",7770261,"<p>Try:</p>

<pre><code>&lt;img src=""{{ op.tracked_object.image.url }}"" alt=""""&gt;
</code></pre>
","python"
"1628",3798138,"<p><a href=""http://wwwsearch.sourceforge.net/mechanize/forms.html"">It should be as simple as</a></p>

<pre><code>br.form['prodclass'] = ['1']
</code></pre>

<p>I prefer the more verbose:</p>

<pre><code>br.form.set_value(['1'],name='prodclass')
</code></pre>
","python"
"1629",18240750,"<p>Three options:</p>

<pre><code>g=re.sub('([^0-9])t','\\1',g)
</code></pre>

<p>or</p>

<pre><code>g=re.sub('(?&lt;=[^0-9])t','',g)
</code></pre>

<p>or</p>

<pre><code>g=re.sub('(?&lt;![0-9])t','',g)
</code></pre>

<p>The first option is what you are looking for, a backreference to the captured string. <code>\\1</code> will refer to the first captured group.</p>

<p>Lookarounds don't consume characters, so you don't need to replace them back. Here, I have used a positive lookbehind for the first one and a negative lookbehind for the second one. Those don't consume the characters within their brackets, so you are not taking the <code>[^0-9]</code> or <code>[0-9]</code> in the replacement. It might be better to use those since it prevents overlapping matches.</p>

<p>The positive lookbehind makes sure that <code>t</code> has a non-digit character before it. The negative lookbehind makes sure that <code>t</code> does not have a digit character before it.</p>
","python"
"1630",40075106,"<p>You can do it using <code>regex=True</code> parameter:</p>

<pre><code>In [37]: s.replace(d, regex=True)
Out[37]:
0    aBc
1    aBe
2    aBg
dtype: object
</code></pre>

<p>As you have already <a href=""http://stackoverflow.com/questions/40075106/replace-values-in-pandas-series-with-dictionary/40075212#comment67423617_40075106"">found out yourself</a> - it's a RegEx replacement and it won't work as you expected:</p>

<pre><code>In [36]: s.replace(d)
Out[36]:
0    abc
1    abe
2    abg
dtype: object
</code></pre>

<p>this is working as expected:</p>

<pre><code>In [38]: s.replace({'abc':'ABC'})
Out[38]:
0    ABC
1    abe
2    abg
dtype: object
</code></pre>
","python"
"1631",16782291,"<p>Just a quick and dirty stab at what you may want to do:</p>

<pre><code>&gt;&gt;&gt; x = [['Knight', '500', '500', '0', '0'],['Mage', '0', '0', '500', '500'], ['Mage', '0', '0', '500', '500'], ['Mage', '0', '0', '500', '500'],  ['Mage', '0', '0', '500', '500']]
&gt;&gt;&gt; for row in x:
...     output = [row[0].ljust(20)]
...     for col in row[1:]:
...         output.append(col.rjust(10))
...     print ''.join(output)
... 
Knight                     500       500         0         0
Mage                         0         0       500       500
Mage                         0         0       500       500
Mage                         0         0       500       500
Mage                         0         0       500       500
</code></pre>
","python"
"1632",24683987,"<p>I had the exact same problem with ""socket://"" rather than ""loop://""</p>

<p>I wasn't able to get the accepted answer to work however the following seems to succeed:</p>

<p>1) Add an explicit import of the offending urlhandler.* module</p>

<pre><code>import serial

# explicit import for py2exe - to fix ""socket://"" url issue
import serial.urlhandler.protocol_socket 

# explicit import for py2exe - to fix ""loop://"" url issue (OP's particular prob)
import serial.urlhandler.protocol_loop

# use serial_for_url in normal manner
self._serial = serial.serial_for_url('socket://192.168.1.99:12000')
</code></pre>

<p>2) Generate a setup script for py2exe (see <a href=""https://pypi.python.org/pypi/py2exe/"" rel=""nofollow"">https://pypi.python.org/pypi/py2exe/</a>) -- I've installed py2exe to a virtualenv:</p>

<pre><code>path\to\env\Scripts\python.exe -m py2exe myscript.py -W mysetup.py
</code></pre>

<p>3) edit mysetup.py to include option </p>

<pre><code>zipfile=""library.zip"" # default generated value is None
</code></pre>

<p>(see also <a href=""http://www.py2exe.org/index.cgi/ListOfOptions"" rel=""nofollow"">http://www.py2exe.org/index.cgi/ListOfOptions</a>)</p>

<p>3) build it:</p>

<pre><code>path\to\env\Scripts\python.exe mysetup.py py2exe
</code></pre>

<p>4) run it</p>

<pre><code>dist\myscript.exe
</code></pre>
","python"
"1633",3408847,"<p>ActiveState keeps old binaries for ActivePython available on <a href=""http://www.activestate.com/activepython/downloads"" rel=""nofollow"">its site</a>. The oldest version there is 2.5.5.7.</p>
","python"
"1634",14916517,"<p>You forgot to pass the point to ListFields()</p>

<pre><code>pointfield = arcpy.ListFields(pl)
for pf in pointfield:
      print ""Field Name:"" + pf.name
</code></pre>
","python"
"1635",27948467,"<p>It's probably caused by the folder <code>~/.local/lib</code> not appearing in your <code>sys.path</code>. You can update the <code>sys.path</code> in a couple of ways. Either set the <code>PYTHONPATH</code> environment variable before running the console, or just append to the <code>sys.path</code> array.</p>

<p>You could uninstall the module and then reinstall as root:</p>

<pre><code>pip uninstall scikit-learn ; sudo pip install scikit-learn
</code></pre>

<p>You can also just delete the <code>~/.local/lib</code> folder and reinstall the package.</p>
","python"
"1636",15349563,"<pre><code>  ""(can|may) be (cited|referred to) as the? `(.+)'""
</code></pre>

<p>and don't Forget to modify your Group index...</p>
","python"
"1637",3283209,"<p>If you're always using it for birthdays, just subtract 100 if the year is after now:</p>

<pre><code>if d &gt; datetime.now():
    d = datetime(d.year - 100, d.month, d.day)
</code></pre>
","python"
"1638",1110153,"<pre><code>class Course(models.Model):
   name = models.CharField(max_length=256)
   students = models.ManyToManyField(Student)

class Student(models.Model):
   first_name = models.CharField(max_length=256)
   student_number = models.CharField(max_length=128)
   # other fields, etc...

   friends = models.ManyToManyField('self')
</code></pre>
","python"
"1639",3075202,"<p>1 is best, ideally via a configuration file or command line argument (--quiet)</p>

<p>2 will just clutter up your code</p>

<p>If you want to avoid expensive string construction (this is probably worthwhile about 0.001% of the time in my experience), use:</p>

<pre><code>if logger.isEnabledFor(logging.DEBUG):
    logger.debug(""Message with %s, %s"", expensive_func1(),
                                        expensive_func2())
</code></pre>

<p><a href=""http://docs.python.org/library/logging.html#optimization"">http://docs.python.org/library/logging.html#optimization</a></p>
","python"
"1640",12420598,"<p>Constructing from a reST table is not possible, but would be interesting. You can use read_csv to read in a table. See also read_clipboard and read_fwf (fixed width)</p>

<pre><code>In [22]: table = """"""\
   ....: id1         id2         net       nnet       desc
   ....: 1001        1002             10.0       0.0  Closed part of queue
   ....: 1002        NaN               0.0       3.0  Opened part of queue
   ....: """"""

In [23]: df = pandas.read_csv(StringIO(table), sep='[\s]{2,}')

In [24]: df
Out[24]: 
    id1   id2  net  nnet                  desc
0  1001  1002   10     0  Closed part of queue
1  1002   NaN    0     3  Opened part of queue
</code></pre>
","python"
"1641",36077242,"<p>Try this:</p>

<pre><code>def title(s):
  f = open(""bestsellers.txt"", 'r')
  count = 0
  for line in f:
    list = line.split(""\t"")
    title = list[0]
    author = list[1]
    date = list[3]
    joinList = """".join(title)
    cleanList = joinList.lower()
    if s in cleanList:
        count = 1
        print ""   %s, by %s (%s)"" % (title, author, date)
  if count == 0:
    print ""Sorry, your search gave no results.""
return
</code></pre>
","python"
"1642",10465468,"<p>Here is another idea: Store the combinations generators and yield randomly until you consume all. This randomizes the order of set sizes also.</p>

<p><strong>Edit</strong>: I assume you don't care about the order of elements in a single set, since you will be summing them. If you do, you can put a <code>random.shuffle(next_value)</code> before yield.</p>

<pre><code>import itertools
import random

def random_powerset(l):
    combs = [itertools.combinations(l,i) for i in range(len(l)+1)]
    while combs:
        comb_index = random.choice(range(len(combs)))
        try:
            next_value = next(combs[comb_index])
            yield next_value
        except StopIteration:
            combs.pop(comb_index)
</code></pre>

<p>Output:</p>

<pre><code>In : list(random_powerset(range(3)))
Out: [(0, 1), (0, 2), (0, 1, 2), (1, 2), (), (0,), (1,), (2,)]

In : list(random_powerset(range(3)))
Out: [(0, 1, 2), (0,), (), (0, 1), (1,), (0, 2), (1, 2), (2,)]

In : list(random_powerset(range(3)))
Out: [(0, 1), (0, 1, 2), (0, 2), (), (0,), (1,), (1, 2), (2,)]

In : list(random_powerset(range(3)))
Out: [(), (0,), (0, 1), (0, 1, 2), (1,), (0, 2), (2,), (1, 2)]

In : list(random_powerset(range(3)))
Out: [(), (0, 1), (0,), (0, 1, 2), (1,), (0, 2), (2,), (1, 2)]

In : list(random_powerset(range(3)))
Out: [(0, 1), (0,), (0, 2), (1, 2), (), (1,), (2,), (0, 1, 2)]

In : list(random_powerset(range(3)))
Out: [(), (0, 1, 2), (0,), (1,), (2,), (0, 1), (0, 2), (1, 2)]
</code></pre>
","python"
"1643",16989377,"<p>I created a similar program in python i got round this by making the program listen for the word ""Jarvis"" as soon as the program heard this it would start listening. therefore ""what time is it"" wouldn't have a response but ""Jarvis, what time is it"" or ""What time is it Jarvis"" would have a response.</p>
","python"
"1644",39306922,"<p>The <code>EOFError</code> is an exception that can be caught with <code>try</code>-<code>except</code>. Here we break the loop using the <code>break</code> keyword if an <code>EOFError</code> is thrown:</p>

<pre><code>while True:
    try:
        output = raw_input()
    except EOFError:
        break

    print(output)
</code></pre>
","python"
"1645",11652285,"<p>Assuming the keys of your dictionary are all strings, the simplest option I see is Python's <a href=""http://docs.python.org/library/shelve.html"" rel=""nofollow""><code>shelve</code></a> module.  A shelve behaves like a persistent dictionary, and any key can be updated.</p>

<p>Another option is the <a href=""http://docs.python.org/library/anydbm.html"" rel=""nofollow""><code>anydbm</code></a> module, which also requires all <em>values</em> to be strings.</p>
","python"
"1646",39349096,"<p>You can use RDOSignature.ApplyTo - please see <a href=""http://www.dimastr.com/redemption/rdosignature.htm"" rel=""nofollow"">http://www.dimastr.com/redemption/rdosignature.htm</a> </p>
","python"
"1647",38442344,"<p>Well I finally have a solution, which uses NumPy's reshaping method and then operates along one of the axes to give us <code>argmax</code>. I am not sure if this is elegant, but I am hoping would be good in terms of performance. Also, I am assuming that pandas Series for multi-index data has a regular format, i.e. each level maintains the number of elements across all indices. </p>

<p>Here's the implementation -</p>

<pre><code>L0,L1,L2 = s.index.levels[:3]
IDs = s.sortlevel().values.reshape(-1,len(L0),len(L1),len(L2)).argmax(2)
sOut = pd.Series(IDs.ravel(),pd.MultiIndex.from_product([L0,L2]))
</code></pre>

<hr>

<p>Timing (complements of pir)</p>

<p><a href=""http://i.stack.imgur.com/Jdh9r.png"" rel=""nofollow""><img src=""http://i.stack.imgur.com/Jdh9r.png"" alt=""enter image description here""></a></p>
","python"
"1648",11928337,"<pre><code>'|'.join([elem for elem in String_A.split('/') if elem in String_B.split('|')])
</code></pre>
","python"
"1649",20583138,"<p><code>join</code> takes strings, so give it strings:</p>

<pre><code>' '.join(map(str, ['this', LazyString(lambda: 'works')]))
</code></pre>

<p>Python does not have support for the kind of transparent lazy evaluation you're looking for. If you want to force evaluation of a lazy object, you will have to do so explicitly, rather than having it done automatically when needed. Sometimes, Python will call some method of your object that you can rely on, such as <code>__nonzero__</code> if you want a lazy boolean, but not always, and you won't generally be able to achieve full interoperability.</p>
","python"
"1650",37856154,"<p>You don't need a regex, you can just <a href=""https://www.crummy.com/software/BeautifulSoup/bs4/doc/#append"" rel=""nofollow"">append</a> the table to the body:</p>

<pre><code>In [45]: soup = BeautifulSoup(""&lt;BODY&gt;&lt;tag1&gt;&lt;/tag1&gt;&lt;tag2&gt;&lt;/tag2&gt;&lt;/BODY&gt;"", ""html.parser"")

In [46]: soup.body.append(BeautifulSoup(""&lt;table&gt;Test&lt;/table&gt;"",""html.parser""))

In [47]: soup
Out[47]: &lt;body&gt;&lt;tag1&gt;&lt;/tag1&gt;&lt;tag2&gt;&lt;/tag2&gt;&lt;table&gt;Test&lt;/table&gt;&lt;/body&gt;
</code></pre>
","python"
"1651",2468460,"<p>Consider this.</p>

<pre><code>def merge_lines( line_iter ):
    buffer = ''
    for line in line_iter:
        if len(line) &lt;= 80:
            yield buffer + line
            buffer= ''
        else:
            buffer += line[:-1] # remove '\n'

with open('myFile','r') as source:
    with open('copy of myFile','w') as destination:
        for line in merge_lines( source ):
            destination.write(line)
</code></pre>

<p>I find that an explicit generator function makes it much easier to test and debug the essential logic of the script without having to create mock filesystems or do lots of fancy setup and teardown for testing.</p>
","python"
"1652",39821470,"<p>The ""#!python3"" is to help the console determine the right version of python. However you need to make sure the path is correct. Instead of putting ""#!python3"", put ""#!/usr/bin/"" and then your python version, so ""python"" or ""python3"". </p>

<p>Check this article for more information on this. <a href=""http://stackoverflow.com/questions/2429511/why-do-people-write-usr-bin-env-python-on-the-first-line-of-a-python-script"">Article on ""#!"" Scripts.</a></p>
","python"
"1653",24296480,"<p>I can't reproduce this problem with ""plain"" <code>numpy</code> arrays:</p>

<pre><code>import numpy as np
a=array([(4,1),(6,0)])
b=array([(np.NaN,3),(3,np.NaN)])

print a
print b

do_not_replace = np.isnan(b) | (a&gt;b)
print do_not_replace

print np.where(do_not_replace, a, b)
</code></pre>

<p>... gives what you want, I think:</p>

<pre><code>array([[ 4.,  3.],
       [ 6.,  0.]])
</code></pre>

<p>@jwilner: As @Jeff suggests, it could be a <code>pandas</code> bug. What version are you running?</p>
","python"
"1654",13354725,"<p>You are getting the following:</p>

<pre><code>NameError: name 'MultiIndex' is not defined
</code></pre>

<p>because you are not importing MultiIndex directly when you import Series and DataFrame.</p>

<p>You have -</p>

<pre><code>from pandas import Series, DataFrame
</code></pre>

<p>You need -</p>

<pre><code>from pandas import Series, DataFrame, MultiIndex
</code></pre>

<p>or you can instead refer to MultiIndex using pd.MultiIndex since you are importing pandas as pd</p>
","python"
"1655",39821911,"<p>
So you are trying to <em>reset</em> the variable.<br>
Really, it's the same as creating the variable for the first time.</p>

<pre class=""lang-py prettyprint-override""><code>class Base:
    var = 12
class Cls(Base):
    var = 'abc'
</code></pre>

<p>The class's variables are copied when you create a new class, so these variables <strong>belong</strong> the base, but <strong>gotten</strong> from the the new class. The new class redirects to it's base if this variable is not his.  </p>

<p>So, editing the class (<em>see below</em>) makes the function reference to it's class, which references to it's base.</p>

<pre class=""lang-py prettyprint-override""><code>class Class(Base):
    def getVar(self):
        return self.var
</code></pre>

<p>Same with editing and deleting.  </p>

<p>To make variables <strong>copy</strong> into the class, there are 2 solutions:  </p>

<p>One:</p>

<pre class=""lang-py prettyprint-override""><code>class Base:
    __var = 12
    def __init__(self):
        self.var = self.__var
class Class(Base):
    var = _Base__var #add any methods to copy like list.copy()
    def __init__(self):
        pass
</code></pre>

<p>Two:</p>

<pre class=""lang-py prettyprint-override""><code>class Base:
    var = 12
class Class(Base):
    pass
Class.var = Base.var #add any methods to copy like list.copy()
</code></pre>

<p>The first one works because of the rule that variables that start with two or more underscores (_) and don't match &#95;&#95;{name}&#95;&#95; form are renamed to 
_{class name}{variable name}.
Then the &#95;&#95;init&#95;&#95; function creates a variable called var with the value of _Base__var.</p>

<ul>
<li>It is making the object weight more</li>
<li>You need to redefine the &#95;&#95;init&#95;&#95; class</li>
<li>No code outside functions or classes</li>
</ul>

<p>Second one copies it from the outside.  </p>

<ul>
<li>Code outside functions or classes</li>
</ul>
","python"
"1656",21153303,"<p>You forgot to build <code>cube_interface</code>:</p>

<p>See: <a href=""https://github.com/chadharrington/all_spark_cube/tree/master/software/thrift"" rel=""nofollow"">https://github.com/chadharrington/all_spark_cube/tree/master/software/thrift</a></p>

<p>You need to build this with the <code>gen_py</code> tool.</p>

<p>i.e: (<em>I assume</em>:):</p>

<pre><code>cd /path/to/all_spark_cube/software/thrift/
make
cp cube_interface.py /path/to/python/site-packages
</code></pre>
","python"
"1657",28486871,"<p>One issue I sport is in your database configuration, the following is required. (see #REQUIRED)</p>

<pre><code>DATABASES = {
    'default': {},  # REQUIRED
    'foo_proj': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'adsk_foo_proj',
        'USER': 'root',
        'PASSWORD': 'Secret!',
        'HOST': '',
        'PORT': '',
    },
    'cms': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'cms',
        'USER': 'root',
        'PASSWORD': 'Secret!',
        'HOST': '',
        'PORT': '',
    }
}
</code></pre>
","python"
"1658",24424489,"<p>If you remove the if statement in the File1.py at the end, this will work fine. Like this:</p>

<p><strong>File1.py</strong></p>

<pre><code>globVar = []

def func1(a,b):
    globVar.append(range(a,b)
    printLast()

def main():
    for i in range(1,10):
        for j in range(1,5):
            func1(i,j)

globVar = main()
</code></pre>

<p>This will ensure that globVar will have the array of values.</p>
","python"
"1659",17466847,"<p>Found that the accepted answer for this is almost exactly what I want:</p>

<p><a href=""http://stackoverflow.com/questions/12479054/how-to-run-functions-outside-websocket-loop-in-python-tornado?rq=1"">How to run functions outside websocket loop in python (tornado)</a></p>

<p>With a slight modification, the accepted answer at the above link continually sends out ping messages.  Here is the mod:</p>

<p>Change:</p>

<pre><code>def test(self):
    self.write_message(""scheduled!"")
</code></pre>

<p>to:</p>

<pre><code>def test(self):
    self.write_message(""scheduled!"")
    tornado.ioloop.IOLoop.instance().add_timeout(datetime.timedelta(seconds=5), self.test)
</code></pre>
","python"
"1660",13223363,"<p>You can use the file as an iterable, and loop over it, or you can call <code>.next()</code> on it to advance one line at a time.</p>

<p>If you need to read 1 specific line, this means you can skip the lines before it using <code>.next()</code> calls:</p>

<pre><code>def read():
    with open('test.txt', 'r') as f:
        for _ in range(2):
            f.next()  # skip lines

        print(f.next())  # print the 3rd line
</code></pre>
","python"
"1661",30355932,"<p>TL/DR: just do this:</p>

<pre><code>pos = nx.spring_layout(g)
h = g.subgraph(A)
nx.draw_networkx_nodes(h,pos=pos, node_color='b') #or even nx.draw(h,pos=pos,node_color='b') to get nodes and edges in one command
nx.draw_networkx_edges(h,pos=pos)
</code></pre>

<hr>

<p>full answer:</p>

<p>You want to just plot the nodes in <code>A</code> and the edges in the path.  You can actually avoid <code>noCor</code> altogether using the <code>nodelist</code> arguement which specifies which nodes to draw.</p>

<pre><code>nx.draw_networkx_nodes(g,pos=pos, nodelist = A, node_color = 'b')
</code></pre>

<p>To plot just the edges corresponding to <code>A</code>, you need to figure out what those are.  The easiest way I am aware of is</p>

<pre><code>h = g.subgraph(A)
</code></pre>

<p>Then <code>h</code> is the subgraph induced on the nodes <code>A</code>.  It has all edges in <code>A</code>.  I am 99.9% sure (but haven't checked through a formal proof) that if <code>A</code> is the shortest path between two nodes (as returned by Dijkstra) then there aren't any other edges between the nodes in <code>A</code> except the ones in the path.  So <code>h.edges()</code> will give the edges for <code>A</code>.</p>

<pre><code>nx.draw_networkx_edges(g,pos=pos, edgelist = h.edges())
</code></pre>

<p>A more compact form would do it as:</p>

<pre><code>pos = nx.spring_layout(g)
h = g.subgraph(A)
nx.draw_networkx_nodes(h,pos=pos, node_color='b') #or even nx.draw(h,pos=pos,node_color='b') to get nodes and edges in one command
nx.draw_networkx_edges(h,pos=pos)
</code></pre>

<p>You might ask why I defined <code>pos</code> with respect to <code>g</code> rather than <code>h</code>.  It's because maybe you'd want to draw some other nodes in <code>g</code> into your figure later or some other figure, and it's useful then to have consistent positions.  If you just do it with respect to <code>h</code>, it'll basically want to create a straight line.</p>

<hr>

<p>Some comments on your command <code>nx.draw_networkx_nodes(g, pos=pos, node_color=noCor)</code>.  This tells it to draw all the nodes in <code>g</code> with the colors from <code>noCor</code> [and it will color the nodes based on the order the color appears in <code>noCor</code> and the order the nodes appear in <code>g.nodes()</code>].  Finally, note you need to use colors that matplotlib will recognize (see <a href=""http://matplotlib.org/api/colors_api.html"" rel=""nofollow"">http://matplotlib.org/api/colors_api.html</a>).  In this case:</p>

<pre><code>noCor = [""b"" if n in A else ""r"" for n in g.nodes()]
</code></pre>
","python"
"1662",8624034,"<p>You can validate it with a <a href=""http://docs.python.org/library/argparse.html#action"">custom action:</a></p>

<pre><code>import argparse
import collections


class ValidateCredits(argparse.Action):
    def __call__(self, parser, args, values, option_string=None):
        # print '{n} {v} {o}'.format(n=args, v=values, o=option_string)
        valid_subjects = ('foo', 'bar')
        subject, credits = values
        if subject not in valid_subjects:
            raise ValueError('invalid subject {s!r}'.format(s=subject))
        credits = float(credits)
        Credits = collections.namedtuple('Credits', 'subject required')
        setattr(args, self.dest, Credits(subject, credits))

parser = argparse.ArgumentParser()
parser.add_argument('-c', '--credits', nargs=2, action=ValidateCredits,
                    help='subject followed by number of credits required',
                    metavar=('SUBJECT', 'CREDITS')
                    )
args = parser.parse_args()
print(args)
print(args.credits.subject)
print(args.credits.required)
</code></pre>

<hr>

<p>For example,</p>

<pre><code>% test.py -c foo 2
Namespace(credits=Credits(subject='foo', required=2.0))
foo
2.0
% test.py -c baz 2
ValueError: invalid subject 'baz'
% test.py -c foo bar
ValueError: could not convert string to float: bar
</code></pre>
","python"
"1663",2070768,"<p>I don't know much about ctypes, but I am doing a similar thing (wrapped c++ webcam capture, displayed with DirectPython).</p>

<p>In my case I just made a buffer in python like this:</p>

<pre><code>bufferSize = imageWidth * imageHeight
buf = ""\0"" * bufferSize
</code></pre>

<p>Pass buf to your image capture function for filling?</p>

<p>Maybe post a more complete code sample...</p>
","python"
"1664",15177222,"<p>Create the second radio button so it's in the first radio button's group using:</p>

<pre><code>Gtk.RadioToolButton.new_with_stock_from_widget(first_button, Gtk.STOCK_PROPERTIES)
</code></pre>

<p>PS. Looks like the UI task you are trying to accomplish might be better done with a <code>Notebook</code>?</p>
","python"
"1665",19736904,"<p>The code you have posted does not generate that error, so it's impossible to diagnose exactly what's happening in the <em>different</em> code you're actually running.</p>

<p>The most likely cause is that it's completely unrelated to the backslashes, and you're doing something like mixing tabs and spaces. (The fact that you're using a weird 6-character indent for the block isn't a good sign…)</p>

<p>Another possibility is that you're putting extra spaces after one of the backslashes. This <em>should</em> usually give you a <code>SyntaxError: unexpected character after line continuation character</code>, but it's possible to confuse Python to the point where that passes and you get the following generic <code>SyntaxError</code> for a <code>+</code> with no right operand or <code>IndentationError</code> for the next line.</p>
","python"
"1666",4914796,"<p>You appear to be using a (Py)GTK timer object within a (Py)Qt application.  Try replacing</p>

<pre><code>    self.maintimer = gobject.timeout_add_seconds(1, self.sendMessages)
</code></pre>

<p>with the equivalent PyQt code</p>

<pre><code>    self.maintimer = QtCore.QTimer(self);
    self.connect(self.maintimer, QtCore.SIGNAL('timeout()'), self.sendMessages)
    self.maintimer.start(1000)
</code></pre>

<p>I was able to reproduce the segfault using <code>gobject.timeout_add_seconds</code>, and it went away once I replaced the PyGTK timer with a PyQt one.  I can't be sure why this happens, but <a href=""http://tuxion.com/2010/04/16/periodic-timers-in-pygtk.html"" rel=""nofollow"">this article</a> gives a possible reason:</p>

<blockquote>
  <p>One caveat I found, gobject.timeout_add_seconds() seems to depend on the GTK main loop, so you cannot use it from a regular non-GTK python application.</p>
</blockquote>
","python"
"1667",8345190,"<p>I'm not a Python expert but if it can do named captures, something general like this might work:  </p>

<p><code>^(?&lt;Title&gt;.+)\.s(?&lt;Season&gt;\d{1,2})e(?&lt;Episode&gt;\d{1,2})\..*?(?&lt;Extension&gt;[^.]+)$</code>  </p>

<p>if no named groups, just use normal groups.  </p>

<p>A problem could occur if the title has a <code>.s2e1.</code> part that masks the real season/episode part. That would require more logic. The regex above asumes that the title/season/episode/extension exists, and s/e is the farthest one to the right. </p>
","python"
"1668",2035727,"<p>What is the purpose of <code>x.decode(”base64”).decode(”zlib”) for x in (""sss"", ""dsss"", random_garbage)</code>? Excuse me, you should know; you are the one who is doing it!</p>

<p><strong>Edit after OP's addition of various puzzles</strong></p>

<p><strong>Puzzle 1</strong></p>

<pre><code>a='dsss'.encode('zlib')
print a
a.encode('base64')
print a
a.decode('base64')#error
print a
a.decode('zlib')
print a
</code></pre>

<p>Resolution: all 3 statements of the form</p>

<p><code>a.XXcode('encoding')</code></p>

<p>should be</p>

<p><code>a = a.XXcode('encoding')</code></p>

<p><strong>Puzzle 2</strong></p>

<pre><code>a='dsss'
a=a.encode('zlib')
print a
a=a.decode('zlib')
print a#why can't print 'dsss'

x\x9cK)..
</code></pre>

<p>But it <strong>does</strong> print 'dsss':</p>

<pre><code>&gt;&gt;&gt; a='dsss'
&gt;&gt;&gt; a=a.encode('zlib')
&gt;&gt;&gt; print a
x£K)..<U+2660> <U+2666>F<U+263A>¥
&gt;&gt;&gt; a=a.decode('zlib')
&gt;&gt;&gt; print a#why can't print 'dsss'
dsss
&gt;&gt;&gt;
</code></pre>

<p><strong>Puzzle 3</strong></p>

<p>""""""i think the 'print a' encode the a with 'uhf-8'.""""""</p>

<p>Resolution: You think extremely incorrectly. What follows the <code>print</code> is an <strong>expression</strong>. There are no such side effects. What do you imagine happens when you do this:</p>

<pre><code>print 'start text ' + a + 'end text'
</code></pre>

<p>?</p>

<p>What do you imagine happens if you do <code>print a</code> twice? Encoding the already-encoded text again? Why don't you stop imagining and try it out?</p>

<p>In any case, note that the output of str.encode('zlib') is an str object, not a unicode object:</p>

<pre><code>&gt;&gt;&gt; print repr('dsss'.encode('zlib'))
'x\x9cK)..\x06\x00\x04F\x01\xbe'
</code></pre>

<p>Getting from that to UTF-8 is going to be somewhat difficult ... it would have to be decoded into unicode first -- with what codec? <code>ascii</code> and <code>utf8</code> are going to have trouble with the '\x9c' and the '\xbe' ...</p>
","python"
"1669",2854230,"<p>There is no such thing as a ""high ascii character"". The ASCII character set is limited to ordinal in range(128).</p>

<p>That aside, this is a FAQ. Here's <a href=""http://effbot.org/zone/unicode-convert.htm"" rel=""nofollow"">one answer</a>. In general, you should familiarise yourself with str.translate() and unicode.translate() -- very handy for multiple substitutions of single bytes/characters. Beware of answers that mention only the unicodedata.normalize() gimmick; that's just one part of the solution.</p>

<p><strong>Update</strong>: The currently-accepted answer blows away characters that don't have a decomposition, as pointed out by Mark Tolonen. There seems to be a lack of knowledge of what <code>unicode.translate()</code> is capable of. It CAN translate one character into multiple characters. Here is the output from <code>help(unicode.translate)</code>:</p>

<blockquote>
  <p>S.translate(table) -> unicode   </p>
  
  <p>Return a copy of the string S, where all characters have been mapped through the given translation table, which must be a mapping of Unicode ordinals to Unicode ordinals, <strong>Unicode strings</strong> or None. Unmapped characters are left untouched. Characters mapped to None are deleted.</p>
</blockquote>

<p>Here's an example:</p>

<pre><code>&gt;&gt;&gt; u""Gau\xdf"".translate({0xdf: u""ss""})
u'Gauss'
&gt;&gt;&gt;
</code></pre>

<p>Here's a table of fix-ups from the solution that I pointed to:</p>

<pre><code>CHAR_REPLACEMENT = {
    # latin-1 characters that don't have a unicode decomposition
    0xc6: u""AE"", # LATIN CAPITAL LETTER AE
    0xd0: u""D"",  # LATIN CAPITAL LETTER ETH
    0xd8: u""OE"", # LATIN CAPITAL LETTER O WITH STROKE
    0xde: u""Th"", # LATIN CAPITAL LETTER THORN
    0xdf: u""ss"", # LATIN SMALL LETTER SHARP S
    0xe6: u""ae"", # LATIN SMALL LETTER AE
    0xf0: u""d"",  # LATIN SMALL LETTER ETH
    0xf8: u""oe"", # LATIN SMALL LETTER O WITH STROKE
    0xfe: u""th"", # LATIN SMALL LETTER THORN
    }
</code></pre>

<p>This can be easily extended to cater for the fancy quotes and other non-latin-1 characters found in cp1252 and siblings.</p>
","python"
"1670",9168437,"<p>Your sip python module must have been reinstalled to a newer version which is now incompatible with your PyQt installation. I would recommend removing sip, PyQt, and Qt, and then reinstalling them.</p>

<p>Check that your apt is up to date, and also confirm that you don't have an old PyQt installation sitting somewhere in your pythonpath.</p>

<p>If you are able to successfully import PyQt by itself then try comparing the import paths to make sure you aren't pulling another version of PyQt:</p>

<pre><code># from a shell
python -c ""from PyQt4 import QtCore; print QtCore.PYQT_VERSION_STR, QtCore.QT_VERSION_STR; print QtCore.__file__""
</code></pre>

<p>Compare the versions and the PyQt4 location to the one being dumped out from your traceback when using pyuic4</p>

<p>If its a matter of sip being found in a different location, try adjusting your PYTHONPATH to confirm:</p>

<pre><code>import sys
sys.path.insert(0, ""/usr/lib/pymodules/python2.6"")

from PyQt4 import QtCore
</code></pre>

<p>If this works without crashing, then you should probably remove the newer sip that is causing a conflict from here: ""/usr/lib/python2.6/dist-packages/sip.so""</p>
","python"
"1671",14513374,"<p>After you assign <code>bar = foo</code>, you have two names that both refer to the exact same value.  There's no way in Python to distinguish between them.  Assignment in Python never copies data, it just makes a name refer to a value, and a function is a value like any other.  There is only one function, and it has only one <code>__name__</code>.</p>
","python"
"1672",31775138,"<p><code>None</code> is the way for inputs where you also accept zero and the like.</p>

<p>I think that you should use <code>nin is None</code> rather the <code>nin == None</code>, and many would argue that <code>nin = bar if nin is None else nin</code> is more pythonic, but personally I think both are ok.</p>
","python"
"1673",25799237,"<p>General question - general answer. You can traverse anything in Python using <em>iteration</em>:</p>

<p></p>

<pre><code>for row in c.execute('SELECT * from table if time = ""14:00:00""').fetchall():
    print row
</code></pre>
","python"
"1674",4104208,"<p>The problem is that <code>unique_items</code> is a generator so that </p>

<pre><code>senderDupSend = unique_items(ip, 4, True)
</code></pre>

<p>is a generator that needs to be iterated over. When you run</p>

<pre><code>for item in foundUnique:
    print item
</code></pre>

<p>the generator has not actually run yet so <code>foundUnique</code> is still empty.</p>

<p>When you later go on to do</p>

<pre><code>for item in senderDupSend: # This is what actually fills the list.
    print item
for item in foundUnique:
    print item
</code></pre>

<p>It should print out the set twice: once while it is being constructed and once after it is constructed.</p>

<hr>

<p>It seems like what you are trying to do is construct a set that has the same index taken from every element of some sequence. You can do it like this very easily:</p>

<pre><code>found_unique = set(item[index] for item in sequence)
</code></pre>

<p>In the concrete case that you show, it would be:</p>

<pre><code>found_unique = set(item[4] for item in ip)
</code></pre>

<p>If you later wanted to extend the set to contain other items, you could do</p>

<pre><code>found_unique.union(item[4] for item in other_ip_list) 
</code></pre>
","python"
"1675",5476351,"<p>Homework?</p>

<p>Your data structures are a little odd. You probably want the cart to be a list of tuples or something, with each tuple being item, quantity, or even item, quantity, subtotal. However.</p>

<pre><code>if cmd == ""additem"":
    item = raw_input(""Enter item name: "")
    cart.append(item)

#at the end
for item in cart:
    print ""Item: %s. Price: %s"" % (item, prices[item])
</code></pre>
","python"
"1676",13059320,"<p>The list has to be flattern.
Python does not count nested list. So it'd be:</p>

<pre><code>alist=[(('john', 37), 8),(('john', 37), 8),8,8]
</code></pre>

<p>for python to return 2</p>

<p>and here is the <a href=""http://stackoverflow.com/questions/5828123/nested-list-and-count"">ways</a> to flattern the list</p>
","python"
"1677",5986377,"<p>When you pass a list to a function, you're really passing it a pointer to the list and not a copy of the list. So <code>b</code> is appending a value to the original <code>args</code>, not its own local copy of it. </p>
","python"
"1678",39443136,"<p>You are after the last text child of the <code>&lt;P&gt;</code> element, so you can add a <code>[last()]</code> predicate to your XPath expression:</p>

<pre><code>&gt;&gt;&gt; import scrapy
&gt;&gt;&gt; s = scrapy.Selector(text=""""""      &lt;p class=""fc-gray""&gt;
...            hello
...        &lt;span class=""""&gt;2010-10&lt;/span&gt; 
...        &lt;em class=""shuxian""&gt;|&lt;/em&gt;
...              4.2                 
...       &lt;/p&gt;"""""")
&gt;&gt;&gt; s.xpath('.//p[@class=""fc-gray""]/text()[last()]')
[&lt;Selector xpath='.//p[@class=""fc-gray""]/text()[last()]' data='\n             4.2                 \n     '&gt;]
&gt;&gt;&gt; s.xpath('.//p[@class=""fc-gray""]/text()[last()]').extract_first()
'\n             4.2                 \n      '
&gt;&gt;&gt; s.xpath('.//p[@class=""fc-gray""]/text()[last()]').extract_first().strip()
'4.2'
&gt;&gt;&gt;&gt; # alternative using XPath's normalize-space() to do the whitespace stripping
&gt;&gt;&gt; s.xpath('normalize-space(.//p[@class=""fc-gray""]/text()[last()])').extract_first()
'4.2'
</code></pre>
","python"
"1679",33431909,"<p>Try this:</p>

<pre><code>sanc['Deal Size / Complexity Measure2'] = sum([(math.log(x)+y) for x,y in zip(sanc['Deal Size'],sanc['Deal Size'])])
</code></pre>
","python"
"1680",2139823,"<p>In Python, you could do something like that</p>

<pre><code># loop on all the files
for num in range(1,1000):

    cfile = open ( 'c%u.dat'%num, mode='r')

    # find the specific line
    for line in cfile:
        if line[0]=='@':

            # open the determined file and add the line
            dfile = open( 'determined_c%u_send.dat'%num, mode='a')
            dfile.write( line[1:-1] )
            dfile.close()

    cfile.close()
</code></pre>

<p>It's untested, but it should work</p>

<p>EDIT: I realized you wanted to add the line at the beginning of the determined_cXXX_send.dat, not at the end.</p>

<p>So, based on Dennis Williamson's answer, I can also propose the following bash code</p>

<pre><code>for i in {1..2}
do
    mv ""determined_c${i}_send.dat"" ""temp.out""
    cat c1.dat | grep @ | tr -d ""@"" &gt;  ""determined_c${i}_send.dat""
    cat temp.out &gt;&gt; ""determined_c${i}_send.dat""
done
rm temp.out
</code></pre>
","python"
"1681",22169372,"<p>To elaborate on the Python side...</p>

<p><code>obj.attr</code> is looking for instance attributes and <code>obj.__class__.attr</code> is specifically looking for class attributes. </p>

<p>Note that if you call <code>obj.attr</code> to find an instance attribute, but Python can't find an instance attribute with that name, it then looks in the baseclass for class attributes.</p>

<pre><code>&gt;&gt;&gt; class MyClass():
        foo = ""bar""

&gt;&gt;&gt; a = MyClass()
&gt;&gt;&gt; a.foo # class attribute as no instance attribute foo
""bar""
&gt;&gt;&gt; a.foo = ""hello"" # you are creating a new instance attribute
&gt;&gt;&gt; a.__class__.foo = ""goodbye"" # you are re-asisgning the value of the class attrribute
&gt;&gt;&gt; a.foo
""hello""
&gt;&gt;&gt; a.__class__.foo
""goodbye""
</code></pre>

<p>So now you can have instance attributes and class attributes with the same names. </p>
","python"
"1682",8979214,"<p>Well, I'm pretty embarrassed this is the best I have come up with so far. But maybe it will help you. Since it's not actually a circular iterator, I had to accept your test function as an argument.</p>

<p>Problems:</p>

<ul>
<li>not optimized to skip points outside the array</li>
<li>still uses a square iterator, but it does find the closest point</li>
<li>i haven't used numpy, so it's made for list of lists. the two points you need to change are commented</li>
<li>i left the square iterator in a long form so it's easier to read. it could be more DRY</li>
</ul>

<p>Here is the code. The key solution to your question is the top level ""spiral_search"" function which adds some extra logic on top of the square spiral iterator to make sure that the closest point is found.</p>

<pre><code>from math import sqrt

#constants
X = 0
Y = 1

def spiral_search(array, focus, test):
    """"""
    Search for the closest point to focus that satisfies test.
    test interface: test(point, focus, array)
    points structure: [x,y] (list, not tuple)
    returns tuple of best point [x,y] and the euclidean distance from focus
    """"""
    #stop if focus not in array
    if not _point_is_in_array(focus, array): raise IndexError(""Focus must be within the array."")
    #starting closest radius and best point
    stop_radius = None
    best_point = None 
    for point in _square_spiral(array, focus):
        #cheap stop condition: when current point is outside the stop radius
        #(don't calculate outside axis where more expensive)
        if (stop_radius) and (point[Y] == 0) and (abs(point[X] - focus[X]) &gt;= stop_radius):
            break #current best point is already as good or better so done
        #otherwise continue testing for closer solutions
        if test(point, focus, array):
            distance = _distance(focus, point)
            if (stop_radius == None) or (distance &lt; stop_radius):
                stop_radius = distance
                best_point = point
    return best_point, stop_radius

def _square_spiral(array, focus):
    yield focus
    size = len(array) * len(array[0]) #doesn't work for numpy
    count = 1
    r_square = 0
    offset = [0,0]
    rotation = 'clockwise'
    while count &lt; size:
        r_square += 1
        #left
        dimension = X
        direction = -1
        for point in _travel_dimension(array, focus, offset, dimension, direction, r_square):
            yield point
            count += 1
        #up
        dimension = Y
        direction = 1
        for point in _travel_dimension(array, focus, offset, dimension, direction, r_square):
            yield point
            count += 1
        #right
        dimension = X
        direction = 1
        for point in _travel_dimension(array, focus, offset, dimension, direction, r_square):
            yield point
            count += 1
        #down
        dimension = Y
        direction = -1
        for point in _travel_dimension(array, focus, offset, dimension, direction, r_square):
            yield point
            count += 1

def _travel_dimension(array, focus, offset, dimension, direction, r_square):
    for value in range(offset[dimension] + direction, direction*(1+r_square), direction):
        offset[dimension] = value
        point = _offset_to_point(offset, focus)
        if _point_is_in_array(point, array):
            yield point

def _distance(focus, point):
    x2 = (point[X] - focus[X])**2
    y2 = (point[Y] - focus[Y])**2
    return sqrt(x2 + y2)

def _offset_to_point(offset, focus):
    return [offset[X] + focus[X], offset[Y] + focus[Y]]

def _point_is_in_array(point, array):
    if (0 &lt;= point[X] &lt; len(array)) and (0 &lt;= point[Y] &lt; len(array[0])): #doesn't work for numpy
        return True
    else:
        return False
</code></pre>
","python"
"1683",14909459,"<p>Except from saving some code and time by using built in functions like <code>numpy.diag</code>, your problem seems to be the <code>*</code> operator. In numpy you have to use <code>numpy.dot</code> for matrix multiplication. See the code below for a working example...</p>

<pre><code>In [16]: import numpy as np

In [17]: A = np.arange(15).reshape(5,3)

In [18]: A
Out[18]: 
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11],
       [12, 13, 14]])


In [19]: u, s, v = np.linalg.svd(A)

In [20]: S = np.diag(s)

In [21]: S = np.vstack([S, np.zeros((2,3)) ])

In [22]: #fill in zeros to get the right shape

In [23]: np.allclose(A, np.dot(u, np.dot(S,v)))
Out[23]: True
</code></pre>

<p><code>numpy.allclose</code> checks whether two arrays are numerically close...</p>
","python"
"1684",4897935,"<p>First, you <em>don't need</em> any conversion if you need to <em>only</em> visualize these data: gviz can handle JSON (text-based, you know) or CSV (you already have it, no parsing required!). You can put the file in question on any reasonable web server and allow it to be accessed with fancy GET requests gviz issues, basically by ignoring the parameters.</p>

<p>But let's assume you need processing. It looks like you not only read the CSV file but also try to store it entirely in RAM. This may be impractical: you will hit RAM limit sooner and sooner as you add more processing. Process data one line at a time (or a reasonable number of lines if you apply window filters, etc) and put processed rows to the data store, not to any list, etc. Equally, when serving data via a GET request, read / process a row, write it to the response, and don't put it into any list or whatnot.</p>

<p>I see no problem with the conversion technique, as long as you use <code>i</code> reasonably later in code and don't memorize all <code>i</code>s as you go.</p>
","python"
"1685",23689728,"<p>You can use the command <code>pylab.legend</code> again with the correct keywords/arguments. This will modify the existent legend instead of creating a new one. Bellow you find your example, slightly modified.</p>

<pre><code>import pylab
pylab.plot(0,0,'ro', label = 'one point')
pylab.legend(loc = ""lower left"")
# Change the number of markers shown in the legend
pylab.legend(numpoints = 1, loc = ""lower left"")

pylab.show()
</code></pre>

<p>Hope it helps.</p>
","python"
"1686",7907252,"<p>The following selects the values related to particular record id. You can then follow the foreign keys to get the related record and key. Using <a href=""https://docs.djangoproject.com/en/dev/ref/models/querysets/#select-related"" rel=""nofollow""><code>select_related</code></a> minimises database lookups. </p>

<pre><code># Select all values related to a record in your view
record = Record.objects.get(pk=record_id)
values = Value.objects.filter(record=record).select_related()

# In your template
{% for value in values %}
{{ value.record.name }} - {{ value.key.name }} - {{ value.value }}
{% endfor %}
</code></pre>

<h1>Selecting more that one record</h1>

<p>In your sql, you had <code>WHERE record_id = 1</code>, so I showed how to get all the values for a particular record. You could also select the values for more that one record in one query.</p>

<pre><code># filter all records which belong to the project with `project_id=1`
records = Record.objects.filter(project_id=1)
# select all values that belong to these records
values = Value.objects.filter(record__in=records).select_related().order_by('record')
</code></pre>
","python"
"1687",26413185,"<p>You should be able to set it back to default by:</p>

<pre><code>import matplotlib as mpl
mpl.rcParams.update(mpl.rcParamsDefault)
</code></pre>

<p>In <code>ipython</code>, things are a little different, especially with <code>inline</code> backend:</p>

<pre><code>In [1]:

%matplotlib inline
In [2]:

import matplotlib as mpl
import matplotlib.pyplot as plt
In [3]:

inline_rc = dict(mpl.rcParams)
In [4]:

plt.plot(range(10))
Out[4]:
[&lt;matplotlib.lines.Line2D at 0x72d2510&gt;]
</code></pre>

<p><img src=""http://i.stack.imgur.com/TUIwA.png"" alt=""enter image description here""></p>

<pre><code>In [5]:

mpl.rcParams.update(mpl.rcParamsDefault)
plt.plot(range(10))
Out[5]:
[&lt;matplotlib.lines.Line2D at 0x7354730&gt;]
</code></pre>

<p><img src=""http://i.stack.imgur.com/3tWfu.png"" alt=""enter image description here""></p>

<pre><code>In [6]:

mpl.rcParams.update(inline_rc)
plt.plot(range(10))
Out[6]:
[&lt;matplotlib.lines.Line2D at 0x75a8e10&gt;] 
</code></pre>

<p><img src=""http://i.stack.imgur.com/TUIwA.png"" alt=""enter image description here""></p>

<p>Basically, <code>%matplotlib inline</code> uses its own <code>rcParams</code>. You can grab that from the source, but the arguably easier way is probably just save the <code>rcParams</code> as <code>inline_rc</code> after <code>%matplotlib inline</code> cell magic in this example, and reuse that later.</p>
","python"
"1688",38103139,"<p><code>restrict_xpaths</code> defines a region or regions where to look for the links. But you need to use <code>allow</code> instead which would check the link <code>href</code> values:</p>

<pre><code>Rule(LinkExtractor(allow=r'catalogue/'), callback='parse_page', follow=True)
</code></pre>
","python"
"1689",4533304,"<p>May be able to use PyCurl instead:</p>

<pre><code>def curl_progress(total, existing, upload_t, upload_d):
    try:
        frac = float(existing)/float(total)
    except:
        frac = 0
    print ""Downloaded %d/%d (%0.2f%%)"" % (existing, total, frac)

def curl_limit_rate(url, filename, rate_limit):
    """"""Rate limit in bytes""""""
    import pycurl
    c = pycurl.Curl()
    c.setopt(c.URL, url)
    c.setopt(c.MAX_RECV_SPEED_LARGE, rate_limit)
    if os.path.exists(filename):
        file_id = open(filename, ""ab"")
        c.setopt(c.RESUME_FROM, os.path.getsize(filename))
    else:
        file_id = open(filename, ""wb"")

    c.setopt(c.WRITEDATA, file_id)
    c.setopt(c.NOPROGRESS, 0)
    c.setopt(c.PROGRESSFUNCTION, curl_progress)
    c.perform()
</code></pre>
","python"
"1690",18041840,"<p>It can be done with slicing. Do <code>count</code> and <code>slice</code>  in terminal:</p>

<pre><code>&gt;&gt;&gt; list1=['Apple','Mango','Orange']
&gt;&gt;&gt; list2=['One','Two','Three']
&gt;&gt;&gt; list = [None]*(len(list1)+len(list2))
&gt;&gt;&gt; list[::2] = list1
&gt;&gt;&gt; list[1::2] = list2
&gt;&gt;&gt; list
</code></pre>

<p>Output:</p>

<pre><code> ['Apple', 'One', 'Mango', 'Two', 'Orange', 'Three']
</code></pre>
","python"
"1691",19774340,"<p>You can try this XPath expression:</p>

<pre><code>hxs.select('//td[@id=""contenuStory""]/descendant-or-self::*[not(self::script)]/text()').extract()
</code></pre>

<p>i.e, all children text nodes of descendants of <code>//td[@id='contenuStory']</code> that are not <code>script</code> nodes</p>

<p>To add space between the text nodes you can use something like:</p>

<pre><code>u' '.join(
    hxs.select(
        '//td[@id=""contenuStory""]/descendant-or-self::*[not(self::script)]/text()').extract()
)
</code></pre>
","python"
"1692",4302201,"<p>Here's the old-fashioned way:</p>

<pre><code>Python 2.2.3 (#42, May 30 2003, 18:12:08) [MSC 32 bit (Intel)] on win32
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; from __future__ import generators
&gt;&gt;&gt; def mychain(iterables):
...     for it in iterables:
...         for item in it:
...             yield item
...
&gt;&gt;&gt; x = iter([ xrange(0,5), xrange(5,10)])
&gt;&gt;&gt; a = mychain(x)
&gt;&gt;&gt; list(a)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt;
</code></pre>

<p>I'm not sure what the purpose or benefit of using <code>iter()</code> is, in this case:</p>

<pre><code>&gt;&gt;&gt; x = [xrange(0,5), xrange(5,10)]
&gt;&gt;&gt; a = mychain(x)
&gt;&gt;&gt; list(a)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt;
</code></pre>
","python"
"1693",1440722,"<p>If you are using python memcached client, please also make sure to increase the limit in client memcache.py file along with the memcached server. </p>

<p>~/anaconda/lib/python2.7/site-packages/memcache.py</p>

<pre><code>SERVER_MAX_KEY_LENGTH = 250 
SERVER_MAX_VALUE_LENGTH = 1024 * 1024 * 15
</code></pre>

<p>you can see in memcached console ( telnet localhost 11211 ) </p>

<blockquote>
  <p>stats slabs
      STAT 48:chunk_size 3677344</p>
</blockquote>
","python"
"1694",37840772,"<p>You need a data structure to old these informations, and defining protocols for handling this data structure.</p>

<p>For example common, well supported, data structures used in a Client/Server architecture are json(suggested)/XML you can also generate a .txt file with the result.</p>

<p>Just encode your results in python 2.x and decode them in python 3.y.</p>
","python"
"1695",18994371,"<p>One can aim to make a module that rolls streams of data based on a uri - without making it RESTful that is.</p>

<p>For example
//site.org/stream/40/</p>

<p>Theres several ways to communicate with an HTTP library like curl or requests. A basic approach would be to accept the recipient's POST data, store it in a database with a unique id and wait for a response. And you can use a javascript's xhr to find out if the response is ready. </p>

<p>All in all on the backend it should be a python module whether you use django, bottle, etc. is your call.</p>

<p>Hope that helps.</p>
","python"
"1696",3723314,"<p>A 'trie' or a 'hasmap' should do. The simplest implementation is an array of struct { char *s; int i }; pairs.</p>

<p>Check out 'trie' in 'include/nscript.h' and 'src/trie.c' here: <a href=""http://github.com/nikki93/nscript"" rel=""nofollow"">http://github.com/nikki93/nscript</a> . Change the 'trie_info' type to 'int'.</p>
","python"
"1697",34247688,"<p><code>match</code> does not have <code>group</code> attribute. Try <code>search</code> instead-</p>

<pre><code>&gt;&gt;&gt;m = re.search(r""(tenant)/(\w+)/(\w+)"", ""http://myServer:8000/api/running/tenant/sk/services"")
&gt;&gt;&gt;m.group(1)
&gt;&gt;&gt;'tenant'
&gt;&gt;&gt;m.group(2)
&gt;&gt;&gt;'sk'
&gt;&gt;&gt;m.group(3)
&gt;&gt;&gt;'services'
&gt;&gt;&gt;m.groups()
&gt;&gt;&gt;('tenant', 'sk', 'services')
</code></pre>

<p>Or try <code>re.split</code> that returns a regular list- <code>(?&lt;!\\)/(?!=\\)</code> means find <code>/</code> that does not have <code>/</code> after or before- and split the text by it-</p>

<pre><code>&gt;&gt;&gt;re.split(r""(?&lt;!\\)/(?!=\\)"", ""http://myServer:8000/api/running/tenant/sk/services"")
&gt;&gt;&gt;['http:', '', 'myServer:8000', 'api', 'running', 'tenant', 'sk', 'services']
</code></pre>
","python"
"1698",16747599,"<p>You cannot put two statements on one line like that. Your code is being evaluated like this:</p>

<pre><code>self.a = (a, self.b) = b
</code></pre>

<p>Either use a semicolon (on second thought, don't do that):</p>

<pre><code>self.a = a; self.b = b
</code></pre>

<p>Or use sequence unpacking:</p>

<pre><code>self.a, self.b = a, b
</code></pre>

<p>Or just split it into two lines:</p>

<pre><code>self.a = a
self.b = b
</code></pre>

<p>I would do it the last way.</p>
","python"
"1699",19804116,"<p>Unless you have a specific reason to use recursion, it's simpler to use <a href=""http://docs.python.org/release/2.7/library/os.html#os.walk"" rel=""nofollow"">os.walk</a> to traverse a directory structure.</p>

<pre><code>import os
import os.path as P
for topdir, subdirs, files in os.walk(starting_point):
  print ""    "" * topdir.count(P.sep), P.basename(topdir)
  for f in sorted(files):
    print ""    "" * (topdir.count(P.sep) + 1), f
</code></pre>
","python"
"1700",33222602,"<p>You can use <code>TemplateView</code> directly:</p>

<pre><code>from django.views.generic import TemplateView

...
url(r'^$', TemplateView.as_view(template_name='index.html'))
</code></pre>

<p>Remember you need to <a href=""https://docs.djangoproject.com/en/1.8/ref/settings/#template-dirs"" rel=""nofollow"">configure your templates folder</a> to call <code>.html</code> files by name only.</p>
","python"
"1701",30128375,"<p>Try density based clustering methods.
DBSCAN is one of the most popular of those.</p>

<p>I am assuming you are using python. 
Check out this:</p>

<p><a href=""http://scikit-learn.org/stable/modules/generated/sklearn.cluster.DBSCAN.html"" rel=""nofollow"">http://scikit-learn.org/stable/modules/generated/sklearn.cluster.DBSCAN.html</a></p>

<p><a href=""http://scikit-learn.org/stable/auto_examples/cluster/plot_dbscan.html"" rel=""nofollow"">http://scikit-learn.org/stable/auto_examples/cluster/plot_dbscan.html</a></p>

<p>When you cluster based on GPS lat/lon, you may want to use a different distance calculation method than DBSCAN's default. Use its <code>metric</code> parameter to use your own distance calculation function or distance matrix. For distance calculations check out <code>Haversine Formula</code>.</p>
","python"
"1702",24173743,"<p>I would suggest distinguishing between connection types when you get them; then either recording this information (i.e. conn.method = 'serial') or creating or return the appropriate connection object (e.g. SerialConnection or SocketConnection: a class that implements generic read() or write() methods and abstracts the underlying differences between methods).</p>
","python"
"1703",38279216,"<p>Use the csv reader instead. Python has a good library to handle CSV files so that it is not necessary for you to do splits.</p>

<p>Check out the documentation: <a href=""https://docs.python.org/2/library/csv.html"" rel=""nofollow"">https://docs.python.org/2/library/csv.html</a></p>

<pre><code>&gt;&gt;&gt; import csv
&gt;&gt;&gt; with open('eggs.csv', 'rb') as csvfile:
...     spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
...     for row in spamreader:
...         print ', '.join(row)
Spam, Spam, Spam, Spam, Spam, Baked Beans
Spam, Lovely Spam, Wonderful Spam
</code></pre>

<p>It should perform much faster.</p>
","python"
"1704",29577279,"<p>On site <a href=""http://regex101.com/#python"" rel=""nofollow"">regex101.com/#python</a> type <code>g</code> in the right box near your expression. This box is called modifier. And as others mention in comments   use <code>re.findall(pattern, your_string)</code> in python. Notice also that you are actually looking for two substrings - you have two pairs of braces in your regexp.</p>
","python"
"1705",12958702,"<p><code>ModelResource</code> is only suitable when you have ORM Model behind the resource. In other cases you should use <code>Resource</code>.</p>

<p>This subject is discussed in <code>ModelResource</code> description, mentioning when it is suitable and when it is not: <a href=""http://django-tastypie.readthedocs.org/en/latest/resources.html#why-resource-vs-modelresource"">http://django-tastypie.readthedocs.org/en/latest/resources.html#why-resource-vs-modelresource</a></p>

<p>Also there is a whole chapter in the documentation, aimed at providing the details on how to implement non-ORM data sources (in this case: external API): <a href=""http://django-tastypie.readthedocs.org/en/latest/non_orm_data_sources.html"">http://django-tastypie.readthedocs.org/en/latest/non_orm_data_sources.html</a></p>
","python"
"1706",31927201,"<p>I would suggest you to use <code>atexit</code> module to this stuff.
Just put this line in <code>__init__</code> and in case any python process termination a connection will be close </p>

<pre><code>atexit.register(self.close) 
</code></pre>
","python"
"1707",35604033,"<p>I will not refer to you code as I think your question is a xy-question. (<a href=""http://xyproblem.info"" rel=""nofollow"">http://xyproblem.info</a>), But I will try to answer in a more generic way. What I am reading is that you are asking how to correctly close down an asyncio application.</p>

<p>I have set up a small example that I think with some explanation will get you on the right track. Read the code below, my hope is that it can relate to your use case and I will explain below.</p>

<pre><code>import asyncio
import signal

loop = asyncio.get_event_loop()


class Connector:

    def __init__(self):
        self.closing = False
        self.closed = asyncio.Future()
        task = loop.create_task(self.connection_with_client())
        task.add_done_callback(self.closed.set_result)


    async def connection_with_client(self):
        while not self.closing:
            print('Read/write to open connection')
            await asyncio.sleep(1)

        print('I will now close connection')
        await asyncio.sleep(1)


conn = Connector()


def stop(loop):
    conn.closing = True
    print(""from here I will wait until connection_with_client has finished"")
    conn.closed.add_done_callback(lambda _: loop.stop())

loop.add_signal_handler(signal.SIGINT, stop, loop)
loop.run_forever()
loop.close()
</code></pre>

<p>What you are asking for is actually not trivial, one of the hardest things to manage doing asyncio is correctly closing an asyncio application.</p>

<p>To do managed closing you have to have a coroutine in place that will handle shutdown and set af future as done, when it has made sure that everything is shutdown. In my example it is <code>task.add_done_callback(self.closed.set_result)</code> but this future could be set in other ways.</p>

<p>Second, you have to add a signal handler that will run a non-asynchronously (normal) function and schedule a callback, that triggers the loop to close/stop when your 'close future' is done.</p>

<p>Take a look at my code and toy around with it until you understand the flow. I dont blame you for asking, in my opinion one of the hardest things doing asyncio is to keep track of 'loose' coroutines, that will result in unclean shutdown.</p>

<p>When I did this 'exercise' my first time and needed to understand the principles I went though the code of <a href=""https://github.com/aio-libs/aioredis/blob/master/aioredis/connection.py#L93-L95"" rel=""nofollow"">https://github.com/aio-libs/aioredis/blob/master/aioredis/connection.py#L93-L95</a>
If you take the time to read the code these guys handle your exact problem in a very beautiful way, I know the code is a but complex, but take a mug of coffee and follow the method calls around until it makes sense.</p>

<p>I hope this helps you, post more details or comments if I am unclear. And take you time to understand this topic (the asycnio shutdown things). When you master shutdown management with asyncio you are not a asyncio-padawan anymore ;)</p>

<p>You may think, Thats alot of code to shutdown clean, but to my understanding, this is the way to do it(and more or less the only way for bigger and more complex applications).</p>

<p>Best of luck.</p>
","python"
"1708",4180566,"<p>It looks like you are occasionally <em>not</em> setting <code>mWEIGHT</code>.  How about changing</p>

<pre><code>for result in RESULTS:
        self.response.out.write(""mUNIQUE: &lt;b&gt;%s&lt;/b&gt; | ""
                                ""mWEIGHT: %f | ""  
                                ""mCOUNT: %s | &lt;br /&gt;""  
                             % (result.mUNIQUE, 
                                result.mWEIGHT,  
                                result.mCOUNT,
                                )) 
</code></pre>

<p>to</p>

<pre><code>for result in RESULTS:
        self.response.out.write(""mUNIQUE: &lt;b&gt;%s&lt;/b&gt; | ""
                                ""mWEIGHT: %f | ""  
                                ""mCOUNT: %s | &lt;br /&gt;""  
                             % (result.mUNIQUE, 
                                result.mWEIGHT if result.mWEIGHT is not None else 0.0,  
                                result.mCOUNT,
                                )) 
</code></pre>
","python"
"1709",22929940,"<p>You <strong>must</strong> write row by row, not column by column. I think this should do it:</p>

<pre><code>    for row in rows:
        writer.writerow([row.get(""one"", """"), row.get(""two"", """")])
</code></pre>
","python"
"1710",26719581,"<p>You probably want the <a href=""https://docs.python.org/2/library/functions.html#enumerate"" rel=""nofollow"">enumerate</a> function, which counts how many times you have been round the loop:</p>

<pre><code>for (count, rect) in enumerate(rects):

     ...
     suffix = suffix[count]
     ...
</code></pre>

<p>This will give you <code>suffix[0]</code> for the first <code>rect</code>, <code>suffix[1]</code> for the second, and so on.</p>
","python"
"1711",24537025,"<p>You can get the same result without the explicit dimension adding for broadcasting by using the <code>.outer</code> method of ufuncs. For example:</p>

<pre><code>&gt;&gt;&gt; np.subtract.outer([1, 2], [3, 4, 5])
array([[-2, -3, -4],
       [-1, -2, -3]])
</code></pre>

<p>It has the added benefit of accepting any iterable as input, you don't need to first convert them to arrays.</p>
","python"
"1712",25555218,"<p>It is because <code>line.rstrip()</code> returns a copy of the original string (see <a href=""https://docs.python.org/2/library/string.html"" rel=""nofollow"">docs</a>).</p>

<p>So something like <code>line = line.rstrip()</code> should do the job.</p>
","python"
"1713",20625579,"<p>You can assign the last element to a variable, using <code>star operation</code>.</p>

<pre><code>&gt;&gt;&gt; a={""fatih""}
&gt;&gt;&gt; b=str(*a)
&gt;&gt;&gt; b
'fatih'
</code></pre>

<p>Now the varible <code>b</code> have a <code>string object</code>.</p>

<p>If the sole elemant is a number, you could use <code>int()</code>:</p>

<pre><code>&gt;&gt;&gt; a={1}
&gt;&gt;&gt; c=int(*a)
&gt;&gt;&gt; c
1
</code></pre>
","python"
"1714",37037805,"<p>Just for the sake of confession: I know nothing about Julia sets nor matplotlib.</p>

<p>pyplot seems an odd choice due to its low resolution and the fact that colors can't be specified as a vector alongside X &amp; Y.  And had it worked as written, <code>'bo'</code> would have produced just a grid of blue circles.</p>

<p>Your first <code>while True:</code> loop isn't needed as you've picked what you believe to be a viable <code>c</code>.</p>

<p>Here's my rework of your code:</p>

<pre><code>import matplotlib.pyplot as plt

c = complex(1.5, -0.6)

# image size
img_x = 100
img_y = 100

# drawing area
xi = -1.24
xf = 1.4
yi = -2.9
yf = 2.1

iterations = 8 # maximum iterations allowed (maps to 8 shades of gray)

# the loop for the julia set

results = {}  # pyplot speed optimization to plot all same gray at once

for y in range(img_y):
    zy = y * (yf - yi) / (img_y - 1)  + yi
    for x in range(img_x):
        zx = x * (xf - xi) / (img_x - 1)  + xi
        z = zx + zy * 1j
        for i in range(iterations):
            if abs(z) &gt; 2:
                break
            z = z * z + c
        if i not in results:
            results[i] = [[], []]
        results[i][0].append(x)
        results[i][1].append(y)

for i, (xli, yli) in results.items():
    gray = 1.0 - i / iterations
    plt.plot(xli, yli, '.', color=(gray, gray, gray))

plt.show()      
</code></pre>

<p><strong>OUTPUT</strong></p>

<p><a href=""http://i.stack.imgur.com/f9z0s.png"" rel=""nofollow""><img src=""http://i.stack.imgur.com/f9z0s.png"" alt=""enter image description here""></a></p>
","python"
"1715",36810554,"<p>If your original structure is called <code>ips</code>, you can get json you need with</p>

<pre><code>ips = [('157.55.39.64', 4), ('188.165.15.192', 2), ('1.165.15.192', 1)]
json.dumps([{""ip"": ip[0], ""times"": ip[1]} for ip in ips])
</code></pre>

<p>Output will be</p>

<pre><code>[
    {
        ""ip"": ""157.55.39.64"",
        ""times"": 4
    },
    {
        ""ip"": ""188.165.15.192"",
        ""times"": 2
    },
    {
        ""ip"": ""1.165.15.192"",
        ""times"": 1
    }
]
</code></pre>
","python"
"1716",34424691,"<p><strong>Any nonzero scalar multiple of an eigenvector is an eigenvector</strong>. This thus also includes vectors of the form <em>v = -n * w</em>, <em>n</em> in R \ {0} and <em>w</em> an eigenvector.</p>
","python"
"1717",5871111,"<p>Put your dict words in a set which has a constant lookup time. </p>

<pre><code>myDict = set([&lt;actual list of words here&gt;])
for word in file:
    if word not in myDict:
        handleBadWord(word)
</code></pre>
","python"
"1718",31920403,"<p>Do this:</p>

<pre><code>&gt;&gt;&gt; open('foo.txt','wb').write(a.tostring())
</code></pre>
","python"
"1719",34513967,"<p>You can use <code>str.translate</code> to remove the digits:</p>

<pre><code>l = [[[u'HH2', u'AH0', u'L', u'OW1'], [u'HH', u'EH0', u'L', u'OW1']]]

tbl = {ord(d): u"""" for d in u""0123456789""}
for sub in l:
    sub[:] = [[s.translate(tbl) for s in w] for w in sub]
</code></pre>

<p>Output:</p>

<pre><code>[[[u'HH', u'AH', u'L', u'OW'], [u'HH', u'EH', u'L', u'OW']]]
</code></pre>

<p>If you want it for arbitrary nesting:</p>

<pre><code>l = [[[u'HH2', u'AH0', u'L', u'OW1'], [u'HH', u'EH0', u'L', u'OW1']]]

def rem_d(l, tbl):
    if isinstance(l, list):
        return [rem_d(ele, tbl) for ele in l]
    return l.translate(tbl)



tbl = {ord(d): u"""" for d in u""0123456789""}


print(list(rem_d(l, tbl)))
</code></pre>

<p>output:</p>

<pre><code>[[[u'HH', u'AH', u'L', u'OW'], [u'HH', u'EH', u'L', u'OW']]]
</code></pre>

<p>translate will be a lot faster than iterating over every digit:</p>

<pre><code>In [13]: l = [[[u'HH2', u'AH0', u'L', u'OW1'], [u'HH', u'EH0', u'L', u'OW1']]]

In [14]: l = [l[0] for _ in range(100000)]

In [15]: timeit rem_d(l, tbl)
1 loops, best of 3: 777 ms per loop

In [16]: timeit remove_digits(l)
1 loops, best of 3: 1.83 s per loop
In [17]: remove_digits(l) == rem_d(l,tbl)
Out[17]: True
</code></pre>
","python"
"1720",36364183,"<p>Here is a numpy solution (given that you used it for loading the data):</p>

<pre><code>import numpy as np

data_file_name = 'whatever.dat'
data = np.loadtxt(data_file_name, 
                  skiprows=1, 
                  dtype=[('x', float), ('y', float), ('z', float)])

data.sort(axis=0, order=['x', 'y', 'z'])

unique_x_col_vals = set(row[0] for row in data)
array = {n: [list(row) for row in data if row[0] == val] 
            for n, val in enumerate(unique_x_col_vals)}

&gt;&gt;&gt; array
{0: [[1.0, 3.0, 67.0], [1.0, 3.0, 83.0], [1.0, 4.0, 83.0]],
 1: [[2.0, 4.0, 38.0]],
 2: [[3.0, 87.0, 93.0]],
 3: [[4.0, 1.0, 73.0]],
 4: [[8.0, 1.0, 98.0], [8.0, 2.0, 47.0]],
 5: [[9.0, 3.0, 93.0], [9.0, 9.0, 18.0]]}
</code></pre>

<p>It uses a dictionary comprehension to generate the array, internally using a list comprehension to extract each row for the unique values based on column <code>x</code>.</p>

<p>I've used floats when importing the data, but you can also specify int if that matches your data.</p>
","python"
"1721",30802091,"<p>You state all links you're interested in have the following format:</p>

<p><code>mobiles/samsung~brand/pr?sid=tyy,4io</code></p>

<p>And in your code there is the following regex:</p>

<p><code>/^([a-z]+)(\/[a-z]{7})(\/[a-z0-9~]+)(\/[a-z\?=0-9,]+)$/</code></p>

<p>Please check at <a href=""https://regex101.com"" rel=""nofollow"">regex101.com</a> your regex and you'll see that it does not match the example you provided.</p>

<p>Maybe the following regex does fit your need better: <code>'sid=tyy,4io'</code>. At least the spider will crawl the pages (as far as I have tested it).</p>

<p>p.s.: besides the not matching regex there are other problems/errors in your code. First to mention the <code>for titles in titles:</code> loop. This error appears quite often in scrapy beginner scripts that are posted on this site. I wonder where all these people get that very same error prone code? So - would you mind to share where you got that part of the code? If we know the source maybe we can correct it.</p>

<p>EDIT (added some code):</p>

<pre><code>import scrapy
from scrapy.contrib.spiders import Rule, CrawlSpider
from scrapy.contrib.linkextractors import LinkExtractor

from scrapy.contrib.loader import ItemLoader
from scrapy.contrib.loader.processor import TakeFirst, MapCompose, Join
from scrapy.utils.markup import replace_escape_chars

class FlipkartItem(scrapy.Item):
    brand = scrapy.Field()
    model = scrapy.Field()
    price = scrapy.Field()
    description = scrapy.Field()

class FlipkartSpider(CrawlSpider):

    name = ""flipkart""
    allowed_domains = [""www.flipkart.com""] # filtered offsite request
    start_urls = [""http://www.flipkart.com/mobiles""]
    rules = (
        Rule(
            LinkExtractor(allow ='sid=tyy,4io'),
            callback = 'parse_item',
            follow=True),
    )

    def parse_item(self, response):

        products = response.xpath('//div[contains(@class,""product-unit"")]')
        for product in products:
            l = ItemLoader(FlipkartItem(), product)
            l.default_input_processor = MapCompose(lambda v: v.split(), replace_escape_chars)
            l.default_output_processor = Join()

            l.add_xpath('model', './/div[contains(@class,""pu-title"")]//text()')
            l.add_xpath('price', './/div[contains(@class,""pu-price"")]//text()')
            l.add_xpath('description', './/ul[contains(@class,""pu-usp"")]//text()')
            yield l.load_item()
</code></pre>
","python"
"1722",28289163,"<p>Your (worst case) time complexity is <code>O(len(string) * len(set))</code>.  Yes you can do better (at least from an algorithms perspective).</p>

<pre><code>def find_set(string, chars):
    schars = set(chars)
    return next((i for i, c in enumerate(string) if c in schars), -1)
</code></pre>

<p>This should execute in <code>O(len(chars) + len(string))</code> (worst case).  Of course, when it comes to ""optimization"", usually you should forget what you think you know and profile.  Just because mine has better algorithmic complexity doesn't mean that it will perform better on <em>your</em> real world data.</p>
","python"
"1723",16756699,"<p>In fact your code amounts to comparing objects id (i.e. their physical address). So instead of your is comparison:</p>

<pre><code>&gt;&gt;&gt; b = 'is it the space?'
&gt;&gt;&gt; a = 'is it the space?'
&gt;&gt;&gt; a is b
False
</code></pre>

<p>You can do:</p>

<pre><code>&gt;&gt;&gt; id(a) == id(b)
False
</code></pre>

<p>But, note that if a and b were directly in the comparison it would work.</p>

<pre><code>&gt;&gt;&gt; id('is it the space?') == id('is it the space?')
True
</code></pre>

<p>In fact, in an expression there's sharing between the same static strings. But, at the program scale there's only sharing for word-like strings (so neither spaces nor punctuations).</p>

<p>You should not rely on this behavior as it's not documented anywhere and is a detail of implementation.</p>
","python"
"1724",28868973,"<p>In <code>a()</code>, you are re-declaring <code>saber</code> locally, and so it references a local variable and not the global that you declared in the beginning of your code. See <a href=""https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python"" rel=""nofollow"">this documentation</a> for more information. The solution is to declare <code>saber</code> global at the beginning of <code>a()</code>:</p>

<pre><code>def a():
    global saber
    saber = 'ex'
    rider['a'] = 'b' 
    print saber
    print rider
</code></pre>
","python"
"1725",32181514,"<p><code>Time.Sleep()</code> is counting time in milliseconds, therefore Time.Sleep(2) is 2 milliseconds, maybe if you try, </p>

<pre><code>Time.Sleep(2000);  
</code></pre>

<p>it may work for you.</p>
","python"
"1726",5104356,"<p>""Nested function"" refers to the fact that it's declared inside another function, not that it's a lambda. Declare your <code>open</code> override at the top level of your module and it should work the way you want.</p>

<p>Also, I don't think this is totally safe. Preventing <code>open</code> is just one of the things you need to worry about if you want to sandbox Python.</p>
","python"
"1727",30132168,"<p>There are all kinds of other problems in your code, but since I already explained them on your other question, I won't get into them here.</p>

<p>The new problem is that you're not <code>join</code>ing your child processes. In your threaded version, this wasn't an issue just because your main thread accidentally had a ""block forever"" before the end. But here, you don't have that, so the main process reaches the end of the script while the background processes are still running.</p>

<p>When this happens, it's not entirely defined what your code will do.<sup>*</sup> But basically, you're destroying the manager object, which shuts down the manager server while the background processes are still using it, so they're going to raise exceptions the next time they try to access a managed object.</p>

<p>The solution is to add <code>p1.join()</code> and <code>p2.join()</code> to the end of your script.</p>

<p>But that really only gets you back to the same situation as your threaded code (except not blocking forever at the end). You've still got code that's completely serialized, and a big race condition, and so on.</p>

<hr>

<p>If you're curious why this happens:</p>

<p>At the end of the script, all of your module's globals go out of scope.<sup>**</sup> Since those variables are the only reference you have to the manager and process objects, those objects get garbage-collected, and their destructors get called.</p>

<p>For a manager object, the destructor shuts down the server.</p>

<p>For a process object, I'm not entirely sure, but I think the destructor does <em>nothing</em> (rather than join it and/or interrupt it). Instead, there's an atexit function, that runs after all of the destructors, that joins any still-running processes.<sup>***</sup></p>

<p>So, first the manager goes away, then the main process starts waiting for the children to finish; the next time each one tries to access a managed object, it fails and exits. Once all of them do that, the main process finishes waiting and exits.</p>

<hr>

<p><sub>* The <code>multiprocessing</code> changes in 3.2 and the shutdown changes in 3.4 make things a lot cleaner, so if we weren't talking about 2.7, there would be less ""here's what usually happens but not always"" and ""here's what happens in one particular implementation on one particular platform"".</sub></p>

<p><sub>** This isn't actually guaranteed by 2.7, and garbage-collecting all of the modules' globals doesn't always happen. But in this particular simple case, I'm <em>pretty</em> sure it <em>will</em> always work this way, at least in CPython, although I don't want to try to explain why.</sub></p>

<p><sub>*** That's definitely how it works with threads, at least on CPython 2.7 on Unix… again, this isn't at all documented in 2.x, so you can only tell by reading the source or experimenting on the platforms/implementations/versions that matter to you… And I don't want to track this through the source unless there's likely to be something puzzling or interesting to find.</sub></p>
","python"
"1728",19082506,"<p>Instead of <em>continue</em>, try using <em>break</em>. It will end the loop instead of continuing its execution.
Also, the <em>else: pass</em> part is redundant.</p>
","python"
"1729",27760584,"<p>Timings for (5000,3000) arrays are:</p>

<pre><code>In [107]: timeit np.where(boolvec[:,None],b,a)
1 loops, best of 3: 993 ms per loop

In [108]: timeit np.choose(boolvec[:,None],[a,b])
1 loops, best of 3: 929 ms per loop

In [109]: timeit c=a[:];c[boolvec,:]=b[boolvec,:]
1 loops, best of 3: 786 ms per loop
</code></pre>

<p><code>where</code> and <code>choose</code> are essentially the same; boolean indexing slightly faster.  <code>select</code> uses <code>choose</code>, so I didn't time it.</p>

<hr>

<p>My timings for column sampling are similar, except this time the indexing is slower:</p>

<pre><code>In [119]: timeit np.where(cols,b,a)
1 loops, best of 3: 878 ms per loop

In [120]: timeit np.choose(cols,[a,b])
1 loops, best of 3: 915 ms per loop

In [121]: timeit c=a[:];c[:,cols]=b[:,cols]
1 loops, best of 3: 1.25 s per loop
</code></pre>

<p>Correction, for the indexing I should be using <code>a.copy()</code>.</p>

<pre><code>In [32]: timeit c=a.copy();c[boolvec,:]=b[boolvec,:]
1 loops, best of 3: 783 ms per loop
In [33]: timeit c=a.copy();c[:,cols]=b[:,cols]
1 loops, best of 3: 1.44 s per loop
</code></pre>

<p>I get the same timings for Python2.7 and 3, numpy 1.8.2 and 1.9.0 dev</p>
","python"
"1730",12523189,"<p>One option is to change your function so that it optionally accepts the function to call e.g. if you have:</p>

<pre><code>def fn_to_test():
  def inner_fn():
    return 1
  return inner_fn() + 3
</code></pre>

<p>Change it to:</p>

<pre><code>def fn_to_test( inner_fn = null )
  def inner_fn_orig():
    return 1
  if inner_fn==null:
    inner_fn = inner_fn_orig
  return fn() + 3
</code></pre>

<p>Then ""real"" uses will get the right inner function, and in your tests you can provide your own.</p>

<pre><code>fn_to_test() # calls the real inner function
def my_inner_fn():
  return 3
fn_to_test( inner_fn=my_inner_fn ) # calls the new version
</code></pre>

<p>You could also do this:</p>

<pre><code>def fn_to_test():
  def inner_fn_orign():
    return 1
  inner_fn = inner_fn_orig
  try:
    inner_fn = fn_to_test.inner_fn
  excecpt AttributeError:
    pass
  return inner_fn() + 3
</code></pre>

<p>This way you just define the override:</p>

<pre><code>fn_to_test() # calls the real inner function
def my_inner_fn():
  return 3
fn_to_test.inner_fn = my_inner_fn
fn_to_test() # calls the new version
</code></pre>
","python"
"1731",4443786,"<p>Nope, Tk doesn't include a date picker widget.  There are a couple of Python calendar widgets you could try:</p>

<p><a href=""http://svn.python.org/projects/sandbox/trunk/ttk-gsoc/samples/ttkcalendar.py"">http://svn.python.org/projects/sandbox/trunk/ttk-gsoc/samples/ttkcalendar.py</a></p>

<p><a href=""http://effbot.org/zone/wcklib-calendar.htm"">http://effbot.org/zone/wcklib-calendar.htm</a></p>
","python"
"1732",3644113,"<p>If you change the override redirect flag you need to withdraw and then deiconify the window to give the window manager a chance to make the change. You might try that.</p>

<p>Also, when you say ""close out"" the option menu top-level, what exactly do you mean? Are you sure destroying this second top-level window?</p>
","python"
"1733",17602076,"<p><a href=""http://docs.scipy.org/doc/scipy/reference/tutorial/integrate.html"">Scipy has some nice tools to perform numerical integration.</a></p>

<p>For example, you can use <code>scipy.integrate.simps</code> to perform simpson's Rule, and you can pass it the following:</p>

<blockquote>
  <p>scipy.integrate.simps(y, x=None, dx=1, axis=-1, even='avg')</p>
  
  <p>Parameters :<br>
  y : array_like
  Array to be integrated.</p>
  
  <p>x : array_like, optional
  If given, the points at which y is sampled.</p>
  
  <p>dx : int, optional
  Spacing of integration points along axis of y. Only used when x is None. Default is 1.</p>
  
  <p>axis : int, optional
  Axis along which to integrate. Default is the last axis.</p>
  
  <p>even : {‘avg’, ‘first’, ‘str’}, optional</p>
  
  <p>‘avg’ : Average two results:1) use the first N-2 intervals with
  a trapezoidal rule on the last interval and 2) use the last N-2 intervals with a trapezoidal rule on the first interval.</p>
  
  <p>‘first’ : Use Simpson’s rule for the first N-2 intervals with
  a trapezoidal rule on the last interval.</p>
  
  <p>‘last’ : Use Simpson’s rule for the last N-2 intervals with a
  trapezoidal rule on the first interval.</p>
</blockquote>

<p>So you can use your two arrays to do numerical integration.</p>
","python"
"1734",36118708,"<p>If they are always separated by a space then you could replace <code>line[0:3]</code> with <code>line.partition(' ')[0]</code></p>
","python"
"1735",17455569,"<p>In the template unsub.html rendering the form with the button, you should pass the url of your view using the reverse method</p>

<pre><code>
     from django.code.urlresolvers import reverse


     def unsub_view(request, viewid):
         if request.method == 'POST':
            if user_is_subscribed:
                #Unsubscribe the user.
                submit_url = reverse('unsub_view', viewid)
                return direct_to_template(request, '/app/unsub.html', {'user': user, 'submit_url'})
            else:
                #Show error meessage.

</code></pre>

<p>in your template you can then render the form like follows :</p>

<pre><code>...
&lt;form method='post' action='{{ submit_url }}'&gt;
     {% csrf_token %}
     &lt;input type=""hidden"" value=""{{ user_id }}"" name=""user_id"" /&gt;
     &lt;input type=""submit"" value=""unsubscribe""/&gt;
&lt;/form&gt;
...
</code></pre>

<p>Django also has a full framework dedicated to form modeling and rendering. You could take advantage of that to generate the form.</p>
","python"
"1736",15580575,"<p>If you're already using <code>numpy</code>, use its strided or sparse arrays, as Jaime explained.</p>

<p>If you're <em>not</em> already using <code>numpy</code>, you may to strongly consider using it.</p>

<p>If you need to stick with pure Python, there are three obvious ways to do this, depending on your use case.</p>

<p>For strided or sparse-but-clustered arrays, you could do effectively the same thing as <code>numpy</code>.</p>

<p>Or you could use a simple run-length-encoding scheme, plus maybe a higher-level list of runs for, or list of pointers to every Nth element, or even a whole stack of such lists (one for every 100 elements, one for every 10000, etc.).</p>

<p>But for mostly-uniformly-dense arrays, the easiest thing is to simply store a <code>dict</code> or <code>defaultdict</code> mapping indices to values. Random-access lookups or updates are still O(1)—albeit with a higher constant factor—and the storage you waste storing (in effect) a hash, key, and value instead of just a value for each non-default element is more than made up for by not storing values for the default elements, as long as you're less than 0.33 density.</p>
","python"
"1737",3553340,"<p>I don't know how to do it any more accurately than with <a href=""http://docs.python.org/library/threading.html#timer-objects"" rel=""nofollow"">threading.Timer</a>.  It's ""one-shot"", but that just means the function you schedule that way must immediately re-schedule itself for another 300 seconds later, first thing.  (You can add accuracy by measuring the exact time with <code>time.time</code> each time and varying the next scheduling delay accordingly).</p>
","python"
"1738",10260828,"<ul>
<li>you say the problem is from a client hitting a particular url (reproducible?)</li>
<li>since it works for you with gunicorn but not django-on-twisted, either the script is not working properly or <code>twisted.web2</code> is the issue.</li>
</ul>

<p>please try <code>$ sh init.sh yourdjangoproject stand</code>.</p>

<p>you can also try to modify <code>run.py</code> to catch <code>SystemExit</code>:</p>

<pre><code>import pdb
try:
   # __main__ stuff here.
except (KeyboardInterrupt, SystemExit):
   pdb.set_trace()
</code></pre>
","python"
"1739",8151044,"<p>Where did you see anything recommending the use of google.appengine.ext.key_range.simplejson? That is only available because the key_range package happens to import simplejson. Don't use it like that.</p>
","python"
"1740",32001389,"<p>In python 2.x version , you can use urllib2 to fetch the contents. You can invoke the add headers function to add the header information. Then invoke the open method and read the contents. Finally print them.</p>

<pre><code>import urllib2
import sys

print sys.version
url = urllib2.build_opener()
url.addheaders = [('User-agent', 'Mozilla/5.0(Windows NT 6.1; WOW64; rv:23.0)Gecko/20100101 Firefox/23.0')]
print url.open('http://hkticketing.com.hk').read()
</code></pre>
","python"
"1741",19248234,"<p>If you sort column 'a' first then you don't need to sort the 'bins' column</p>

<pre><code>import pandas as pd
import numpy as np
df = pd.DataFrame({""a"": np.random.randn(10)})
df.sort(columns=['a'],inplace=True)
# bin according to cut
df[""bins""] = pd.cut(df.a, np.linspace(-2,2,6))
df

Out[37]:
          a          bins
6 -1.273335    (-2, -1.2]
7 -0.604780  (-1.2, -0.4]
1 -0.467994  (-1.2, -0.4]
8  0.028114   (-0.4, 0.4]
9  0.032250   (-0.4, 0.4]
3  0.138368   (-0.4, 0.4]
0  0.541577    (0.4, 1.2]
5  0.838290    (0.4, 1.2]
2  1.171387    (0.4, 1.2]
4  1.770752      (1.2, 2]
</code></pre>
","python"
"1742",36878987,"<p>in this line</p>

<pre><code>uncommon = [n for n, v in enumerate(fle) if v != most_common_length]
</code></pre>

<p>You are effectively comparing each word in the array against 'hello' rather than comparing the length of the word with the length of the most common word. it should be</p>

<pre><code>uncommon = [n for n, v in enumerate(fle) if len(v) != mcl]
</code></pre>

<p>Then the output will be [5,7] which tells you that the words at index 5 and 7 have uncommon length.</p>
","python"
"1743",35678634,"<p>There are two major differences between the caesar cipher brute force solver you already have and what you'll need to write to brute force an affine cipher.</p>

<p>The first change is that the key for an affine cipher is two integers (often named <code>a</code> and <code>b</code>) rather than just a single value in a caesar cipher. (An affine cipher with <code>a</code> equal to <code>1</code> is equivalent to a casear cipher with key <code>b</code>.) The value used as <code>a</code> must be coprime with the length of the alphabet, which for the 26 lowercase letters means it must be an odd number between 1 and 25 (inclusive) other than 13. The <code>b</code> value is just like the key to a caesar cipher, so any integer works, though since the cipher's computation uses modular arithmetic, values that differ by a multiple of the alphabet length are equivalent. I'd stick to values between 0 and 25 for your code that operates on lowercase letters. Your brute force code will need to generate both parts of the keys (probably with nested loops, though <code>itertools.product</code> could work too).</p>

<p>The second change is that reversing encryption to get decryption is more complicated with an affine cypher. While a caesar cipher's decrpytion key is simply the encryption key negated, figuring out the decryption version an affine cypher's key requires more computation. If you encrypt with the key (<code>a</code>, <code>b</code>), you want to decrypt with the key (<code>a</code><sup>-1</sup>, <code>-b</code>*<code>a</code><sup>-1</sup>), where <code>a</code><sup>-1</sup> is the <a href=""https://en.wikipedia.org/wiki/Modular_multiplicative_inverse"" rel=""nofollow"">modular multiplicative inverse</a> of <code>a</code> with respect to the alphabet size. You'll probably want to write code to compute such inverses for your solver, though you could just brute force the decryption key and not care about the encryption key that was used originally if you want.</p>
","python"
"1744",4620547,"<p>Sorry but i didn't understand well the real time part, but maybe i can help with ""update it self"" part, try this:</p>

<pre><code>for line in iter(p.stdout.readline, """"):
   print line + '\r',
</code></pre>
","python"
"1745",16722309,"<p>The <code>u</code> means <em>unicode</em>. It's Python's internal string representation (from version ... ?). </p>

<p>Most times you don't need to worry about it. (Until you do.)</p>
","python"
"1746",35186417,"<p>Just use what @ahmed-hosny mentioned in comments:<br>
<code>from app1.models import PrivateClient</code><br>
Please always reply to comments, answer your question (if nobody else did) and mark it as answered. Thanks.</p>
","python"
"1747",35176639,"<p>If I understood well,
The quickest way to determine if two images have exactly the same contents is to get the difference between the two images, and then calculate the bounding box of the non-zero regions in this image. If the images are identical, all pixels in the difference image are zero, and the bounding box function returns None.</p>

<pre><code>import ImageChops
def equal(im1, im2):
  return ImageChops.difference(im1, im2).getbbox() is None
</code></pre>

<p>To get a measure of how similar two images are, you can calculate the root-mean-square (RMS) value of the difference between the images. If the images are exactly identical, this value is zero. The following function uses the difference function, and then calculates the RMS value from the histogram of the resulting image.</p>

<pre><code># Example: File: imagediff.py

import ImageChops
import math, operator

def rmsdiff(im1, im2):
    ""Calculate the root-mean-square difference between two images""

    h = ImageChops.difference(im1, im2).histogram()

    # calculate rms
    return math.sqrt(reduce(operator.add, map(lambda h, i: h*(i**2), h, range(256))) / (float(im1.size[0]) * im1.size[1]))
</code></pre>
","python"
"1748",27279941,"<p>The easiest thing to do seems to be to still use <code>random</code> which is a <strong>pseudo</strong>-random number generator and <strong>seed</strong> it with the given string:</p>

<pre><code>random.shuffle(x, random.seed(""testtest12""))
</code></pre>

<p>where <code>x</code> is the list. This will shuffle the list based on the seed ""testtest12"", i.e. it will always generate the same shuffled list depending on the input.</p>

<p>So this seems to work:</p>

<pre><code>import random
from random import shuffle
x = [[i] for i in range(0, 255)]
shuffle(x, random.seed(""testtest12""))
print x
</code></pre>

<p>Note that Python uses the Mersenne twister as default random number generator, and the Mersenne twister is not cryptographically secure. If you want to have a truly cryptographically secure random number generator you need to use one of the DRBG's defined in NIST SP800-90A and a large enough seed.</p>
","python"
"1749",27428216,"<p>as you store request.POST data, it's not an integer but a string
try to coerce to int:</p>

<pre><code>try:
     if r.mysize &lt;= int(request.session['mysize']): 
       #do this
     else:
       #do else
except ValueError:
     # do else ?
</code></pre>
","python"
"1750",33334907,"<p>If you also want spaces to be allowed too, your regex should be:
<code>'^[a-zA-Z ]+$'</code></p>
","python"
"1751",53513,"<p>I prefer the following:</p>

<pre><code>if a == []:
   print ""The list is empty.""
</code></pre>

<p>Readable and you don't have to worry about calling a function like <code>len()</code> to iterate through the variable. Although I'm not entirely sure what the BigO notation of something like this is... but Python's so blazingly fast I doubt it'd matter unless <code>a</code> was gigantic.</p>
","python"
"1752",12881764,"<p>You can't sort a dictionary due to the nature of this kind of collections. Although Python gives you several options: either use <code>OrderedDict</code> (to keep the order of inserted key/value pairs), or just sort the keys, e.g.::</p>

<pre><code>ages = {40 : 'mother', 38 : 'father', 17 : 'me'}
ages_sorted = sorted(ages) 
# or ages.iterkeys() / .keys() (in Py3) which is a bit self-explanatory. 
</code></pre>
","python"
"1753",16938441,"<p>It's probably easiest to use a groupby (assuming they have duplicate names too):</p>

<pre><code>In [11]: df
Out[11]:
   A  B  B
0  a  4  4
1  b  4  4
2  c  4  4

In [12]: df.T.groupby(level=0).first().T
Out[12]:
   A  B
0  a  4
1  b  4
2  c  4
</code></pre>

<p>If they have different <em>names</em> you can <code>drop_duplicates</code> on the transpose:</p>

<pre><code>In [21]: df
Out[21]:
   A  B  C
0  a  4  4
1  b  4  4
2  c  4  4

In [22]: df.T.drop_duplicates().T
Out[22]:
   A  B
0  a  4
1  b  4
2  c  4
</code></pre>

<p><em>Usually <code>read_csv</code> will usually ensure they have different names...</em></p>
","python"
"1754",29182816,"<p>There are probably lots of ways to do it, depending on what you mean by ""best approach in python"". This is one of them:</p>

<pre><code>for i in myListOfLists:
    if i[2] &lt;= 30:
        i[1] = False
</code></pre>

<p>Since ""best"" could mean: fast, memory efficient, readable etc you can check which method suits your needs. </p>

<p>For example to check speed you can use <a href=""https://docs.python.org/3.4/library/timeit.html?highlight=timeit#module-timeit"" rel=""nofollow"">timeit</a> and compare various solutions. </p>

<hr>

<p>What ""best"" should not mean, is ""<a href=""http://legacy.python.org/dev/peps/pep-0020/"" rel=""nofollow"">unnecessarily complex</a>"". </p>
","python"
"1755",15622763,"<p>I found an answer after much trial and error ! In my example I have a field in a queryset called 'jd_gross' which I want to total in my report....I finally abandoned the  action=FIELD_ACTION_SUM section and rolled my own</p>

<p>in my band_detail section I can display this field with commas with the following :</p>

<pre><code>        ObjectValue(attribute_name='jd_gross', left=26.7*cm, width=1.7*cm, style={'alignment':TA_RIGHT}, get_value=lambda instance: intcomma(instance.jd_gross)),
</code></pre>

<p>The answer that works for me for the summary section however is to add to the :
    def <strong>init</strong>(self, *args, **kwargs):
section, after the :
        self.band_page_header.elements += [
I used the same concept to calculate my total, convert it to a formatted string and add a line as a System Field in to my summary section as follows :</p>

<pre><code>    myset = self.queryset
    grosstotal = 0
    for myline in myset:
        if myline.jd_gross:
            grosstotal += myline.jd_gross
    ugrosstotal = intcomma(grosstotal)
    self.band_summary.elements += [
        SystemField(expression=ugrosstotal, top=1*cm, left=26.5*cm, width=1.9*cm, style={'alignment':TA_RIGHT}),
        ]
</code></pre>

<p>so my complete inherited report is now as follows :</p>

<p>class JobdetailsReport(DefaultReport):
    title = 'Job Details'
    page_size = landscape(A4)</p>

<pre><code>class band_detail(DetailBand):
    height=0.7*cm
    elements=[
        ObjectValue(attribute_name='jd_job', left=0.1*cm),
        ObjectValue(attribute_name='c_name', left=1.5*cm),
        ObjectValue(attribute_name='clientname', left=5.8*cm),
        ObjectValue(attribute_name='jd_return', left=10.1*cm),
        ObjectValue(attribute_name='jd_delivery', left=12.6*cm),
        ObjectValue(attribute_name='get_j_status1_display', left=15.1*cm),
        ObjectValue(attribute_name='get_j_status2_display', left=17.6*cm),
        ObjectValue(attribute_name='jd_prodref', left=20.1*cm),
        ObjectValue(attribute_name='userformalname', left=23*cm),
        ObjectValue(attribute_name='jd_gross', left=26.7*cm, width=1.7*cm, style={'alignment':TA_RIGHT}, get_value=lambda instance: intcomma(instance.jd_gross)),
        ]
    borders = {'bottom': True}

class band_summary(ReportBand):
    height = 1.7*cm
    elements = [
        Label(text='Records printed:', top=1*cm, left=0.5*cm),
        ObjectValue(expression='count(jd_job)', top=1*cm, left=5.6*cm),
        Label(text=""Total Value:"", top=1*cm, left=22*cm),
        ]
    borders = {'top': True}

def __init__(self, *args, **kwargs):
    super(JobdetailsReport, self).__init__(*args, **kwargs)

    self.band_page_header.elements += [
        Label(text=""Job No."", top=0.8*cm, left=0.1*cm),
        Label(text=""Client"", top=0.8*cm, left=1.5*cm),
        Label(text=""Delivery"", top=0.8*cm, left=5.8*cm),
        Label(text=""Return"", top=0.8*cm, left=10.1*cm),
        Label(text=""Delivery"", top=0.8*cm, left=12.6*cm),
        Label(text=""Physical Status"", top=0.8*cm, left=15.1*cm),
        Label(text=""Accts Status"", top=0.8*cm, left=17.6*cm),
        Label(text=""Reference"", top=0.8*cm, left=20.1*cm),
        Label(text=""Our Contact"", top=0.8*cm, left=23*cm),
        Label(text=""Gross"", top=0.8*cm, left=27*cm),
        ]

    myset = self.queryset
    grosstotal = 0
    for myline in myset:
        if myline.jd_gross:
            grosstotal += myline.jd_gross
    ugrosstotal = intcomma(grosstotal)
    self.band_summary.elements += [
        SystemField(expression=ugrosstotal, top=1*cm, left=26.5*cm, width=1.9*cm, style={'alignment':TA_RIGHT}),
        ]
</code></pre>

<p>Hope that helps you ! It only took me several hours to get it to work......</p>
","python"
"1756",26930767,"<p><code>print len(splitStr)</code></p>

<p>gives :- <code>3</code></p>

<pre><code>print len(inputList), len(inputStr)
</code></pre>

<p>gives:- <code>3</code>, <code>18</code></p>

<p>when you check </p>

<pre><code>if inputList[i]==splitStr[j] #for i = 1 and j = 12
</code></pre>

<p>while <code>splitStr</code> just have three values  <code>['Dive', 'Into', 'Python']</code></p>

<p>when you run <code>for  j in range(0, len(inputStr))</code> it will loop for 18 times anf every time <code>j</code> takes values from (0,18) so it checks for <code>splitStr[j]</code> let's say 10 then <code>splitStr[10]</code> which is actually (<code>['Dive', 'Into', 'Python']</code>) out of range. </p>
","python"
"1757",30761242,"<p>When run from a terminal pointing to /home, rodeo failed to run:</p>

<pre><code>jeanpat@jeanpat-WA50SHQ:~$ cd ~
jeanpat@jeanpat-WA50SHQ:~$ rodeo .
</code></pre>

<blockquote>
  <p>UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position
  3: ordinal not in range(128)</p>
</blockquote>

<p>The solution was to create a fresh directory and to start rodeo from it:</p>

<pre><code>mkdir RodeoDir
cd RodeoDir/

RodeoDir$ rodeo .

 _______      ___   ______   ________    ___    
|_   __ \   .'   `.|_   _ `.|_   __  | .'   `.  
  | |__) | /  .-.  \ | | `. \ | |_ \_|/  .-.  \ 
  |  __ /  | |   | | | |  | | |  _| _ | |   | | 
 _| |  \ \_\  `-'  /_| |_.' /_| |__/ |\  `-'  / 
|____| |___|`.___.'|______.'|________| `.___.'  

''''''''''''''''''''''''''''''''''''''''''''''''''
  URL: http://localhost:5000/
  DIRECTORY: /home/jeanpat/App/RodeoDir
''''''''''''''''''''''''''''''''''''''''''''''''''

(process:7102): GLib-CRITICAL **: g_slice_set_config: assertion 'sys_page_size == 0' failed
</code></pre>
","python"
"1758",29776547,"<p>how about</p>

<pre><code>""my name is {name}, and your name is {name}"".format(name=name)
</code></pre>
","python"
"1759",22835631,"<p>It might be a buffering issue. <code>Dialog</code> can't show anything until the child process (<code>youtube-dl</code>) flushes its stdout/stderr buffers. The following works:</p>

<pre><code>#!/usr/bin/env python3
import sys
from subprocess import Popen, PIPE, STDOUT
from dialog import Dialog # $ pip install pythondialog

d = Dialog(dialog=""dialog"")
d.set_background_title(""Random title"")
with Popen([sys.executable or ""python"", ""-u"", ""-c"", r""""""import sys, time

for i in range(100):
    print(i)
    if i % 10 == 0:
        sys.stderr.write('.\n')
    time.sleep(.1)
""""""], stdout=PIPE, stderr=STDOUT, bufsize=0) as p:
    d.progressbox(fd=p.stdout.fileno(), text=""youtube-dl output:"")
</code></pre>

<p><code>bufsize=0</code> disables buffering on Python (parent) side. <code>-u</code> makes child's streams unbuffered (line-buffered on Python 3). </p>
","python"
"1760",38799560,"<p>Simply join the necessary tables. Your schema properly reflects normalization (separating tables into logical groupings) and can scale for one-to-many relationships. Specifically, to answer your question --<em>So, how would I query this database efficiently to find if there is a design that matches a long list (let's assume 100+) of parameters with specific values?</em>-- consider below approaches:</p>

<p><strong>Inner Join with Where Clause</strong> </p>

<p>For handful of parameters, use an inner join with a <code>WHERE...IN()</code> clause. Below returns <em>design</em> fields joined by <em>input</em> and <em>parameters</em> tables, filtered for specific parameter names where you can have Python pass as parameterized values even iteratively in a loop:</p>

<pre class=""lang-sql prettyprint-override""><code>SELECT d.id, d.model_id, d.date_created
FROM design d
INNER JOIN input i ON d.id = i.design_id
INNER JOIN parameters p ON p.id = i.parameter_id
WHERE p.name IN ('param1', 'param2', 'param3', 'param4', 'param5', ...)
</code></pre>

<p><strong>Inner Join with Temp Table</strong></p>

<p>Should values be over 100+ in a long list, consider a temp table that filters <em>parameters</em> table to specific parameter values:</p>

<pre><code># CREATE EMPTY TABLE (SAME STRUCTURE AS parameters)
sql = ""CREATE TABLE tempparams AS SELECT id, name, units FROM parameters WHERE 0;""
cur.execute(sql)
db.commit()

# ITERATIVELY APPEND TO TEMP
for i in paramslist:                                  # LIST OF 100+ ITEMS
    sql = ""INSERT INTO tempparams (id, name, units) \
           SELECT p.id, p.name, p.units \
           FROM parameters p \
           WHERE p.name = ?;""
    cur.execute(sql, i)                               # CURSOR OBJECT COMMAND PASSING PARAM
    db.commit()                                       # DB OBJECT COMMIT ACTION 
</code></pre>

<p>Then, join main <em>design</em> and <em>input</em> tables with new temp table holding specific parameters:</p>

<pre class=""lang-sql prettyprint-override""><code>SELECT d.id, d.model_id, d.date_created
FROM design d
INNER JOIN input i ON d.id = i.design_id
INNER JOIN tempparams t ON t.id = i.parameter_id 
</code></pre>

<p>Same process can work with <em>components</em> table as well.</p>

<p>*Moved picture to question section</p>
","python"
"1761",9958577,"<p>You can do the following.</p>

<p>Assuming your matrix is 4 * 4 matrix.</p>

<pre><code>indices_diagonal = np.diag_indices(4)

yourarray[indices_diagonal] = Val
</code></pre>
","python"
"1762",36680023,"<p>Move the loading of the kv file before the widgets. So call the <code>Builder.loadfile(""mirror.kv"")</code> and then declare your classes <code>DateTime</code> and <code>HomeScreen</code> (since it uses <code>DateTime</code>). The key error you get is probably because this widget doesn't have a child with that id yet.</p>
","python"
"1763",4741243,"<pre><code>generator = myfunct()
while True:
   my_element = generator.next()
</code></pre>

<p>make sure to catch the exception thrown after the last element is taken</p>
","python"
"1764",22729802,"<p>Simple answer:</p>

<pre><code>root.findall('banner') != root.findall('Banner')
</code></pre>

<p>The XML tags are case sensitive.</p>

<p>I think you can also compress your code somewhat, by putting everything in a single loop:</p>

<pre><code>def get_banner(target):
    #Finds urls of show images                                                                  
    urls = []
    types = ['fanart', 'graphical', 'poster']
    tree = et.parse(target)
    root = tree.getroot()
    for banner in root.findall('Banner'):
        url = 'http://thetvdb.com/banners/' + banner.find('BannerPath').text
        type_ = banner.find('BannerType').text
        if not types:
            break
        elif type_ in types:
            urls.append(url)
            types.remove(type_)
    return urls
</code></pre>

<p>The <code>types.remove(type_)</code> statement should ensure that you only return the first match to each of your three types.</p>
","python"
"1765",16182294,"<p>Install mysql via <a href=""http://brew.sh/"">homebrew</a>, then you can install mysql python via pip.</p>

<pre><code>pip install MySQL-python
</code></pre>

<p>It works for me.</p>
","python"
"1766",6746126,"<pre><code>import subprocess
p = subprocess.Popen('my_command', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
out, error = p.communicate()
</code></pre>
","python"
"1767",31166814,"<p>One way of getting around this is to create a column (for each DataFrame) of a version of your original data structure converted to a hashable type.</p>

<p>E.g.,</p>

<pre><code>a['IDHash'] = a.ID.apply(lambda r: tuple(sorted(r.iteritems())))
b['IDHash'] = b.ID.apply(lambda r: tuple(sorted(r.iteritems())))
</code></pre>

<p>and then</p>

<pre><code>pd.merge(a, b, on='IDHash')
</code></pre>

<p>After that, just erase the columns.</p>
","python"
"1768",19772695,"<p>You could use <code>re.finditer</code> to retrieve the start/end of all possible matches and do an appropriate replacement. This will cover variable length replacing, but does mean you need to be wary of re syntax for the <code>frm</code> argument.</p>

<pre><code>import re
from random import choice

def replace_random(src, frm, to):
    matches = list(re.finditer(frm, src))
    replace = choice(matches)
    return src[:replace.start()] + to + src[replace.end():]
</code></pre>

<p>Example:</p>

<pre><code>&gt;&gt;&gt; [replace_random('x x x x x', r'\bx\b', 'y') for _ in range(10)]
['y x x x x', 'x x x x y', 'x x y x x', 'x y x x x', 'x x x y x', 'x x x y x', 'x x y x x', 'x y x x x', 'x x x x y', 'x x y x x']
</code></pre>
","python"
"1769",2215227,"<p>You need to specifically erase the circle before you blit it again. Depending on how complicated your scene is, you may have to try different methods. Generally what I do is have a ""background"" surface that a blit to the screen every frame and then blit the sprites/other surfaces in their new positions (blits in Pygame are very fast, so even in fairly large screens I haven't had speed issues doing this). For your code above, it's simple enough just to use <code>surface.fill(COLOR)</code> where <code>COLOR</code> is your background color; eg, (255,255,255) for white:</p>

<pre><code># ...
screen = pygame.display.set_mode((640,400),0,32)
backgroundColor = (255,255,255)
# ...
while True:
    # ...
    screen.fill(backgroundColor)
    screen.blit(circle,(pygame.mouse.get_pos()[0],100))
    pygame.display.update()
    pygame.time.delay(10)
</code></pre>

<p><strong>Edit</strong> in answer to your comment: It is possible to do this in a more object-oriented way.</p>

<p>You will need to have a background Surface associated with your screen (I usually have a Display or Map class (depending on the type of game) that does this). Then, make your object a subclass of <code>pygame.sprite</code>. This requires that you have <code>self.image</code> and <code>self.rect</code> attributes (the image being your surface and the rect being a Pygame.rect with the location). Add all of your sprites to a <code>pygame.group</code> object. Now, every frame, you call the <code>draw</code> method on the group and, after you update the display (ie, with pygame.display.update()), you call the <code>clear</code> method on the group. This method requires that you provide both the destination surface (ie, <code>screen</code> above) and a background image.</p>

<p>For example, your main loop may look more like this:</p>

<pre><code>while True:
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()

    circle.rect.center = (pygame.mouse.get_pos()[0],100)
    circleGroup.draw(screen)

    pygame.display.update()
    circleGroup.clear(screen, backgroundSurface)
    pygame.time.delay(10)
</code></pre>

<p>See the <a href=""http://www.pygame.org/docs/ref/sprite.html"">documentation</a> on the Sprite and Group classes for more information.</p>
","python"
"1770",30308864,"<p>I think what you're looking for is: </p>

<pre><code>sorted(foo_list, key=lambda foo: foo_function(foo.foo_attr))
</code></pre>

<p>That said, I'm not sure where this attrgetter comes into play. If it gets the foo_attr for you, then you can try using: </p>

<pre><code>sorted(foo_list, key=lambda foo: foo_function(attrgetter(foo)))
</code></pre>
","python"
"1771",2866939,"<p>You can use the <a href=""http://digg.com/api/docs/1.0/detail/story.getInfo"" rel=""nofollow"">story.getInfo</a> method of the Digg API. One of its possible arguments is <a href=""http://digg.com/api/docs/1.0/arguments/#clean_title"" rel=""nofollow"">clean_title</a> which you can parse from the link in the RSS feed. Here's a sample implementation:</p>

<pre><code>import feedparser
import urllib2
from xml.etree import ElementTree

rss_link = 'http://feeds.digg.com/digg/popular.rss'
api_link = 'http://services.digg.com/1.0/endpoint?method=story.getInfo&amp;clean_title=%s'

data = feedparser.parse(rss_link)

for i, e in enumerate(data.entries, 1):
  print '%d. Digg link: %s' % (i, e.link)
  title = e.link[e.link.rfind('/') + 1 :]
  xml = urllib2.urlopen(api_link % title).read()
  tree = ElementTree.fromstring(xml)
  print '%d. Real link: %s' % (i, tree.find('story').get('link'))
</code></pre>

<p>... which outputs:</p>

<pre><code>1. Digg link: http://feeds.digg.com/~r/digg/popular/~3/V58R-d7nd2M/Pakistan_court_bans_Facebook_site
1. Real link: http://news.bbc.co.uk/2/hi/south_asia/8691406.stm
2. Digg link: http://feeds.digg.com/~r/digg/popular/~3/LoF6h1fTtk/Britons_spend_more_webtime_reading_news_than_looking_at_porn
2. Real link: http://www.telegraph.co.uk/technology/news/7740500/Britons-spend-more-web-time-reading-news-than-looking-at-pornography.html
3. Digg link: http://feeds.digg.com/~r/digg/popular/~3/XQUD2tR-qGQ/Sludgy_oil_begins_washing_into_Lousiana_s_coastal_marshes
3. Real link: http://www.washingtonpost.com/wp-dyn/content/article/2010/05/18/AR2010051801676.html?hpid=topnews
4. Digg link: http://feeds.digg.com/~r/digg/popular/~3/4HBB7lvCpoM/Professor_examines_the_complex_evolution_of_human_morality
4. Real link: http://www.physorg.com/news193472479.html
5. Digg link: http://feeds.digg.com/~r/digg/popular/~3/9__2-MVmSp4/How_Are_America_s_Top_Companies_Taxed_Infographic
5. Real link: http://www.mint.com/blog/trends/how-are-americas-top-companies-taxed/
...
</code></pre>
","python"
"1772",38406516,"<p>kronenpj thanks, that was the idea. But when you have a symlink it tries to delete is as a normal file and fails. I had to add a new elif and add the unlink option for the symlink</p>

<p><pre>
def clean_dir(location):
    fileList = os.listdir(location)</p>

<code>for fileName in fileList:
    fullpath=os.path.join(location, fileName)
    if os.path.isfile(fullpath):
        os.chmod(fullpath, stat.S_IRWXU | stat.S_IRWXG | stat.S_IRWXO)
        os.remove(os.path.join(location, fileName))
    elif os.path.islink(fullpath):
        os.unlink(fullpath)
    elif os.path.isdir(fullpath):
        if len(os.listdir(fullpath)) &gt; 0:
            clean_dir(fullpath)
        #os.rmdir(location + ""/"" + fileName)
        shutil.rmtree(os.path.join(location, fileName))

return
</code></pre>

<p></p>
","python"
"1773",19744542,"<pre><code>lis1 = [1,2]
lis2 = [2,4]
lis3 = [5,6]
from itertools import product
print [i for i in product(lis1,lis2,lis3) if len(set(i)) == 3]
</code></pre>

<p><strong>Output</strong></p>

<pre><code>[(1, 2, 5), (1, 2, 6), (1, 4, 5), (1, 4, 6), (2, 4, 5), (2, 4, 6)]
</code></pre>
","python"
"1774",5232770,"<p>Since you have to deal with Javascript, I'd try to use <a href=""http://code.google.com/p/selenium/wiki/PythonBindings"" rel=""nofollow"">WebDriver</a>. It has Python bindings and it's not that hard to use.</p>
","python"
"1775",33304879,"<p>You do not necessarily need paramiko to check the <code>LoginGraceTime</code> but since you're specifically asking for it:</p>

<p><em>Note:</em> <code>banner_timeout</code> is just a timeout for the peer ssh banner response.<br>
<em>Note:</em> <code>timeout</code> is actually a socket read timeout, <code>none</code> is no timeout. Use this to set a hard-timeout for your check.</p>

<pre><code>self.sshobj = paramiko.SSHClient()
self.sshobj.set_missing_host_key_policy(paramiko.AutoAddPolicy())
try:
    self.sshobj.connect(""192.168.0.1"", port=22, look_for_keys=False, timeout=None, banner_timeout=5)
except paramiko.ssh_exception.SSHException, se:
    # paramiko raises SSHException('No authentication methods available',) since we did not specify any auth methods. socket stays open.
    pass
ts_start = time.time()
try:
    self.channel = self.sshobj.invoke_shell()
except EOFError, e:
    # EOFError is raised when peer terminates session.
    pass
print time.time()-ts_start
</code></pre>

<p>You can even get rid of the first <code>try_catch</code> for <code>No authentication methods available</code> by overriding <code>self.sshobj._auth</code> with an <code>NOP</code>. Below are some changes to the first variant:</p>

<pre><code>def noauth(username, password, pkey, key_filenames, allow_agent,
       look_for_keys, gss_auth, gss_kex, gss_deleg_creds, gss_host): pass
...
sshobj._auth = noauth
sshobj.connect(""192.168.0.1"", port=22, look_for_keys=False, timeout=None, banner_timeout=5)
...
</code></pre>

<p>But, as initially mentioned, you do not even need paramiko to test this timeout since the <code>LoginGraceTime</code> triggers like a server-side socket read timeout once banners are exchanged. Therefore you just need to establish a TCP connection, send a fake ssh banner and wait until the remote side disconnects:</p>

<pre><code>import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((""192.168.0.1"", 22))
s.sendall(""SSH-2.0-MyPythonSSHProbingClient"")
s.settimeout(5*60)  # hard-limit
print s.recv(500)   # remote banner
ts_start = time.time()
if not s.recv(100):
    # exits when remote site closes connection, or raises socket.timeout when hard-limit is hit.
    print time.time()-ts_start
else:
    raise Exception(""whoop, something's gone wrong"")
</code></pre>

<p>The non-paramiko variant is even more accurate.</p>
","python"
"1776",35391388,"<p>Celery itself replaces the (global) logger class, using the <code>logging.setLoggerClass</code> method, with a <code>ProcessAwareLogger</code> class that does a couple of things: avoid trying to log while in a signal handler, and add a process name to logs. This happens as soon as Celery's logging system is set up. You're seeing this class even on your own loggers because of the global nature of <code>setLoggerClass</code>.</p>

<p>As for why, exactly, Celery is designed like that, I think you'd have to ask a developer of Celery, but effectively it allows Celery to ensure that signal handler safety and process name are taken care of even if you use your own loggers in your app.</p>

<p>The python <code>logging</code> docs note:</p>

<blockquote>
  <p>If you are implementing asynchronous signal handlers using the signal module, you may not be able to use logging from within such handlers. This is because lock implementations in the threading module are not always re-entrant, and so cannot be invoked from such signal handlers.</p>
</blockquote>

<p>Celery uses <code>signal</code> so this may be a reason for wanting to globally enforce its logger class. </p>
","python"
"1777",33511259,"<pre><code>from collections import Counter

result = Counter(votes).most_common(2)

result = 0 if result[0][1] == result[1][1] else result[0][0]
</code></pre>

<p>Error handling for empty <code>votes</code> lists or <code>votes</code> lists with a set cardinality of 1 is trivial and left as an exercise for the reader.</p>
","python"
"1778",496814,"<p>I'm going to quote the <a href=""http://faq.pygtk.org/index.py?req=show&amp;file=faq23.020.htp"">PyGTK FAQ</a>:</p>

<blockquote>
  <p>You have created a progress bar inside a window, then you start running a loop that does some work:</p>
</blockquote>

<pre><code>while work_left:
    ...do something...
    progressbar.set_fraction(...)
</code></pre>

<blockquote>
  <p>You will notice that the window doesn't even show up, or if it does the progress bar stays frozen until the end of the task. The explanation is simple: gtk is event driven, and you are stealing control away from the gtk main loop, thus preventing it from processing normal GUI update events.</p>
  
  <p>The simplest solution consists on temporarily giving control back to gtk every time the progress is changed:</p>
</blockquote>

<pre><code>while work_left:
    ...do something...
    progressbar.set_fraction(...)
    while gtk.events_pending():
        gtk.main_iteration()
</code></pre>

<blockquote>
  <p>Notice that with this solution, the user cannot quit the application (gtk.main_quit would not work because of new loop [gtk.main_iteration()]) until your heavy_work is done.</p>
  
  <p>Another solution consists on using gtk idle functions, which are called by the gtk main loop whenever it has nothing to do. Therefore, gtk is in control, and the idle function has to do a bit of work. It should return True if there's more work to be done, otherwise False.</p>
  
  <p>The best solution (it has no drawbacks) was pointed out by James Henstridge. It is taking advantage of python's generators as idle functions, to make python automatically preserve the state for us. It goes like this:</p>
</blockquote>

<pre><code>def my_task(data):
    ...some work...
    while heavy_work_needed:
        ...do heavy work here...
        progress_label.set_text(data) # here we update parts of UI
        # there's more work, return True
        yield True
    # no more work, return False
    yield False

def on_start_my_task_button_click(data):
    task = my_task(data)
    gobject.idle_add(task.next)
</code></pre>

<blockquote>
  <p>The 'while' above is just an example. The only rules are that it should yield True after doing a bit of work and there's more work to do, and it must yield False when the task is done. </p>
</blockquote>
","python"
"1779",34617958,"<p>For insertion using the algorithmic approach you need to go to the last element of the dictionary and then shift each element to the right to create space for the element to be inserted.</p>

<p>Now, the issue is going to the last element of the dictionary, which is possible only if you convert dictionary to list.</p>

<pre><code>d.keys()[-1]
</code></pre>

<p>It doesn't make sense to ask for the ""last"" key in a dictionary, because dictionary keys are unordered. You can get the list of keys and get the last one if you like, but that's not in any sense the ""last key in a dictionary"".</p>

<p>Since you have an ordered list dictionary seems to be a wrong choice you may think of using a list. Just in case if you have to bring in some solution convert the dict to list as mentioned.</p>
","python"
"1780",18868397,"<p>Django searches for template directories in a number of places, depending on your template-<a href=""https://docs.djangoproject.com/en/1.6/ref/templates/api/#loader-types"" rel=""nofollow"">loader settings</a>, but the most basic way of specifying template directories is by using the <a href=""https://docs.djangoproject.com/en/1.6/ref/templates/api/#the-template-dirs-setting"" rel=""nofollow"">TEMPLATE_DIRS setting</a>.</p>

<p>Look in your django-piston app where the templates are. Eg:</p>

<pre><code>/path/to/site-packgages/django-piston/templates/template.html
</code></pre>

<p>If you have the default loader settings applied in your project, than you can override the templates by creating at template with the same path and filename but then in your project directory:</p>

<pre><code>/path/to/projectdir/django-piston/templates/template.html
</code></pre>

<p>A realm is a community or territory over which a sovereign rules; a kingdom. 2. A field, sphere, or province: the realm of science.</p>

<p>Reading the Piston source code I think a realm is just a name that is passed to the authentication handler and probably only used by that handler to inform the user about the area he is about to receive access to: ""Your about to receive access to [realm]"".</p>

<p>Disclaimer: The realm guess is my best guess. I'm not a Piston user.</p>
","python"
"1781",33138459,"<p>As per the semantics of the <a href=""https://docs.python.org/3/reference/expressions.html#calls"" rel=""nofollow"">function calls in Python</a>, the rules for the arguments to be passed are as follows</p>

<pre class=""lang-none prettyprint-override""><code>argument_list   ::=  positional_arguments ["","" keyword_arguments]
                       ["","" ""*"" expression] ["","" keyword_arguments]
                       ["","" ""**"" expression]
                     | keyword_arguments ["","" ""*"" expression]
                       ["","" keyword_arguments] ["","" ""**""     expression]
                     | ""*"" expression ["","" keyword_arguments] ["","" ""**"" expression]
                     | ""**"" expression
</code></pre>

<p>As you see here, the positional arguments should always appear at the beginning of the function calls. They cannot appear anywhere else. When you do</p>

<pre><code>awesome_function(prefix='$', 3, 5)
</code></pre>

<p>it violates the above rule, as you are passing two positional arguments (<code>3</code> and <code>5</code>) after a keyword argument (<code>prefix</code>). That is why you are getting a <code>SyntaxError</code>, as Python is not able to parse the function call expression.</p>

<hr>

<p>But, when you are using <code>partial</code> it works, because <code>partial</code> creates a new function object and it stores all the parameters to be passed to it. When you actually invoke the function object returned by <code>partial</code>, it applies all the positional arguments first and then the keyword arguments.</p>
","python"
"1782",7194701,"<p>To import from a parent package use <code>..</code>. If I'm not misunderstanding you, this should work:</p>

<pre><code>from ..lib import customLib
</code></pre>

<p>See <a href=""http://docs.python.org/tutorial/modules.html"" rel=""nofollow"">http://docs.python.org/tutorial/modules.html</a>.</p>
","python"
"1783",10504521,"<p>Why are you calling your proxy class <code>User</code>, which is guaranteed to lead to confusion between that and <code>django.contrib.auth.models.User</code>? Why not <code>UserProxy</code>, or <code>MyUser</code>? Then it could be distinguished whenever you use it.</p>
","python"
"1784",16679660,"<p>Like <a href=""http://stackoverflow.com/questions/16679660/python-unittest-report-passed-test#comment24002393_16679660"">Corey's comment</a> mentioned, if you set <code>verbosity=2</code> unittest will print the result of each test run.</p>

<pre><code>results = unittest.TextTestRunner(verbosity=2).run(suite)
</code></pre>

<hr>

<p>If you want a little more flexibility - and you might since you are creating suites and using test runners - I recommend that you take a look at <a href=""http://twistedmatrix.com/trac/wiki/TwistedTrial"" rel=""nofollow"">Twisted Trial</a>. It extends Python's <code>unittest</code> module and provides a few more assertions and reporting features. </p>

<p>Writing your tests will be exactly the same (besides subclassing  twisted.trial.unittest.TestCase vs python's unittest) so your workflow won't change. You can still use your <code>TestLoader</code> but you'll have the options of many more TestReporters <a href=""http://twistedmatrix.com/documents/11.1.0/api/twisted.trial.reporter.html"" rel=""nofollow"">http://twistedmatrix.com/documents/11.1.0/api/twisted.trial.reporter.html</a>.</p>

<p>For example, the default TestReporter is <code>TreeReporter</code> which returns the following output:
<img src=""http://i.stack.imgur.com/sDJu2.png"" alt=""enter image description here""></p>
","python"
"1785",8787961,"<p>It turns out I was missing <code>python-dateutil</code>, which somehow didn't make into <code>django-storages</code> as a dependency. Make sure you have version 1.1.5 of <code>python-dateutil</code> installed or you will get the following error:</p>

<pre><code>iter() returned non-iterator of type ‘_timelex’
</code></pre>

<p>See also my blogpost about this problem and the django - s3bot setup in general <a href=""http://c4urself.posterous.com/djangos-collectstatic-with-s3boto"">here</a>.</p>
","python"
"1786",15122442,"<p>If the problem lies in the source csv files that some lines just lack 'Change', then what you can do (also a good practice in general) is to check the availability of that key in the dict:</p>

<pre><code># ...
if 'Change' in line and line['Change'] == ticket_id:
    # the rest
</code></pre>
","python"
"1787",34561669,"<ul>
<li>Do not insert newline between <code>Content-Disposition</code> and the name of the file.</li>
<li>Using <code>:</code> between <code>filename</code> and the name of the file is also wrong.</li>
<li>I think you shouldn't add useless newlines after the image data.</li>
<li>Using binary mode is good for reading binary files.</li>
<li>You should close the connection after sending the message. Otherwise, the client cannot tell where the end of file is because you didn't send <code>Content-Length</code> header.</li>
<li>It seems good for Firefox to read the request before sending the response.</li>
</ul>

<p>Try this (tested with Python 3.4.2 and Python 2.7.11):</p>

<pre><code>import socket
serversocket = socket.socket()
serversocket.bind((""127.0.0.1"", 80))
serversocket.listen(800)
msg = open(""s.png"", ""rb"").read()
msg = ""HTTP/1.0 200 OK\r\nServer: ls\r\nContent-Type: image/png\r\nContent-Disposition: attachement; filename=s.png\r\n\r\n"".encode('UTF-8') + msg
while True:
    (clientsocket, address) = serversocket.accept()
    recvdata = ''.encode('UTF-8')
    while True:
        recvdata += clientsocket.recv(4096)
        if ""\r\n\r\n"".encode('UTF-8') in recvdata:
            break
    clientsocket.send(msg)
    clientsocket.close()
</code></pre>
","python"
"1788",18983880,"<p>This line:</p>

<pre><code>self = type
</code></pre>

<p>doesn't do what you think it does. You think this is an assignment statement, in which the object refered to by <code>self</code> takes on the attributes of <code>type</code>, a la C++.</p>

<p>Python doesn't have assignments in the same sense that other languages have.</p>

<p>What that line does is to bind the local name <code>self</code> to the object to which <code>type</code> is currently bound. It has absolutely no effect outside of <code>Distance.__init__()</code>, and virtually no effect on the object to which <code>self</code> was previously bound.</p>
","python"
"1789",36994520,"<p>If I understand you correctly (although I'm not totally sure I do), this will produce the output I think your looking for.</p>

<pre><code>import re

with open('data.txt', 'r') as f:
    f_txt = f.read() # Change file object to text
    f_lines = re.split(r'\n(?=\d)', f_txt)
    matrix = []
    for line in f_lines:
        inner1 = line.split('\n')
        inner2 = [re.split(r'\s{2,}', l) for l in inner1]
        matrix.append(inner2)

print(matrix)
print('')
for row in matrix:
    print(row)
</code></pre>

<p>Output of the program:</p>

<pre><code>[[['1', 'firm A', 'Manhattan (company name)', '25,000'], ['', 'SK Ventures', '25,000'], ['', 'AEA investors', '10,000']], [['2', 'firm B', 'Tencent collaboration', '16,000'], ['', 'id TechVentures', '4,000']], [['3', 'firm C', 'xxx', '625']]]

[['1', 'firm A', 'Manhattan (company name)', '25,000'], ['', 'SK Ventures', '25,000'], ['', 'AEA investors', '10,000']]
[['2', 'firm B', 'Tencent collaboration', '16,000'], ['', 'id TechVentures', '4,000']]
[['3', 'firm C', 'xxx', '625']]
</code></pre>

<p>I am basing this on the fact that you wanted the first row of your matrix to be:
<code>[[1,Firm A,Manhattan,25,000],['',SK Ventures,25,000],['',AEA investors,10,000]]</code></p>

<p>However, to achieve this with more rows, we then get a list that is nested 3 levels deep. Such is the output of <code>print(matrix)</code>. This can be a little unwieldy to use, which is why TessellatingHeckler's answer uses a dictionary to store the data, which I think is a much better way to access what you need. But if a list of list of ""matrices' is what your after, then the code I wrote above does that.</p>
","python"
"1790",20390250,"<p>Refer to to pydoc: <a href=""http://docs.python.org/2/library/logging.html#logging.Logger.debug"" rel=""nofollow"">logging.debug</a></p>

<p>The format is like what you write in <strong>print()</strong></p>
","python"
"1791",17349981,"<p>This is a nice way to transform your data to a better repr to deal with; uses some
neat apply tricks</p>

<pre><code>In [72]: df
Out[72]: 
                               A                  B
train1         [2092, 1143, 390]  [5651, 449, 4012]
train2  [3158, 3158, 3684, 3684]       [2, 4, 2, 1]
train3              [1699, 1808]             [0, 1]

In [73]: concat(dict([ (x[0],x[1].apply(lambda y: Series(y))) for x in df.iterrows() ]))
Out[73]: 
             0     1     2     3
train1 A  2092  1143   390   NaN
       B  5651   449  4012   NaN
train2 A  3158  3158  3684  3684
       B     2     4     2     1
train3 A  1699  1808   NaN   NaN
       B     0     1   NaN   NaN
</code></pre>
","python"
"1792",17246563,"<p>This code below works. I have commented what were modified inline. </p>

<pre><code>import os

rootdir= 'C:\\Documents\ and\ Settings\\Guest\\My\ Documents\\Code\\' 
#use '\\' in a normal string if you mean to make it be a '\'   
#use '\ ' in a normal string if you mean to make it be a ' '   


def doWhatYouWant(line):
    print line
    return line 
    #let the function return, not only print, to get the value for use as below 


for subdir, dirs, files in os.walk(rootdir):
    for file in files:
        f=open(rootdir+file,'r') #use the absolute URL of the file
        lines = f.readlines()
        f.close()
        f=open(file,'w') #universal mode can only be used with 'r' mode
        for line in lines:
            newline=doWhatYouWant(line)
            f.write(newline)
        f.close()
</code></pre>
","python"
"1793",16307350,"<p>As Anthony had suggested, adding the web2py.js was the solution.</p>
","python"
"1794",11541123,"<p>The gallery is a great starting point to find out exemples :</p>

<p><a href=""http://matplotlib.sourceforge.net/gallery.html"" rel=""nofollow"">http://matplotlib.sourceforge.net/gallery.html</a></p>

<p>There is an exemple of 3d line plot here :</p>

<p><a href=""http://matplotlib.sourceforge.net/examples/mplot3d/lines3d_demo.html"" rel=""nofollow"">http://matplotlib.sourceforge.net/examples/mplot3d/lines3d_demo.html</a></p>

<p>You see that you need to pass to the ax.plot function 3 vectors.
You are actually passing list of lists.
I don't know what you mean by the Start and End sublist, but the following line should work :</p>

<pre><code>ax.plot(VecStart_x + VecEnd_x, VecStart_y + VecEnd_y, VecStart_z +VecEnd_z)
</code></pre>

<p>Here I sum the sublist (concatenation) in order to have only one list by axis.</p>
","python"
"1795",8671808,"<p>I used numpy.random to ""scatter/beeswarm"" the data along X-axis but around a fixed point for each category, and then basically do pyplot.scatter() for each category:</p>

<pre><code>import matplotlib.pyplot as plt
import numpy as np

#random data for category A, B, with B ""taller""
yA, yB = np.random.randn(100), 5.0+np.random.randn(1000)

xA, xB = np.random.normal(1, 0.1, len(yA)), 
         np.random.normal(3, 0.1, len(yB))

plt.scatter(xA, yA)
plt.scatter(xB, yB)
plt.show()
</code></pre>

<p><img src=""http://i.stack.imgur.com/xVhw2.png"" alt=""X-scattered data""></p>
","python"
"1796",17770727,"<p>I found the solution in <a href=""http://stackoverflow.com/questions/16404339/csv-file-uploading-error-in-django-in-mac-new-line-character-seen-in-unquoted-f?rq=1"">another post</a></p>

<p>The issue was how i was saving the .csv file. When producing a .csv file in excel for mac save it as ""Windows Comma Separated Values (.csv)"" This will stop the addition of unwanted characters that throw of <code>import csv</code> in Django and python.</p>
","python"
"1797",31311495,"<p>I solved by invoking node-gyp directly and not through npm install:</p>

<pre><code>node-gyp configure
node-gyp build
node-gyp install
</code></pre>
","python"
"1798",12005055,"<p>I've found the solution, it seems that the <a href=""http://download.autodesk.com/us/maya/2010help/api/class_m_global.html"" rel=""nofollow"">MGobal</a> class is static.  </p>
","python"
"1799",3453058,"<p>Explicit state machines are boring, you can have implicit state machines in coroutines. But that is probably too much right now.</p>

<p>Anyways <code>class StateA(State): pass</code> is exactly the same as <code>StateA = type(""StateA"", (State,), {})</code>. Saves you typing the <code>pass</code> ;-)</p>
","python"
"1800",16097429,"<p>Fixed via a symbolic link. Clearly was a PATH issue or hardcoded reference to the gs binary.</p>

<p>sudo ln -s /usr/local/bin/gs /usr/bin/gs</p>
","python"
"1801",32790549,"<p><strong>Short version</strong></p>

<pre><code>&gt;&gt;&gt; for element in selector.xpath('//element'):
...     attributes = []
...     # loop over all attribute nodes of the element
...     for index, attribute in enumerate(element.xpath('@*'), start=1):
...         # use XPath's name() string function on each attribute,
...         # using their position
...         attribute_name = element.xpath('name(@*[%d])' % index).extract_first()
...         # Scrapy's extract() on an attribute returns its value
...         attributes.append((attribute_name, attribute.extract()))
... 
&gt;&gt;&gt; attributes # list of (attribute name, attribute value) tuples
[(u'attr1', u'value1'), (u'attr2', u'value2')]
&gt;&gt;&gt; dict(attributes)
{u'attr2': u'value2', u'attr1': u'value1'}
&gt;&gt;&gt; 
</code></pre>

<p><strong>Long version</strong></p>

<p>XPath has a <a href=""http://www.w3.org/TR/xpath/#function-name"" rel=""nofollow""><code>name(node-set?)</code> function</a> to get node names (<a href=""http://www.w3.org/TR/xpath/#attribute-nodes"" rel=""nofollow"">an attribute is a node, an attribute node</a>):</p>

<blockquote>
  <p>The <strong><em>name</em></strong> function returns a string containing a QName representing the expanded-name of the node in the argument node-set that is first in document order.(...) <strong>If the argument it omitted</strong>, it defaults to a node-set with the <strong>context node</strong> as its only member.</p>
</blockquote>

<p>(source: <a href=""http://www.w3.org/TR/xpath/#function-name"" rel=""nofollow"">http://www.w3.org/TR/xpath/#function-name</a>)</p>

<pre><code>&gt;&gt;&gt; import scrapy
&gt;&gt;&gt; selector = scrapy.Selector(text='''
...     &lt;html&gt;
...     &lt;element attr1=""value1"" attr2=""value2""&gt;some text&lt;/element&gt;
...     &lt;/html&gt;''')
&gt;&gt;&gt; selector.xpath('//element').xpath('name()').extract()
[u'element']
</code></pre>

<p><em>(Here, I chained <code>name()</code> on the result of <code>//element</code> selection, to apply the function to all selected element nodes. A handy feature of Scrapy selectors)</em></p>

<p>One would like to do the same with attribute nodes, right? But it does not work:</p>

<pre><code>&gt;&gt;&gt; selector.xpath('//element/@*').extract()
[u'value1', u'value2']
&gt;&gt;&gt; selector.xpath('//element/@*').xpath('name()').extract()
[]
&gt;&gt;&gt; 
</code></pre>

<p>Note: I don't know if it's a limitation of <code>lxml/libxml2</code>, which Scrapy uses under the hood, or if the XPath specs disallow it. (I don't see why it would.)</p>

<p>What you can do though is use <code>name(node-set)</code> form, i.e. with a non-empty node-set as parameter. If you read carefully the part of the XPath 1.0 specs I pasted above, as with other string functions, <code>name(node-set)</code> only takes into account the <strong>first node</strong> in the node-set (in document order):</p>

<pre><code>&gt;&gt;&gt; selector.xpath('//element').xpath('@*').extract()
[u'value1', u'value2']
&gt;&gt;&gt; selector.xpath('//element').xpath('name(@*)').extract()
[u'attr1']
&gt;&gt;&gt; 
</code></pre>

<p>Attribute nodes also have positions, so you can loop on all attributes by their position. Here we have 2 (result of <code>count(@*)</code> on the context node):</p>

<pre><code>&gt;&gt;&gt; for element in selector.xpath('//element'):
...     print element.xpath('count(@*)').extract_first()
... 
2.0
&gt;&gt;&gt; for element in selector.xpath('//element'):
...     for i in range(1, 2+1):
...         print element.xpath('@*[%d]' % i).extract_first()
... 
value1
value2
&gt;&gt;&gt; 
</code></pre>

<p>Now, you can guess what we can do: call <code>name()</code> for each <code>@*[i]</code></p>

<pre><code>&gt;&gt;&gt; for element in selector.xpath('//element'):
...     for i in range(1, 2+1):
...         print element.xpath('name(@*[%d])' % i).extract_first()
... 
attr1
attr2
&gt;&gt;&gt; 
</code></pre>

<p>If you put all this together, and assume that <code>@*</code> will get you attributes in document order (not said in the XPath 1.0 specs I think, but it's what I see happening with <code>lxml</code>), you end up with this:</p>

<pre><code>&gt;&gt;&gt; attributes = []
&gt;&gt;&gt; for element in selector.xpath('//element'):
...     for index, attribute in enumerate(element.xpath('@*'), start=1):
...         attribute_name = element.xpath('name(@*[%d])' % index).extract_first()
...         attributes.append((attribute_name, attribute.extract()))
... 
&gt;&gt;&gt; attributes
[(u'attr1', u'value1'), (u'attr2', u'value2')]
&gt;&gt;&gt; dict(attributes)
{u'attr2': u'value2', u'attr1': u'value1'}
&gt;&gt;&gt; 
</code></pre>
","python"
"1802",35859215,"<ol>
<li><p>Use <code>tokens.pop(0)</code>, then the list doesn't need to be reversed when process is first called.</p></li>
<li><p>When trying to debug a state machine like this, it is often helpful to print or log the state when changing the stack: print(stack[-3:], category, tokens[:3]).</p></li>
<li><p>As BrenBarn commented, your function doesn't account for the idea that '^' comes before '*' and ''/', which comes before '+' and '-', etc.  This is called operator precedence.  In your function, <code>stack.append((""exp"", stack.pop(), process(tokens)))</code> causes everything after the <code>^</code> to be processed as the exponent.</p></li>
</ol>

<p>One way to tackle this is to use 2 stacks: an operator stack and an operand stack.</p>

<pre><code>For each token
    If its an operand, push it on the operand stack
    If its an operator, compare it with the operator on the top of the operator stack
        If the operator on the stack has lower precedence, then
            push the new operator on the stack
        If the operator on the stack has higher or equal precedence, then 
            pop the operator and its operands off the stacks
            apply the operator to the operands, and
            push the result back on the operand stack
            push the new operator on the operator stack
    If it's a '(' push it on the operator stack
    If it's a ')' pop and apply operators to operands until a '(' is on 
        the top of the operator stack, then pop the '('.
    If its the end of the input, apply the operators to the operands.  At the 
        end, the operand stack should be empty and the operand stack should
        just have the final result on it.
</code></pre>

<p>Example: ""1 + (C24 + A2)^2 * (B2 - F4)""</p>

<p>just before processing the first ')', the stacks look like:</p>

<pre><code>operators = ['+', '(', '+']
operands = ['1', 'C24', 'A2']
token = ')'
</code></pre>

<p>'+' is higher than ')', so apply the '+' to the top of the operand stack to get:</p>

<pre><code>operators = ['+', '(']
operands = ['1', ('add', 'C24', 'A2')]
token = ')'
</code></pre>

<p>token is ')' and top of operator stack is ')', so pop the '(', and get the next token.</p>

<pre><code>operators = ['+']
operands = ['1', ('add', 'C24', 'A2')]
token = '^'
</code></pre>

<p>'+' is lower precedence than '^', so push the '^' on the stack. The '2' will get pushed on the operand stack.</p>

<pre><code>operators = ['+', '^']
operands = ['1', ('add', 'C24', 'A2'), '2']
token = '*'
</code></pre>

<p>Now '^' is higher precedence than '*', so apply it to the stacks to get:</p>

<pre><code>operators = ['+']
operands = ['1', ('exp', ('add', 'C24', 'A2'), '2')]
token = '('
</code></pre>

<p>and so on</p>
","python"
"1803",38903175,"<p>Try this to catch all exceptions:</p>

<pre><code>try:
    raise ValueError('stuff')
except BaseException as e:
    print 'Statement:', e.args
    print 'Type:', type(e)
</code></pre>

<p>Outputs:</p>

<blockquote>
  <p>Statement: ('stuff',) </p>
  
  <p>Type: (class 'ValueError')</p>
</blockquote>

<p>This will let you see what's happening - using <code>BaseException</code> will capture ALL exception types, then you can query <code>e</code> to see what it is.  You should obviously be careful capturing all exceptions, and it isn't generally considered very good practice, but it might be useful for debugging at least.  When you see what the type is you can go back and narrow it down.</p>
","python"
"1804",5550145,"<p>I don't know the <code>gpg</code> command but does it return a different exit value for the ""wrong"" and ""right"" results?  The easiest way to check this after running the command would be:</p>

<pre><code>echo $?
</code></pre>

<p>I would expect it to return 0 if everything is OK and something else if not.  So your bash script would look like:</p>

<pre><code>gpg --no-default-keyring --keyring /etc/pubring.gpg --verify file.tgz.sig file.tgz

if [ $? -eq 0 ]
then
    echo All is well.
else
    echo Problem with signature.
fi
</code></pre>
","python"
"1805",22737409,"<p>In your view, you have to retrieve the selection that the user made and use it to filter the choices for the next form. Something like:</p>

<pre><code>form = FirstForm(request.POST)
if form.is_valid():
    uni = form.cleaned_data['uni']
    courses = Course.objects.filter(university__name=uni).order_by('name')
    return render_to_response(""registration/step3.html"", {'courses': courses},  RequestContext(request))
</code></pre>
","python"
"1806",21297533,"<p>Depending on your platform, starting a path with <code>/</code> means absolute path from the root</p>

<p>Meaning a relative path should be <code>open(""lowerfolder/json.items"")</code> without the <code>/</code></p>

<hr>

<p>(I don't know if this is bad form, but considering my comment was the answer that worked, I'm moving it here. Please comment if this isn't what I should be doing!)</p>
","python"
"1807",17311708,"<p>I think that if you specify -i infile1 .... -i infile2 .... outfile then ffmpeg will do what you need for you.</p>
","python"
"1808",37604934,"<pre><code> python -c 'print ""A""*1000'
</code></pre>

<p>will print <code>A</code> thousand times. If you wish to pass this to the C programme then you need a buffer of size at-least one greater than <code>1000</code>, the extra 1 is to accommodate the null character.</p>

<pre><code>#include &lt;stdio.h&gt; 
#include &lt;string.h&gt; // for strcpy
int main(int agrc, char* argv[])  
// int argc- is for number of arguments
// char* argv[] - argument strings separated by spaced
// each argument can be accessed by argv[1],argv[2] &amp; so on
{
   char name[1001]=""""; 
   // initialize name to null &amp; 1001 for the reason mentioned above
   printf(""%s\n"", name); 
   // %p specifier is for the pointer,i used %s here for the string
   fflush(stdout);
   /* 
    * This part of your code is useless if you wish
    * to store the name from the argument.
   puts(""What's your name?"");
   fflush(stdout);
   gets(name);
   */
   strcpy(name,argv[1]); // copying the cmd line argument to name.
   printf(""Hello, %s!\n"", name);
   return 0;
}
</code></pre>

<p>Now run it like</p>

<pre><code>$./a.out ""$(python -c 'print ""A""*1000')""
</code></pre>
","python"
"1809",37109161,"<p>Python has you covered here, just use the <a href=""https://docs.python.org/2/library/csv.html"" rel=""nofollow""><code>csv</code> module</a>:</p>

<pre><code>import csv

def readFile(filename):
    with open(filename, 'rb') as f:
        reader = csv.reader(f)
        return list(reader)
</code></pre>

<p>Your code makes several classical errors:</p>

<ul>
<li><code>str.split()</code> returns a list; you are trying to assign that list 4 times to indices of another list. Just use the list returned by <code>str.split()</code> directly.</li>
<li>Take into account that lines from a file come with the line-separator (<code>\n</code>) included; you probably want to strip that off first.</li>
<li>You started with an <em>empty</em> list. You can't assign to indices that are not there, use <code>list.append()</code> instead to add elements.</li>
<li>You don't need to test for <code>len(line) != 0</code>; just <code>if line:</code> is enough because empty strings are considered 'false' in a truth test. See <a href=""https://docs.python.org/2/library/stdtypes.html#truth-value-testing"" rel=""nofollow""><em>Truth Value Testing</em></a>.</li>
<li>You don't need to use <code>file.readline()</code> each time; just use a <code>for line in f:</code> loop and you'll get each line one by one, because file objects are <em>iterable</em>.</li>
<li>If you use your <a href=""http://effbot.org/zone/python-with-statement.htm"" rel=""nofollow"">file as a context manager</a> (by using the <code>with</code> statement), Python will close the file for you. </li>
</ul>

<p>So, without the <code>csv</code> module, you could write your code like this:</p>

<pre><code>def readFile(fileName):
    rows = []
    with open(fileName, 'r') as f:
        for line in f:
            columns = line.strip().split(',')
            rows.append(columns)
    return rows
</code></pre>
","python"
"1810",30643436,"<p>If you are getting an error, it might be because your np array dimensions are different. If your image is an RGB image, then your blank image should be defined as :</p>

<pre><code>blank_image = np.zeros((28,28,3), uint8)
</code></pre>
","python"
"1811",8356336,"<p>Unfortunatelly the example doesn't work with PySide. It gives the following error:</p>

<pre><code>sys.stdout = EmittingStream(textWritten=self.write2Console)
AttributeError: 'textWritten()' is not a Qt property or a signal
</code></pre>

<p>We need to make the following changes for it to work with PySide:</p>

<pre><code>sys.stdout = EmittingStream()
self.connect(sys.stdout,QtCore.SIGNAL('textWritten(QString)'),self.write2Console)
</code></pre>
","python"
"1812",24955475,"<p>You're passing a file object to <code>gaussian_kde</code> but it expects a NumPy array, you need to use <a href=""http://docs.scipy.org/doc/numpy/reference/generated/numpy.loadtxt.html"" rel=""nofollow""><code>numpy.loadtxt</code></a> first to load the data in an array:</p>

<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; arr = np.loadtxt('chk.bed')
&gt;&gt;&gt; arr
array([  7.25236 ,   0.197037,   0.189464,   2.60056 ,   0.      ,
        32.721   ,  11.3978  ,   3.85692 ,   0.      ,   0.      ])
&gt;&gt;&gt; gaussian_kde(arr)
&lt;scipy.stats.kde.gaussian_kde object at 0x7f7350390190&gt;
</code></pre>
","python"
"1813",31443559,"<p>I will give couple of solutions that might work for you, see which one fits your needs:</p>

<p>Solution -1 :</p>

<p>If you have these two strings before your targets (<code>ggg</code> &amp; <code>last12</code>), then:</p>

<pre><code>import re
p = re.compile(r'(?&lt;=ggg/|last12/)(\w+)', re.DOTALL)
test_str = ""/ggg-web/ggg/ab8efc05ee6105461869578b9ff0ee0048f37413340ec3ca3c924590c60b8ff2/statements/monthly/last12/ab8efc05ee6105461869578b9ff0ee0048f37413340ec3ca3c924590c60b8ff2/save/Stmnt_052015_6043""

re.findall(p, test_str)
</code></pre>

<p><a href=""https://regex101.com/r/iA5gX2/4"" rel=""nofollow"">DEMO HERE</a></p>

<p>Solution - 2:</p>

<p>If different strings precedes your targets but your target strings always start with <code>ab</code> then this is more general:</p>

<pre><code>import re
p = re.compile(r'/(ab\w+)/', re.DOTALL)
test_str = ""/ggg-web/ggg/ab8efc05ee6105461869578b9ff0ee0048f37413340ec3ca3c924590c60b8ff2/statements/monthly/last12/ab8efc05ee6105461869578b9ff0ee0048f37413340ec3ca3c924590c60b8ff2/save/Stmnt_052015_6043""

re.findall(p, test_str)
</code></pre>

<p><a href=""https://regex101.com/r/iA5gX2/3"" rel=""nofollow"">DEMO HERE</a></p>
","python"
"1814",4030269,"<p>This is the correct way to do an ipv6 connection:</p>

<pre><code>&gt;&gt;&gt; addrinfo = getaddrinfo('fe80::225:ff:fecd:5aa0%en0', 2001, AF_INET6, SOCK_STREAM)
&gt;&gt;&gt; addrinfo
[(30, 1, 6, '', ('fe80::225:ff:fecd:5aa0%en0', 2001, 0, 4))]
&gt;&gt;&gt; (family, socktype, proto, canonname, sockaddr) = addrinfo[0]
&gt;&gt;&gt; s = socket(family, socktype, proto)
&gt;&gt;&gt; s.connect(sockaddr)
</code></pre>

<p><code>getaddrinfo()</code> will return the correct numerical scope and flow information for you.</p>
","python"
"1815",30413784,"<p>The way users are managed on Unix and its derivatives is very different from Windows, so a module that supported both would need a much higher level of abstraction.</p>

<p>As the documentation you linked to makes clear, the <code>pwd</code> module is basically just a wrapper around access to the standard <code>/etc/passwd</code> file, exposing its fields directly. A Windows system would have no equivalent for fields such as ""shell"" and ""gecos"", and conversely there would be attributes of a Windows user for which there would be no field, making any wrapper fairly pointless.</p>
","python"
"1816",3774772,"<p>type <code>man at</code>, it will explain how to use it. Usage will slighty differ from system to system, so there's no use to tell you here exactly.</p>
","python"
"1817",9451545,"<p>Use <a href=""http://matplotlib.sourceforge.net/api/colors_api.html#matplotlib.colors.ListedColormap"" rel=""nofollow"">ListedColormap</a> and <a href=""http://matplotlib.sourceforge.net/api/colors_api.html#matplotlib.colors.BoundaryNorm"" rel=""nofollow"">BoundaryNorm</a>:</p>

<pre><code>import numpy as np
import matplotlib as mpl
from matplotlib import pyplot
data = np.floor(np.random.random((10,10)) * 6)
cmap = mpl.colors.ListedColormap(['w', 'b', 'g', 'y', '#ff8c00', 'r'])
norm = mpl.colors.BoundaryNorm([0,1,2,3,4,5,6], cmap.N)
pyplot.imshow(data, cmap=cmap, norm=norm, interpolation='none')
pyplot.colorbar()
pyplot.show()
</code></pre>

<p>Some examples of using ListedColormap: <a href=""http://matplotlib.sourceforge.net/examples/api/colorbar_only.html?highlight=listedcolormap"" rel=""nofollow"">colorbars</a>, <a href=""http://matplotlib.sourceforge.net/examples/pylab_examples/multicolored_line.html?highlight=listedcolormap"" rel=""nofollow"">multicolored lines</a>.</p>
","python"
"1818",15821751,"<p>Using boolean features encoded as 0 and 1 should work. If the predictive accuracy is bad even with a large number of decision trees in your forest it might be the case that your data is too noisy to get the learning algorithm to not pickup any think interesting.</p>

<p>Have you tried to fit a linear model (e.g. Logistic Regression) as a baseline on this data?</p>
","python"
"1819",33717323,"<p>You can try something like:</p>

<pre><code>import glob
import os
if i == 100:
    for f in glob.glob(""path_to_folder""):
        os.remove(f)
</code></pre>

<p>or To remove the whole directory, you can try:</p>

<pre><code>import shutil
if i == 100:
    shutil.rmtree(""path_to_folder"")
</code></pre>
","python"
"1820",23982255,"<p>You can use <code>func_name</code>:</p>

<pre><code>&gt;&gt;&gt; a = lambda x: x + 1
&gt;&gt;&gt; b = lambda y: y + 2
&gt;&gt;&gt; c = lambda z: z + 3
&gt;&gt;&gt; a.func_name = 'a'
&gt;&gt;&gt; b.func_name = 'b'
&gt;&gt;&gt; c.func_name = 'c'
&gt;&gt;&gt; z = a, b, c
&gt;&gt;&gt; d = {}
&gt;&gt;&gt; for f in z:
...     d[f.func_name] = f(10)
...
...
&gt;&gt;&gt; d
{'a': 11, 'c': 13, 'b': 12}
</code></pre>

<p>Using lambdas here, so everything is name <code>&lt;lambda&gt;</code>, but with proper functions, their <code>func_name</code>s will reflect their variable names.</p>
","python"
"1821",29121518,"<p>you should connect function.</p>

<p>and you call other Form like this</p>

<p>if you want only once call Form, remove thread.</p>

<pre><code>def create_setting(self):
    global Dialog     
    Dialog=QtGui.QDialog()
    thread.start_new_thread(start,(Dialog,))
    child = settingUI.Ui_Form()
    child.setupUi(Dialog)
    Dialog.setWindowFlags(Dialog.windowFlags()|QtCore.Qt.WindowSystemMenuHint|QtCore.Qt.WindowMinMaxButtonsHint)
    Dialog.show()
</code></pre>
","python"
"1822",36180688,"<pre><code>a = {'a': 1, 'b': 2, 'c': 3}
b = {'a': 10, 'd': 2, 'e': 3}

for k in b:
    if k not in a:
        a[k] = b[k]
</code></pre>

<p><strong>Update</strong></p>

<p>After the update to the question I would agree with BAH's implementation of using a defaultdict with a list</p>
","python"
"1823",27634270,"<p>I'm a bit late to answer this, but I think that this question remains unanswered and was the top hit on Google for me. Therefore, I think the following is the correct method</p>

<pre><code>x = np.linspace(0, 1, 100)
y = 10 * x + 2 + np.random.normal(0, 1, 100)

p, V = np.polyfit(x, y, 1, cov=True)

print ""x_1: {} +/- {}"".format(p[0], np.sqrt(V[0][0]))
print ""x_2: {} +/- {}"".format(p[1], np.sqrt(V[1][1]))
</code></pre>

<p>which outputs</p>

<pre><code>x_1: 10.2069326441 +/- 0.368862837662
x_2: 1.82929420943 +/- 0.213500166807
</code></pre>

<p>So you need to return the covariance matrix, <code>V</code>, for which the square root of the diagonals are the estimated standard-deviation for each of the fitted coefficients. This of course generalised to higher dimensions.</p>
","python"
"1824",37078543,"<p>Can do something like: </p>

<pre><code>df = df.astype('float64')
tmp = pd.DataFrame([{""score1"": df.score1.sum(), ""score2"":df.score2.sum(), ""time1"":df.time1.mean(), ""time2"":df.time2.median()}])
out = tmp.to_html(index=False)
</code></pre>

<p>which gives the table like so
<div class=""snippet"" data-lang=""js"" data-hide=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;table border=""1"" class=""dataframe""&gt;  &lt;thead&gt;    &lt;tr style=""text-align: right;""&gt;     &lt;th&gt;score1&lt;/th&gt;     &lt;th&gt;score2&lt;/th&gt;      &lt;th&gt;time1&lt;/th&gt;     &lt;th&gt;time2&lt;/th&gt;   &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt;   &lt;tr&gt;      &lt;td&gt;7&lt;/td&gt;     &lt;td&gt;18&lt;/td&gt;      &lt;td&gt;2.5&lt;/td&gt;      &lt;td&gt;2.65&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;</code></pre>
</div>
</div>
</p>
","python"
"1825",10302873,"<p>For me, I had to manually move the dll to the correct folder.<br>
Due to a bug in the AVBin installer, it installs in <code>C:\Windows\System32</code> when it should've been placed in <code>C:\Windows\SysWOW64</code> .<br>
(<strong>Assuming you are on Windows!</strong>)</p>

<p>To fix this, all you have to do is go into <code>C:\Windows\System32</code> and find <code>avbin.dll</code> (or <code>avbin64.dll</code> if you are on a 64 bit system) and manually cut-and-paste it into <code>C:\Windows\SysWOW64</code> .</p>

<p>(Or if you're me and downloaded both dlls then move both...)</p>
","python"
"1826",2757496,"<p>Having a decorator modify the global namespace if <em>any</em> module, let alone <em>another</em> module, is bad and never necessary. Code that mutates far-away globals is difficult to read and maintain. You should definitely consider modifying your design to avoid mutable global state and especially implicit assignment.</p>
","python"
"1827",9217687,"<p>Finally I just ditched pythonbrew and did a multi install of python.
Thereafter I used bash and profile to switch between my python environments.</p>
","python"
"1828",32728394,"<p>The set type supports the <code>|</code> operator to perform unions. It also supports the <code>.union</code> method. So what you want is probably</p>

<pre><code>items = set.union(*obj.values())
</code></pre>

<p>or</p>

<pre><code>items = obj['US'] | obj['FR'] | obj['BE']
</code></pre>

<p>if you want to be explicit.</p>
","python"
"1829",23152337,"<p>You can use <code>setattr()</code> to update attributes on an existing SQLAlchemy object dynamically:</p>

<pre><code>user = session.query(User).get(someid)

for key, value in yourdict.iteritems():
    setattr(user, key, value)
</code></pre>
","python"
"1830",14765351,"<p>List all processes that you have running with</p>

<pre><code>ps -a
</code></pre>

<p>Take the PID corresponding to python and pipe it into the kill command with (Example PID 2770)</p>

<pre><code>kill -9 2770
</code></pre>
","python"
"1831",39975996,"<p>You make some changes to your database, you:</p>

<ul>
<li>Change the default value of a field</li>
<li>You update all user entries so that their ""name"" field begins with a capital letter</li>
<li>You remove a model altogether</li>
</ul>

<p>So now you need to modify your database schema, get to it!</p>

<p>Chances are you haven't bothered to learn how to write SQL yet so you need to do that first... oh and then its sensitive data you're dealing with so you need to make sure you don't make any mistakes when your deleting that table (Bobby tables much?).. </p>

<p>This doesn't sound fun at all, and its error prone. Especially as you hire new people and then you need to make sure they don't delete EvilCorps data by mistake.</p>

<p>So, instead you opt for the framework that abstracts all these operations into a language that you write anyway, that you store within your source control, tagged to the developer that committed them.</p>

<p>So whats the benefit to the developer? Time and abstraction - the benefits of which I hope are obvious.</p>
","python"
"1832",31614804,"<p>Same logic, but just put all things in one line.</p>

<pre><code>import pandas as pd
import numpy as np

# artificial data
# ====================================
np.random.seed(0)
df = pd.DataFrame(np.random.randn(10,5), columns=list('ABCDE'))
df[df &lt; 0] = np.nan

        A       B       C       D       E
0  1.7641  0.4002  0.9787  2.2409  1.8676
1     NaN  0.9501     NaN     NaN  0.4106
2  0.1440  1.4543  0.7610  0.1217  0.4439
3  0.3337  1.4941     NaN  0.3131     NaN
4     NaN  0.6536  0.8644     NaN  2.2698
5     NaN  0.0458     NaN  1.5328  1.4694
6  0.1549  0.3782     NaN     NaN     NaN
7  0.1563  1.2303  1.2024     NaN     NaN
8     NaN     NaN     NaN  1.9508     NaN
9     NaN     NaN  0.7775     NaN     NaN

# processing: drop columns with no. of NaN &gt; 3
# ====================================
df.drop(df.columns[df.apply(lambda col: col.isnull().sum() &gt; 3)], axis=1)


Out[183]:
        B
0  0.4002
1  0.9501
2  1.4543
3  1.4941
4  0.6536
5  0.0458
6  0.3782
7  1.2303
8     NaN
9     NaN
</code></pre>
","python"
"1833",27217593,"<p>The error happens because a <code>Point</code> needs an <code>x</code> and a <code>y</code> argument, but you are only passing an <code>x</code> in the line where you try to create a <code>Rectangle</code>.</p>

<p>Not exactly sure what your code is trying to do, but hopefully this will help get you started in the right direction:</p>

<pre><code>from graphics import *

def house():
    win=GraphWin(800,500)
    win.setCoords(0.0,0.0,3.0,4.0)#reset coordinates
    Text(Point(1.5,3.5),""click spot to designate 2 corners of house"").draw(win)
    p1 = win.getMouse()
    p1.draw(win)
    p2 = win.getMouse()
    p2.draw(win)
    rectangle = Rectangle(p1, p2)
    rectangle.setWidth(3)
    rectangle.draw(win)
    win.getMouse()
    win.close()

house()
</code></pre>
","python"
"1834",2355743,"<p>if you look at the <a href=""http://docs.python.org/library/ftplib.html"" rel=""nofollow"">doc</a>, there's a timeout parameter. </p>

<p><code>class ftplib.FTP([host[, user[, passwd[, acct[, timeout]]]]])¶</code></p>

<p>maybe you can use that.</p>
","python"
"1835",21658751,"<p>Use <code>timeit</code>:</p>

<pre><code>import timeit

example = 'map(lambda x: x + 1, range(100000)'
t = timeit.Timer(example)
t.timeit()
</code></pre>

<p>If you want something more featureful, <a href=""http://stackoverflow.com/questions/1593019/is-there-any-simple-way-to-benchmark-python-script"">this question</a> may be relevant.</p>
","python"
"1836",10442082,"<ol>
<li>no, you need to use the table name, which in your case (Single-table inheritance) is <code>entities</code></li>
<li>no, these will not be merged. You can create two relationships, and have a (hybrid) property which would combine both, but this will only be for reading purposes, as when you would like to modify this property (for example, add <code>Transits</code>), you would still need to specify both sides (<code>start</code> and <code>end</code>).</li>
<li>I am not sure I understand the question here</li>
</ol>

<p><strong>update-1:</strong> as requested in comment, Concrete-Table inheritance code below:</p>

<pre><code>class Zone(Entity):
    __mapper_args__ = {'polymorphic_identity': 'zones'}
    __tablename__ = ""zones""
    id          = Column(Integer, ForeignKey('entities.id'), primary_key=True)
    @property
    def transits(self):
        return self.transits_from_here + self.transits_to_here

class Transit(Base):
    __tablename__ = ""transits""
    id          = Column(Integer, primary_key=True)
    start = Column(Integer, ForeignKey('zones.id'))
    end = Column(Integer, ForeignKey('zones.id'))

    s_zone = relationship(Zone, primaryjoin=(start==Zone.id), backref=""transits_from_here"")
    e_zone = relationship(Zone, primaryjoin=(end==Zone.id), backref=""transits_to_here"")
</code></pre>
","python"
"1837",25169939,"<p>Install python3x-dev and libpq-dev in your system before install psycopg2 in your virtualenv.</p>

<pre><code>apt-get install python3.4-dev libpq-dev
</code></pre>

<p>then in your virtualenv</p>

<pre><code>pip install psycopg2
</code></pre>
","python"
"1838",843277,"<p>A way that often works well for handling this kind of situation is to not explicitly check if the variable exists but just go ahead and wrap the first usage of the possibly non-existing variable in a try/except NameError:</p>

<pre><code># Search for entry.
for x in y:
  if x == 3:
    found = x

# Work with found entry.
try:
  print('Found: {0}'.format(found))
except NameError:
  print('Not found')
else:
  # Handle rest of Found case here
  ...
</code></pre>
","python"
"1839",31820655,"<p>I think no. You're forced to read the entire value of a column. You can divide the date in few columns, one for the year, another for the month, etc. , or store the date on an integer format if you want an aggressive space optimization. But it will doing the database worst about scalability and modifications.</p>

<p>The databases are slow, you must assume it, but they offer hardest things to do with C/C++.</p>

<p>If you think make a game and save your 'save game' on SQL forget it. Use it if you're doing a back-end server or a management application, tool, etc.</p>
","python"
"1840",16175923,"<p>What is this I don't even.</p>

<p>You're trying to make limits both a boolean for the while loop, and an integer for something else. </p>

<p>Try one of these methods:</p>

<ul>
<li>make a while loop that checks the validity of the input, rather than
try to read it as a boolean </li>
<li>make a while true loop, which will already break on the return statement if the input is correct.</li>
</ul>

<p>tl;dr replace <strong>while limits</strong> with <strong>while true</strong>. </p>
","python"
"1841",36394954,"<p>First of all you must use a <code>dict</code> to store the mapping of characters to <code>int</code>, you may use, <code>string</code> module to access all the lowercase characters, it makes your code less error prone. Secondly you just need to iterate over the characters in the lowercase string and access the mapped values as <code>int</code> from the given mapping:</p>

<pre><code>import string

mapping = dict(zip(string.ascii_lowercase, range(1, len(string.ascii_lowercase)+1)))


name = ""Anmol""
lowercase = name.lower()

print(""Your 'cleaned up' name is:"", lowercase)
print(""Your 'cleaned up name reduces to:"")

for char in lowercase:
    print mapping[char],
</code></pre>
","python"
"1842",15448594,"<p>If you are creating some 3D sparse array, you can save all the data in a dict:</p>

<pre><code>x={}
x[0,0,0] = 11
x[1,0,0] = 21
x[0,1,1] = 111
</code></pre>

<p>or:</p>

<pre><code>from collections import defaultdict
x = defaultdict(lambda :defaultdict(lambda :defaultdict(int)))

x[0][0][0] = 11
x[1][0][0] = 21
x[0][0][1] = 111
</code></pre>
","python"
"1843",8333658,"<p>Don't have your scripts write new scripts if you can avoid it – just write out a list of the PIDs, and then through them.
It's not very clear what you're trying to do, but creating and deleting scripts sounds like too much fragile magic.</p>

<p>To answer the question:
Python compiles all of the source and closes the file before executing it, so this is safe.</p>

<p>In general, unlinking an opened file is safe on Linux. (But not everywhere: on Windows you can't delete a file that is in use.)</p>

<p>Note that when you <code>import</code> a module, Python 2 compiles it into a <code>.pyc</code> bytecode file and interprets that. If you remove the <code>.py</code> file, Python will still use the <code>.pyc</code>, and vice versa.</p>
","python"
"1844",19211085,"<p>What about a dictionary:</p>

<pre><code>dct = {""new"":new_reports, ""read"":read_reports, ""accepted"":accepted_reports, ""denied"":denied_reports, ""resubmitted"":resubmitted_reports}
for report in reports:
    dct[report.status].append(report)
</code></pre>

<p>or, if there is a chance that a <code>report.status</code> is not in the dictionary, you can add a try/except block:</p>

<pre><code>dct = {""new"":new_reports, ""read"":read_reports,""accepted"":accepted_reports, ""denied"":denied_reports, ""resubmitted"":resubmitted_reports}
for report in reports:
    try:
        dct[report.status].append(report)
    except KeyError:
        continue
</code></pre>
","python"
"1845",37848349,"<p>Based on the example provided by you, I think what you are asking is probabilistic prediction for each of your test data points. You can do it easily by using the <code>predict_proba</code>  method of the LogisticRegression class (<a href=""http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html#sklearn.linear_model.LogisticRegression.predict_proba"" rel=""nofollow"">http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html#sklearn.linear_model.LogisticRegression.predict_proba</a>). This will give you the probabilities of each of the classes. The returned matrix should have a size of <code>2000 x 3</code> in your case. You can multiply them by 100 to get the necessary percentages for each of your class.</p>

<p>Hope that helps.</p>
","python"
"1846",31739232,"<p>Think about this part of your pattern:</p>

<pre><code>(?&lt;=STATE)\s+(?&lt;=:)
</code></pre>

<p>The first lookbehind says to find a place with ""STATE"" right before it.  The <code>\s+</code> says to match some whitespace.  The second lookbehind says to look behind (at what you have just matched) and find a colon.  That's impossible, because all you've matched is spaces.  You can't look back and find a colon without consuming it during the match.</p>

<p>A lookbehind in the middle of your expression doesn't mean ""skip ahead until you get past this part"".  It means to look back over what has already been matched and see if it matches the lookbehind expression.  It can only match against stuff that has already been consumed (unless it's at the beginning of your regex, in which case it will control where the match begins),</p>

<p>If you just want to get ""TEXAS"", you should capture it in a group and then extract the group after doing the match:</p>

<pre><code>&gt;&gt;&gt; data = ""STATE :   TEXAS""
&gt;&gt;&gt; re.search(""STATE\s+:\s+(\w+)"", data).group(1)
'TEXAS'
</code></pre>
","python"
"1847",11107139,"<p>gmail recently got a little more agressive with hiding images by default, you likely have to select ""always show images from"" in order to have the images show up without intervention. as far as why they aren't showing up in the correct place, no clue, IF, as you say, they display correctly in other clients.</p>

<p>Do you have the template HTML?</p>
","python"
"1848",2671877,"<p>You can definitely do what you want -- it's hard to tell what you're doing wrong without seeing your code, but I'd bet you have <code>clients = []</code> in your factory class instead of</p>

<pre><code>self.clients = []
</code></pre>

<p>in your factory class's <code>__init__</code> method.</p>
","python"
"1849",22552268,"<p>If you're using <code>matplotlib</code>, then what you are looking for is <code>plt.savefig()</code>. The documentation is here: <a href=""http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.savefig"" rel=""nofollow"">http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.savefig</a></p>

<p>For example:</p>

<pre><code>import matplotlib.pyplot as plt
import numpy as np

# Some random data:
x = np.random.rand(100)

fig = plt.figure(1)         # create a figure instance
ax = fig.add_subplot(111)   # and axes
ax.hist(x)                  # plot the histogram

# plt.show()                # this would show the plot, but you can leave it out 

# Save the figure to the current path
fig.savefig('test_image.png') 
</code></pre>
","python"
"1850",24738368,"<p>The <code>hepsi</code> view uses the <code>slug</code> kwarg, so the <code>slug</code> is required in the url:</p>

<pre><code>url(r'^(?P&lt;slug&gt;[-w]+)/$', 'hepsi', name = ""hepsiliste"")
</code></pre>
","python"
"1851",25776332,"<p>There is no way to partially download an HTML page. You will have just skip these lines you don't need. Especially if you know the exact number. So while you read your html page line by line, count the lines and write only ones which number is higher than the required. 1200 in your case.</p>
","python"
"1852",21031402,"<p>Surely this would suffice?</p>

<pre><code>import os

for i in range(1,1000):
    if not os.path.exists(""delta{}.png"".format(i)):
        print ""delta{}.png didn't exist"".format(i)
</code></pre>

<p>Edit, it starts at 1 and goes up to 1000 (delta1.png, delta2.png...etc you'll want to change it so it's 001, 002...etc)</p>
","python"
"1853",31750153,"<pre><code>import datetime as dt
begin = dt.datetime.now() - dt.timedelta(minutes=60)
cur.execute('''SELECT dtcol 
               FROM your_table 
               WHERE dtcol &gt;= %s''',(begin,))
row = cur.fetchone() # get first row of resultset
</code></pre>
","python"
"1854",6037396,"<p>For part a), read how to use <a href=""http://docs.python.org/tutorial/datastructures.html"" rel=""nofollow""><code>list.sort()</code></a>.  For part b), read <a href=""http://stackoverflow.com/questions/2582138/finding-and-replacing-elements-in-a-list-python"">this previous question</a> on how to replace items in a list.</p>
","python"
"1855",836387,"<pre><code>def func(files):
    for f in files if not isinstance(files, basestring) else [files]:
        doSomethingWithFile(f)

func(['file1', 'file2', 'file3'])

func('file1')
</code></pre>
","python"
"1856",27975247,"<p>Here is the correct code, if your code isn't working for you even after the indentation is fixed:</p>

<pre><code>def car_cost(days):
    cost = 40*days
    if days&gt;=7:
        cost = cost-50
    elif days&gt;=3:
        cost = cost-20
    return cost
</code></pre>

<p>INDENTATION MATTERS IN PYTHON!</p>

<p>Here is your code indented properly.</p>

<pre><code>def rentalcarcost(days):
    cost = 40 * days
    if days &gt;= 7:
        return cost - 50
    elif days &gt;= 3:
        return cost - 20
    else:
        return cost
</code></pre>
","python"
"1857",28722985,"<p>I think you are using different virtual environments for both the projects, and so the package is installed in one virtualenv, and not in the other.</p>

<p>To verify this is the case,  do a <code>pip freeze</code> in both the projects and compare the results.</p>

<p>If there is a single environment, the output will be same, otherwise the outputs will be different amongst the two.</p>
","python"
"1858",627772,"<p>I'm not completely sure I understand what you are attempting to do, but perhaps something like <a href=""http://docs.djangoproject.com/en/dev/ref/contrib/admin/#filter-horizontal"" rel=""nofollow"">filter_horizontal</a> would do what you want.</p>
","python"
"1859",865082,"<ol>
<li>First create the shell </li>
<li>Decouple the shell from your app by making its locals empty</li>
<li>Create your code string</li>
<li>Compile the code string and get a code object</li>
<li>Execute the code object in the shell</li>
</ol>

<pre>
    from wx.py.shell import Shell

    frm = wx.Frame(None)
    sh = Shell(frm)
    frm.Show()    
    sh.interp.locals = {}
    codeStr = """"""
    from multiprocessing import Process, Queue

    def f(q):
        q.put([42, None, 'hello'])

    q = Queue()   
    p = Process(target=f, args=(q,))
    p.start()
    print q.get()    # prints ""[42, None, 'hello']""
    p.join()
    """"""

    code = compile(codeStr, '', 'exec')
    sh.interp.runcode(code)

</pre>

<p>Note:
The codeStr I stole from the first poster may not work here due to some pickling issues. But the point is you can execute your own codeStr remotely in a shell.</p>
","python"
"1860",31319888,"<p><code>df2.combine_first(df1)</code> (<a href=""http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.combine_first.html"">documentation</a>)
seems to serve your requirement; PFB code snippet &amp; output</p>

<pre><code>import pandas as pd

print 'pandas-version: ', pd.__version__

df1 = pd.DataFrame.from_records([('2015-07-09 12:00:00',1,1,1),
                                 ('2015-07-09 13:00:00',1,1,1),
                                 ('2015-07-09 14:00:00',1,1,1),
                                 ('2015-07-09 15:00:00',1,1,1)],
                                columns=['Dt', 'A', 'B', 'C']).set_index('Dt')
# print df1

df2 = pd.DataFrame.from_records([('2015-07-09 14:00:00',2,2,2,2),
                                 ('2015-07-09 15:00:00',2,2,2,2),
                                 ('2015-07-09 16:00:00',2,2,2,2),
                                 ('2015-07-09 17:00:00',2,2,2,2),],
                               columns=['Dt', 'A', 'B', 'C', 'D']).set_index('Dt')
res_combine1st = df2.combine_first(df1)
print res_combine1st
</code></pre>

<h2>output</h2>

<pre><code>pandas-version:  0.15.2
                     A  B  C   D
Dt                              
2015-07-09 12:00:00  1  1  1 NaN
2015-07-09 13:00:00  1  1  1 NaN
2015-07-09 14:00:00  2  2  2   2
2015-07-09 15:00:00  2  2  2   2
2015-07-09 16:00:00  2  2  2   2
2015-07-09 17:00:00  2  2  2   2
</code></pre>
","python"
"1861",2070643,"<pre><code>list(set([x for x in a if x not in b]))
</code></pre>

<ul>
<li>Leaves <code>a</code> and <code>b</code> untouched.</li>
<li>Is a unique set of ""a - b"".</li>
<li>Done. </li>
</ul>
","python"
"1862",25847598,"<p>In TKinter there is three basic Geometry manager : Grid, Pack, Place.</p>

<p>You should try to avoid the use of place as often as possible using instead Grid or pack ( I personally consider that only grid is a good manager, but this is only my opinion).</p>

<p>In your code you are setting a position to your widget using place manager, and then give the control to the pack manager. Just remove the <code>scoreLabel.pack()</code> et voila!</p>

<p>NB : your application is 700px high, and you are trying to place your red label at 750px from the top, you're widget will be outside of the screen.</p>

<p>NBB : I strongly recommend the use of grid manager.</p>

<pre><code>from tkinter import *
root = Tk()
root.geometry(""800x700+0+0"")

#---------Backgroud of the main canvas-----`enter code here`-------

backGroundCanvas = Canvas(root,bg = 'white', width = 800, height = 600)
backGroundCanvas.focus_set()
backGroundCanvas.pack()

#--------------------------------------------------

#--------The other widgets out of the canvas--------

scoreLabel = Label(root, text = 'Your score is: 0', bg = 'red')
scoreLabel.place(x = 300, y = 600)

root.mainloop()
</code></pre>
","python"
"1863",33093002,"<p>There are several issues here.</p>

<ul>
<li><p>Your <code>math</code> gets replaced every time (e.g. <code>"""" + "" 2 "" + "" - ""</code>), thus you never get to build longer sequences. You want to make <code>result</code> longer in each iteration: <code>result = result + num_gen + op_gen</code>, instead of always creating a new <code>math</code> with an empty <code>result</code>.</p></li>
<li><p>You never <code>return</code> anything. You will want to <code>return result</code> when the loop is finished.</p></li>
<li><p>You are now generating <code>num</code> numbers and <code>num</code> operators; that will produce equations like <code>1  +  3  *</code>, which are a bit unbalanced. You will want to put only <code>num - 1</code> pairs, and then one more number.</p></li>
<li><p>There are easier ways to make a string out of a number; <code>str(num)</code> will do what you do in twenty lines, just without the spaces.</p></li>
<li><p>With <code>operator</code> from 1 to 4, you will be generating as many <code>*</code> as you do <code>+</code> and <code>-</code> combined. Intentional?</p></li>
</ul>
","python"
"1864",3949310,"<p>I think its a common mistake, <code>set</code> lookup (or hashtable for that matter) are not O(1).<br>
<a href=""http://en.wikipedia.org/wiki/Hash_table#Performance_analysis"" rel=""nofollow"">from the Wikipedia</a></p>

<blockquote>
  <p>In the simplest model, the hash function is completely unspecified and the table does not resize. For the best possible choice of hash function, a table of size n with open addressing has no collisions and holds up to n elements, with a single comparison for successful lookup, and a table of size n with chaining and k keys has the minimum max(0, k-n) collisions and <strong>O(1 + k/n)</strong> comparisons for lookup. For the worst choice of hash function, every insertion causes a collision, and hash tables degenerate to linear search, with O(k) amortized comparisons per insertion and up to k comparisons for a successful lookup.</p>
</blockquote>

<p>Related: <a href=""http://stackoverflow.com/questions/1055243/is-a-java-hashmap-really-o1"">Is a Java hashmap really O(1)?</a></p>
","python"
"1865",13647852,"<p>You can use item access to get to the innermost string:</p>

<pre><code>translation['translations'][0]['translatedText']
</code></pre>

<p>or you could loop over all the translations listed (it's a list):</p>

<pre><code>for trans in translation['translations']:
    print trans['translatedText']
</code></pre>

<p>as Google's translation service can give more than one translation for a given text.</p>
","python"
"1866",35994465,"<p>One option would be to capture everything after the beginning of the string or a comma, until <code>[</code> and extracting the number after the <code>[+</code>:</p>

<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = ""look[+3],panel button layout[+3],feature[+2]it 's very sleek looking with a very good front panel button layout , and it has a great feature set . ""
&gt;&gt;&gt; re.findall(r""(?:^|,)(.*?)\[\+?(\-?\d+)\]"", s)
[('look', '3'), ('panel button layout', '3'), ('feature', '2')]
&gt;&gt;&gt;
&gt;&gt;&gt; s = ""darn diopter adjustment dial[-1]""
&gt;&gt;&gt; re.findall(r""(?:^|,)(.*?)\[\+?(\-?\d+)\]"", s)                                                            
[('darn diopter adjustment dial', '-1')]
</code></pre>

<p>where:</p>

<ul>
<li><code>(?:^|,)</code> is a non-capturing group that would either match the beginning of a string or a comma</li>
<li><code>(.*?)</code> is a <em>non-greedy</em> match for any character any number of times</li>
<li><code>\[\+?(\-?\d+)\]</code> would match an opening <code>[</code> followed by an optional <code>+</code> followed by a capturing group that would capture one or more digits (with an optional <code>-</code> at the beginning), followed by a closing <code>]</code></li>
</ul>
","python"
"1867",25281564,"<p>Use a nested <a href=""https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions"" rel=""nofollow"">list comprehension</a> as shown below.</p>

<pre><code>x =  (((-300, 49.3878), (-300, 400), (-220.045, 400), (-169.193, 204.22), (-300, 49.3878)))

y = tuple(tuple(i / 100.0 for i in inner) for inner in x)

# You can remove the tuple and instead use [] if you don't mind it being a list.
y_list = [[i / 100.0 for i in inner] for inner in x]
</code></pre>
","python"
"1868",19233132,"<p>So, the solution is:</p>

<ol>
<li>Upgrade uWSGI to recent stable version (as roberto suggested).</li>
<li>Use --thunder-lock option. </li>
</ol>

<p>Now I'm running with 50 threads per process and all requests are distrebuted between processes equally.</p>
","python"
"1869",14651825,"<p>If your file isn't huge, you can just read all the lines at once:</p>

<pre><code>lines = f.readlines()
columns = lines[0].strip().split(',')
numRows = 0
sums = columns
for line in lines:
    values = line.split(',')
    for i in xrange(len(values)):
        sums[i] = float(values[i])
</code></pre>
","python"
"1870",32700927,"<p>I don't get what you're doing there, but the outcomes definitely are not all equally probable for your code. Therefore the code is not working and actually StackOverflow might be the right place even though you don't know it.<br>
How do I know that your code doesn't work? The <a href=""https://en.wikipedia.org/wiki/Law_of_large_numbers"" rel=""nofollow"">Law of Large Numbers</a>! It looked suspicious so I just generated one million samples with your function and got this distribution:</p>

<p><a href=""http://i.stack.imgur.com/iZ2Qk.png"" rel=""nofollow""><img src=""http://i.stack.imgur.com/iZ2Qk.png"" alt=""Barplot showing estimated probabilities for outcomes of OP&#39;s function""></a></p>

<p>Note that the y-Axis' scaling is logarithmic, those estimated probabilities vary <em>a lot</em>!</p>

<p>So now some code that is both a lot faster and actually producing equally probable results:</p>

<pre><code>def random_multisplitter(word):
    # add's bits will tell whether a char shall be added to last substring or
    # be the beginning of its own substring
    add = random.randint(0, 2**len(word) - 1)

    # append 0 to make sure first char is start of first substring
    add &lt;&lt;= 1

    res = []
    for char in word:
        # see if last bit is 1
        if add &amp; 1:
            res[-1] += char
        else:
            res.append(char)
        # shift to next bit
        add &gt;&gt;= 1

    return res
</code></pre>

<p>This is what Blckknght suggested and, believe me or not, I had the same idea about an hour before they posted their comment, but I had no time to write this answer.<br>
Anyway, here are the estimated probabilities of that function:</p>

<p><a href=""http://i.stack.imgur.com/TDm4q.png"" rel=""nofollow""><img src=""http://i.stack.imgur.com/TDm4q.png"" alt=""Barplot showing estimated probabilities of outcomes of this function.""></a></p>

<p>All gathered around 1/64=0.015625 (green line) suggesting that the probability distribution is uniform.</p>

<p>The timings on my machine using python2.7 are 4.56 µs for this function and 20.1 µs for your function.</p>
","python"
"1871",11747914,"<p>Or try <strong>import</strong> (been around a while I believe) or importlib (added in python 2.7):</p>

<p>import"">http://docs.python.org/library/functions.html#<strong>import</strong>
http://docs.python.org/library/importlib.html#importlib.import_module</p>
","python"
"1872",35398777,"<p>You can use a generator:</p>

<pre><code>&gt;&gt;&gt; string = ""2016.png random characters vjifj903%.png unpredictable characters""
&gt;&gt;&gt; print("" "".join((""myserver.com/"" * word.endswith("".png"")) + word for word in string.split())
myserver.com/2016.png random characters myserver.com/vjifj903%.png unpredictable characters
</code></pre>

<p>If you want the words to be separated in the string, then it's simpler:</p>

<pre><code>&gt;&gt;&gt; string = ""2016.png random characters vjifj903%.png unpredictable characters""
&gt;&gt;&gt; print [(""myserver.com/"" * word.endswith("".png"")) + word for word in string.split()]
['myserver.com/2016.png', 'random', 'characters', 'myserver.com/vjifj903%.png', 'unpredictable', 'characters']
</code></pre>
","python"
"1873",12362868,"<p>This is the fastest I can find</p>

<pre><code>from itertools import imap
from operator import mul
def sumsquared(arr):
    return sum(imap(mul, arr, arr))
</code></pre>
","python"
"1874",4701037,"<p>A little late to the game, but I had success doing the following on OSX 10.6.7:</p>

<pre><code>easy_install pip
</code></pre>

<p>then:</p>

<pre><code>pip install pymongo
</code></pre>
","python"
"1875",32633286,"<p>So I also emailed the PubChem guys and they got back to me very quickly with this response:</p>

<blockquote>
  <p>The only bulk access we have to images is through the download
  service:   <a href=""https://pubchem.ncbi.nlm.nih.gov/pc_fetch/pc_fetch.cgi"" rel=""nofollow"">https://pubchem.ncbi.nlm.nih.gov/pc_fetch/pc_fetch.cgi</a><br>
  You can request up to 50,000 images at a time.</p>
</blockquote>

<p>Which is better than I was expecting, but still not <em>amazing</em> since it requires downloading things that I in theory could generate locally. So I'm leaving this question open until some kind soul writes an open source library to do the same.</p>

<p>Edit:</p>

<p>I figure I might as well save people some time if they are doing the same thing as I am. I've created a Ruby Gem backed on Mechanize to automate the downloading of images. Please be kind to their servers and only download what you need.</p>

<p><a href=""https://github.com/zachaysan/pubchem"" rel=""nofollow"">https://github.com/zachaysan/pubchem</a></p>

<p><code>gem install pubchem</code></p>
","python"
"1876",11666566,"<p>Loggers are hierarchical. So you have a root logger (named <code>''</code>, i.e. blank). Every other logger is a child of the root logger - eventually.</p>

<p>In your case, you have this hierarchy:</p>

<pre><code> root
   +-- NodeCommsConnection
</code></pre>

<p>If you log something on the child, it will try to handle it and then pass the log message to the parent logger <strong>unless</strong> you set <code>propagate</code> to <code>False</code>.</p>

<p>Since you add an appender to <code>NodeCommsConnection</code>, it will log its messages using this appender and then call root which will log using its appender -> two outputs on the console.</p>

<p>So either add your appender to the root logger (and remove the default console logger) or set <code>propagate</code> to <code>False</code>:</p>

<pre><code>logging.getLogger('NodeCommsConnection').propagate = False
</code></pre>
","python"
"1877",29551977,"<p>Just like <a href=""http://stackoverflow.com/questions/29551977/why-is-it-keep-on-asking-when-i-input-correctly#comment47255304_29551977"">@nneonneo</a>'s comment pointed out, you forgot to update <code>month</code>, <code>date</code> and <code>year</code>.</p>

<p>This would cause your while-loop to only use the very first recorded values for these fields.</p>

<p>Your current problem can be solved simply by adding this code at the end of each while-loop:</p>

<pre><code> user = input(""Enter according to mm/dd/yy:"")
 month,date,year = user.split('/')
</code></pre>

<p>As you might have guessed, the above is a nicer implementation of this piece of code from your question:</p>

<pre><code> user = input(""Enter according to mm/dd/yy:"")
 user = user.split('/')
 month = user[0]
 date = user[1]
 year = user[2]
</code></pre>

<p>This would reduce the clutter in every while-loop.</p>

<p>Also, assuming your current indentation is correct, your code won't give you your desired output because it is not accounting for the case where the user starts with all 3 invalid fields: <code>month</code>, <code>date</code> and <code>year</code>. If the user enters a correct month first, he would be able to enter an invalid month later on and still produce an output. </p>

<p>Instead of using three while loops, you should use an <code>if-elif-else</code> block. This would ensure you get a proper answer:</p>

<pre><code>def main():

    user = input(""Enter according to mm/dd/yy:"")
    month,date,year = user.split('/')

    while True:

        if int(month) &gt; 12  or int(month) &lt; 1 :
            print(""Month is incorrect."")
        elif int(date) &gt; 31 or int(date) &lt; 0:
            print(""Date is incorrect."")
        elif int(year) &gt; 15 or int(year) &lt; 15:
            print(""Year is incorrect."")
        else:
            break
        user = input(""Enter according to mm/dd/yy:"")
        month,date,year = user.split('/')

main()
</code></pre>
","python"
"1878",26685275,"<p>you have 2 errors, firstly raw_input is returning string, you need to make it to a int. Also as @karthikr pointed out your logic if a bit off. </p>

<pre><code>n = raw_input(""Number (with optional text): "")
k = int(n)  
if k in [n1, n2, n3]:
    print ""Not what I want""
elif k in [n12, n13]:
    print ""Dis I want""
</code></pre>
","python"
"1879",1101272,"<p>Your options for reading the DWARF debugging information are unfortunately quite limited.</p>

<p>As far as I know there is only one general purpose library for parsing DWARF debugging information and that is <a href=""http://reality.sgiweb.org/davea/dwarf.html"" rel=""nofollow"" title=""libdwarf"">libdwarf</a>. Unfortunately no one has written Python bindings for libdwarf (maybe you could take it up upon yourself and share it with everyone else :) ) You could certainly attempt to access the library's functions using <a href=""http://docs.python.org/library/ctypes.html"" rel=""nofollow"" title=""ctypes"">ctypes</a> or the <a href=""http://docs.python.org/c-api/"" rel=""nofollow"" title=""Python C/C++ API"">Python C API</a>.</p>

<p>A much less elegant solution, however, is to use an existing DWARF parser and parse the textual information it outputs. Your options for this (on Linux) are</p>

<pre><code>objdump -W
readelf --debug-dump=[OPTIONS]
</code></pre>

<p>I currently use a project that builds off of readelf and it's support for the DWARF debugging information is very full featured. You could simply use Python to execute either command in the shell and then parse the information as you need. Certainly not as ideal as a library, but should do the trick.</p>

<p>EDIT: I noticed in a previous comment you mentioned Windows. Both of these programs(objdump and readelf) are part of GNU-binutils, so they should be available with Cygwin or mingw.</p>
","python"
"1880",15151554,"<p>Pymongo developer here - just in case you are not doing so please make sure that you are using the latest pymongo version and <code>MongoClient</code> or <code>MongoRepicaSetClient</code> so your writes are acknowledged and not fire and forget.  As @Alex says, they will most likely be what you require.</p>

<p>Other considerations I would have are: is this the primary use case for the database or just the core pain point?  You may want to consider other data patterns, querying the data, ease of use and maintainability before making your decision.</p>
","python"
"1881",11098446,"<p>You can use the following functions to get the version information:</p>

<pre><code>Gtk.get_major_version()
Gtk.get_minor_version()
Gtk.get_micro_version()
</code></pre>
","python"
"1882",26315751,"<p>The correct way of using a virtual environment in python is as follows:</p>

<pre><code>mkdir somefolder
cd somefolder
virtualenv venv
source ./venv/bin/activate
pip install yolk
...do some more stuff...
deactivate
</code></pre>

<p>You don't need <code>sudo</code> when using a virtualenv</p>
","python"
"1883",21470509,"<pre><code>import numpy
a = numpy.arange(9).reshape(3,3)
b = numpy.arange(60).reshape(20,3)
c1 = numpy.dot(b, a.T) # as in the answer of senderle
c2 = numpy.einsum('ji,ki-&gt;kj',a,b)
</code></pre>

<p>and the resulting c1 and c2 are both the same as what you wish (verified with your <code>c[i] = np.dot(a, b[i])</code> )</p>

<p>the advantage of <code>numpy.einsum</code> is that this trick <code>'ji,ki-&gt;kj'</code> telling what has to be done on what dimension also works for larger dimensions.</p>

<p><strong>more explanation on einsum</strong></p>

<p>for example, if you want to do the following operation:</p>

<pre><code>a = numpy.arange(60.).reshape(3,4,5)
b = numpy.arange(24.).reshape(4,3,2)
d1 = numpy.zeros((5,2))

for i in range(5):
    for j in range(2):
        for k in range(3):
            for n in range(4):
                d1[i,j] += a[k,n,i] * b[n,k,j]
</code></pre>

<p>you can do the same thing much faster by doing:</p>

<pre><code>d2 = numpy.einsum('kni,nkj-&gt;ij', a, b) 
# the 'kni,nkj-&gt;ij' is what you otherwise do with the indices as in 
# d1[i,j] += a[k,n,i] * b[n,k,j]
</code></pre>

<p>or if you do not like this way of specifying what has to happen, you can also use  <code>numpy.tensordot</code> instead of <code>numpy.einsum</code>, and specify the axes as follows: </p>

<pre><code>d3 = numpy.tensordot(a,b, axes=([1,0],[0,1])) 
</code></pre>

<p>so this einsum method is very general and can be used to shortcut for-loops (that are otherwise slow, if you do them in python), and are very interesting for funky tensor-stuff </p>

<p>for more info, see <a href=""http://docs.scipy.org/doc/numpy/reference/generated/numpy.tensordot.html"" rel=""nofollow"">http://docs.scipy.org/doc/numpy/reference/generated/numpy.tensordot.html</a> and <a href=""http://docs.scipy.org/doc/numpy/reference/generated/numpy.einsum.html"" rel=""nofollow"">http://docs.scipy.org/doc/numpy/reference/generated/numpy.einsum.html</a> </p>
","python"
"1884",38054679,"<p>Your launcher.py seems to be at the ""test_module"" level already.
Did you try <code>import test_submodule.app</code> ?</p>

<p><strong><em>EDIT</em></strong></p>

<p>Try <code>from test_submodule import app</code></p>
","python"
"1885",5755174,"<p>I found this reference useful - not always perfect, but usually useful: <a href=""http://infohost.nmt.edu/tcc/help/pubs/tkinter/index.html"">http://infohost.nmt.edu/tcc/help/pubs/tkinter/index.html</a></p>

<p>Also contains explanations of layout management and the event model. Since it's for Python 2.5, the code examples won't run out of the box on Python 3, but the method names shouldn't have changed, only the modules were renamed and reorganized (the <code>tk*</code> modules containing popups are now in the <code>tkinter</code> package).</p>
","python"
"1886",39097545,"<p>Your question is a bit too generic as it stands - making it here rather than comment for clarity.</p>

<p>If you're talking about deploying to GAE (Google App Engine) then most likely you cannot re-use your Ansible scripts as you've been writing for vagrant. As it may be possible to use Ansible to deploy on GAE, most people I know are using standard google <a href=""https://cloud.google.com/python/django/appengine"" rel=""nofollow"">procedure</a> to deploy their app. </p>

<p>If you plan to use GCE (Google Compute Engine, a layer down in the infrastructure), you would be able to use your existing Ansible provisioning scripts (maybe with slight modification), follow along the <a href=""http://docs.ansible.com/ansible/guide_gce.html"" rel=""nofollow"">Ansible documentation</a> </p>
","python"
"1887",28649883,"<p>You can use <code>str</code> function to convert your int numbert to string then use <code>+</code> to concatenate the <code>kg</code> , in a list comprehension:</p>

<pre><code>&gt;&gt;&gt; [str(i)+""'kg"" for i in list_without_units]
[""1'kg"", ""2'kg"", ""3'kg""]
</code></pre>

<p><em>Note</em> that if you want to use <code>'</code> as separator you need to put one quote inside double quote! else you can do the following :</p>

<pre><code>&gt;&gt;&gt; [str(i)+""kg"" for i in list_without_units]
['1kg', '2kg', '3kg']
</code></pre>
","python"
"1888",21765586,"<p>I use:</p>

<pre><code>SELECT RDB$RELATION_NAME FROM RDB$RELATIONS
WHERE (RDB$SYSTEM_FLAG &lt;&gt; 1 OR RDB$SYSTEM_FLAG IS NULL) AND RDB$VIEW_BLR IS NULL
ORDER BY RDB$RELATION_NAME;
</code></pre>
","python"
"1889",8290781,"<p>Tkinter would be enough for this.</p>

<p>You can create any level of complexity on the layout even with the ""grid"" 
layout manager, which allows you to specify ""columnspam"" and ""rowspam"" for widgets that
will take more than a single cell.</p>
","python"
"1890",16812980,"<pre><code>def has22(nums):
    for x in range(len(nums)-1):
        if (nums[x] == 2) and (nums[x+1] == 2):
            return True
    return False
</code></pre>

<p>I have just corrected your code. It runs in linear time so don't see any reason to work on it further.</p>

<p>Here is the running code on codebunk. <a href=""http://codebunk.com/bunk#-Ivk7Xw2blX3cIWavI17"" rel=""nofollow"">http://codebunk.com/bunk#-Ivk7Xw2blX3cIWavI17</a></p>
","python"
"1891",25314267,"<p>You <em>can</em> do this in Python by tinkering with the <code>dict</code> that holds local or global variables, <code>locals()</code> and <code>globals()</code>. However, manipulating these structures is considered dangerous and in some cases it may not work as the programmer (or a later person reading the code) expects.</p>

<p>Usually, when a program needs to associate a particular string name with some value, the right Python data structure is a <code>dict</code> that uses the string values as the keys. In your case it could look like this:</p>

<pre><code>letter_dict = {}
alphaString = ['a', 'b', 'c', 'd', 'e']
for letter in alphaString:
    letter_dict[letter] = []

rowOfValues = [""alpha"", ""bravo"", ""charlie"", ""delta"", ""echo""] 
#Length of rowOfValues supposed to be same length as alphaString
#There would be many rows being run through a bigger loop that includes this code, but I'll keep it to just this one row for simplicity

for i in range (0, len(alphaString)):
    if rowOfValues[i] not in letter_dict[alphaString[i]]: #Ex. if ""alpha"" not in list a
            letter_dict[alphaString[i]].append(rowOfValues[i]) #Ex.  a.append(""alpha"")
</code></pre>

<p>At the end, <code>letter_dict</code> would have entries such as:</p>

<pre><code>{'a': ['alpha'], 'b': ['bravo'], ...}
</code></pre>

<p>There are much cleaner ways to write the code you have in your example as well, using dictionary comprehensions, for example. And if you need to reference the entire set of names that have been associated, you can just request the list of keys from the dictionary: <code>letter_dict.keys()</code>.</p>

<p>The Python standard library <code>collections</code> also has a special kind of <code>dict</code> called <code>defaultdict</code>. This kind of data structure accepts a function that can be called whenever a particular key is not already found in the dictionary. If you chose to use that structure, you could get rid of the need to initialize the empty lists explicitly as you do:</p>

<pre><code>from collections import defaultdict

# Make an empty dict where, if a key is requested and not found, an empty list
# will be stored for that key as the default.
letter_dict = defaultdict(lambda: []) 
</code></pre>

<p>Then you can skip the loop of <code>for letter in alphaString</code>.</p>
","python"
"1892",24519671,"<p>You can find your input using text of label <code>//*[contains(text(),'Plan ID:')]/ancestor::div[2]//input</code> or you can find label by text and get id of element for this label <code>//input[@id=(//label[contains(text(),'Plan ID:')]/@for)]</code></p>
","python"
"1893",2017930,"<p>It's hard to say without more information, but having the following relations would be sensible, based on what you've said:</p>

<pre><code>Quiz (id, title)
Question (id, question, answer)
QuizQuestion (quiz_id, question_id)
</code></pre>

<p>That way questions can appear in multiple quizzes. </p>
","python"
"1894",34583483,"<p>Here is the program with some nice printing using the format function:</p>

<pre><code>import os
import time

path = os.getcwd()

def file_info(directory):
    file_list = []
    for i in os.listdir(directory):
        a = os.stat(os.path.join(directory,i))
        file_list.append([i,time.ctime(a.st_atime),time.ctime(a.st_ctime)]) #[file,most_recent_access,created]
    return file_list


file_list = file_info(path)

for item in file_list:
    line = ""Name: {:&lt;20} | Last Accessed: {:&gt;20} | Date Created: {:&gt;20}"".format(item[0],item[1],item[2])
    print(line)
</code></pre>

<p>Here is some code with a sort function being used on the <strong>accessed time</strong>. The code is not optimized but it is very readable and you should be able to understand it. </p>

<pre><code>import os
import time

path = os.getcwd()

def file_info(directory,sortLastModifiedOrNaw=False):
    file_list = []
    currentMin = 0 #This is the variable that will track the lowest digit
    for i in os.listdir(directory):
        a = os.stat(os.path.join(directory,i))
        if sortLastModifiedOrNaw == True: #If you would like to sort.
            if a.st_atime &gt; currentMin: #Check if this is bigger than the current minimum. 
                currentMin = a.st_atime #If it is we update the current minimum
                #Below we append so that it ends up in the end of the list
                file_list.append([i,time.ctime(a.st_atime),time.ctime(a.st_ctime)]) #[file,most_recent_access,created]
            else: #If it is smaller, it should be in the front of the list so we insert it into position 0. 
                file_list.insert(0,[i,time.ctime(a.st_atime),time.ctime(a.st_ctime)]) #[file,most_recent_access,created]
        else: #If you would not like to sort
            file_list.append([i,time.ctime(a.st_atime),time.ctime(a.st_ctime)]) #[file,most_recent_access,created]
    return file_list


file_list = file_info(path)

print(""Unsorted Example"")
for item in file_list:
    line = ""Name: {:&lt;20} | Date Last Accessed: {:&gt;20} | Date Created: {:&gt;20}"".format(item[0],item[1],item[2])
    print(line)

print(""\nSorted example using last modified time"")
file_list = file_info(path,sortLastModifiedOrNaw=True)

for item in file_list:
    line = ""Name: {:&lt;20} | Date Last Accessed: {:&gt;20} | Date Created: {:&gt;20}"".format(item[0],item[1],item[2])
    print(line)
</code></pre>

<p>Sample output:</p>

<pre><code>Unsorted Example
Name: .idea                | Date Last Accessed: Sun Jan  3 21:13:45 2016 | Date Created: Sun Jan  3 21:13:14 2016
Name: blahblah.py          | Date Last Accessed: Sun Jan  3 21:13:48 2016 | Date Created: Sun Jan  3 21:13:48 2016
Name: testhoe1.py          | Date Last Accessed: Sun Jan  3 19:09:57 2016 | Date Created: Sun Jan  3 18:52:06 2016

Sorted example using last modified time
Name: testhoe1.py          | Date Last Accessed: Sun Jan  3 19:09:57 2016 | Date Created: Sun Jan  3 18:52:06 2016
Name: .idea                | Date Last Accessed: Sun Jan  3 21:13:45 2016 | Date Created: Sun Jan  3 21:13:14 2016
Name: blahblah.py          | Date Last Accessed: Sun Jan  3 21:13:48 2016 | Date Created: Sun Jan  3 21:13:48 2016
</code></pre>

<p>Happy optimizing! #If you change line 12 <strong>atime</strong> to <strong>ctime</strong> it will sort based on create-time. </p>
","python"
"1895",24109410,"<p>Pygame has a clock class that can be used instead of the python time module.</p>

<p>Here is an example usage:</p>

<pre><code>clock = pygame.time.Clock()

time_counter = 0

while True:
    time_counter = clock.tick()
    if time_counter &gt; 3000:
        enemy.move()
        time_counter = 0
</code></pre>
","python"
"1896",25349199,"<p>I start with</p>

<pre><code>In[141]: df
Out[141]: 
                                               firms
0  B Of A M L, Dougherty &amp; Co., Goldman Sachs, Ra...
1                                    Zacks Small Cap
2                                    Wedbush Securit
3  B Of A M L, Cowen &amp; Company, Deutsche Bk Sec, ...
</code></pre>

<p>It's quite funny that I'm doing almost the same practice for two questions today now. Also here, your data structure is messed up, as you have separate entries inside the same column (separated with commas). We first fix that:</p>

<pre><code>In[144]: df2 = pd.DataFrame(df.firms.str.split(',').tolist())
In[145]: df2
Out[145]: 
                 0                 1                 2                 3  \
0       B Of A M L   Dougherty &amp; Co.     Goldman Sachs     Raymond James   
1  Zacks Small Cap              None              None              None   
2  Wedbush Securit              None              None              None   
3       B Of A M L   Cowen &amp; Company   Deutsche Bk Sec   Fbr Cap Markets   
4     Janney Mont.   Jefferies &amp; Co.   Leerink Partner              None   

              4  
0          None  
1          None  
2          None  
3   J.P. Morgan  
4          None 
</code></pre>

<p>Now we can simply do</p>

<pre><code>In[148]: df2.stack().unique().tolist()
Out[148]: 
['B Of A M L',
 ' Dougherty &amp; Co.',
 ' Goldman Sachs',
 ' Raymond James',
 'Zacks Small Cap',
 'Wedbush Securit',
 ' Cowen &amp; Company',
 ' Deutsche Bk Sec',
 ' Fbr Cap Markets',
 ' J.P. Morgan',
 'Janney Mont.',
 ' Jefferies &amp; Co.',
 ' Leerink Partner']
</code></pre>
","python"
"1897",26439681,"<p>I think you can use a <a href=""http://en.wikipedia.org/wiki/Decision_tree"" rel=""nofollow"">decision tree</a> to do this task, you can use it to classify the animals based on his attributes, also might be usefull to take a look at <a href=""http://en.wikipedia.org/wiki/Decision_tree_learning"" rel=""nofollow""> Classification And Regression Tree (CART)</a>, it will help you to decide what are the best attributes to do the classification.</p>
","python"
"1898",35142124,"<p>You can use a regex to match numbers enclosed with <code>[...]</code> and get rid of the empty elements with:</p>

<pre><code>import re
p = re.compile(r'\[\d+\]')
test_str = ""[1]first[2]second[3]third""
print([x for x in p.split(test_str) if x])
# =&gt; ['first', 'second', 'third']
</code></pre>

<p>See <a href=""http://ideone.com/5VXR1E"" rel=""nofollow"">IDEONE demo</a></p>

<p>Your code returned the captured texts since <a href=""https://docs.python.org/2/library/re.html#re.split"" rel=""nofollow""><code>re.split</code></a> returns all captures as separate elements in the resulting array.</p>

<blockquote>
  <p>If there are capturing groups in the separator and it matches at the start of the string, the result will start with an empty string.</p>
</blockquote>

<p>Also, to get rid of just the first empty element, you may use</p>

<pre><code>res = p.split(test_str)
if not res[0]:
    del res[0]
</code></pre>
","python"
"1899",23198484,"<p>You need a process (a worker or a mule) to run the signal handler. Spawn a worker (adding a socket directive) or a mule (adding mule = true). In the case of a mule you need to add target=mule to the @rbtimer decorator)</p>
","python"
"1900",16672856,"<p>how bout implementing your own?</p>

<pre><code>def partial_foo(*args):
    """""" some doc string """"""
    return foo(*((2)+args))
</code></pre>

<p>not a perfect answer but if you really want this i suspect this is the only way to do it</p>
","python"
"1901",25604949,"<p>Use comprehension:</p>

<pre><code>list_of_strings = [s + string_to_add for s in list_of_strings]
</code></pre>
","python"
"1902",9068980,"<p>You need to open the file in binary mode, or the <code>read()</code> will stop at the first EOF character it finds. And a <code>docx</code> is a ZIP file which is guaranteed to contain such a character somewhere.</p>

<p>Try</p>

<pre><code>in_file = open(os.path.join(settings.BASEPATH,'CompanyName.docx'), ""rb"")
</code></pre>

<p><code>FileIO</code> reads <a href=""http://docs.python.org/library/io.html#io.RawIOBase"">raw bytestreams</a> and those are ""binary"" by default.</p>
","python"
"1903",28249140,"<p>Try using this (can't test at the moment):</p>

<pre><code>def stutter(queue):
    # iterate all items
    for _ in range(queue.size()):
        # store item in local context
        item = queue.dequeue()
        # push two *references* to item into the queue
        queue.enqueue(item)
        queue.enqueue(item)
</code></pre>

<p>This will iterate all items once, immediately pushing two copes to the back of the queue. The first pushed items should be the first once this iteration is over.</p>

<p>Notice that objects will be not be duplicated,and there will be two references to the same object in the queue.</p>

<p><strong>Tip:</strong> there is already a queue implementation in Python. You can use it by importing <code>queue</code></p>
","python"
"1904",16163831,"<p>Assuming you have a variable <code>v</code> that you wish to add <code>a</code> to, and have it constrained to the range <code>32..126</code> inclusive, this should do:</p>

<pre><code>v = (v - 32 + a) % (127 - 32) + 32
</code></pre>

<p>So, for example, when adding 3 to 125:</p>

<pre><code>v = (125 - 32 + 3) % (127 - 32) + 32
  =       96       %    95      + 32
  =                1            + 32
  =                       33
</code></pre>

<p>More generally:</p>

<pre><code>def addWithConstraint (loval, hival, val, plus):
    return (val - loval + plus) % (hival + 1 - loval) + loval
</code></pre>

<p>Do note however that some modulo operations may not do what you expect for negative numbers but you can get around that by ensuring that you're always adding a positive numbers. For example, you could insert at the start of that function something like:</p>

<pre><code>while plus &lt; 0:
    plus = plus + hival + 1 - loval
</code></pre>
","python"
"1905",15006891,"<p>You should have <code>/main</code> in your <code>PYTHONPATH</code> environment variable. Or in your main program you do:</p>

<pre><code>import sys
sys.path.insert(0, '/main')
</code></pre>

<p>But if you are running a recent version of python you should consider doing relative imports using <code>from ..subdir3.module3 import something</code> in <code>module1.py</code></p>
","python"
"1906",20901531,"<p>You can csv module and its <a href=""http://docs.python.org/2/library/csv.html#csv.writer"" rel=""nofollow""><code>writer</code></a> method, like this</p>

<pre><code>pyList = [['2','4'],  ['6','7'], ['5','9'], ['4','7']]
import csv
with open('Output.txt', 'wb') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    map(csvwriter.writerow, pyList)
</code></pre>
","python"
"1907",12942047,"<p>i'm using that on my portal, and it seems fine your code, you just missed one thing</p>

<pre><code>{% show_more %}
</code></pre>

<p>that's what actually enables the twitter-style infinite pagination</p>

<p>edit here:</p>

<p>you may want to add this too:</p>

<pre><code>&lt;script type=""text/javascript"" charset=""utf-8""&gt;
    var endless_on_scroll_margin = 20;
&lt;/script&gt;
</code></pre>

<p>where ""20"" is the number of pixels (from the bottom of the page) that triggers the scrolling</p>

<p>you may want to try more than one value till you get the perfect one for your project</p>

<p>see <a href=""http://django-endless-pagination.readthedocs.org/en/latest/templatetags_reference.html#show-more"" rel=""nofollow"">here</a> and <a href=""http://django-endless-pagination.readthedocs.org/en/latest/twitter_pagination.html#pagination-on-scroll"" rel=""nofollow"">here</a></p>
","python"
"1908",26803203,"<p>Python determines the scope of variables at compile time, based on <em>binding behaviour</em>. If you assign to a name, or use it as an <code>import</code> target (and a few other ways) you are binding the name in a scope.</p>

<p>You are binding to <code>n_1</code> and <code>n_2</code> in the <code>fib()</code> function; both are being assigned to. This makes those two names <em>local</em> in <code>fib()</code>, and Python won't even look at the surrounding scope.</p>

<p>You'll need to override this behaviour, and you can do this by using the <a href=""https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement""><code>nonlocal</code> statement</a>:</p>

<pre><code>def fibGen():
    n_1 = 0
    n_2 = 0 
    def fib():
        nonlocal n_1, n_2
        if n_1 ==0 and n_2 ==0:
            n_1 = 1
            return n
        else:
            n = n_1 + n_2
            n_2 = n_1
            n_1 = n  
            return n
    return fib
</code></pre>

<p><code>nonlocal</code> tells the compiler <em>explicitly</em> that you don't want it to look at binding behaviour but instead treat the names as closures.</p>

<p>Next, you are using <code>n</code> in the first branch of the <code>if</code> test, but you haven't defined it anywhere outside of the <code>else</code> branch. You should just return <code>1</code> there anyway:</p>

<pre><code>def fibGen():
    n_1 = 0
    n_2 = 0 
    def fib():
        nonlocal n_1, n_2
        if n_1 ==0 and n_2 ==0:
            n_1 = 1
            return n_1
        else:
            n = n_1 + n_2
            n_2 = n_1
            n_1 = n  
            return n
    return fib
</code></pre>

<p>Last but not least, you can swap two variables by using tuple assignment, no intermediaries needed:</p>

<pre><code>def fibGen():
    n_1 = 0
    n_2 = 0 
    def fib():
        nonlocal n_1, n_2
        if n_1 ==0 and n_2 ==0:
            n_1 = 1
        else:
            n_1, n_2 = n_1 + n_2, n_1
        return n_1
    return fib
</code></pre>
","python"
"1909",5530857,"<p>My beloved SD Chargers hat is off to you if you think a regex is easier than this:</p>

<pre><code>#!/usr/bin/env python
import xml.etree.cElementTree as et

sxml=""""""
&lt;encspot&gt;
  &lt;file&gt;
   &lt;Name&gt;some filename.mp3&lt;/Name&gt;
   &lt;Encoder&gt;Gogo (after 3.0)&lt;/Encoder&gt;
   &lt;Bitrate&gt;131&lt;/Bitrate&gt;
  &lt;/file&gt;
  &lt;file&gt;
   &lt;Name&gt;another filename.mp3&lt;/Name&gt;
   &lt;Encoder&gt;iTunes&lt;/Encoder&gt;
   &lt;Bitrate&gt;128&lt;/Bitrate&gt;  
  &lt;/file&gt;
&lt;/encspot&gt;
""""""
tree=et.fromstring(sxml)

for el in tree.findall('file'):
    print '-------------------'
    for ch in el.getchildren():
        print '{:&gt;15}: {:&lt;30}'.format(ch.tag, ch.text) 

print ""\nan alternate way:""  
el=tree.find('file[2]/Name')  # xpath
print '{:&gt;15}: {:&lt;30}'.format(el.tag, el.text)  
</code></pre>

<p>Output:</p>

<pre><code>-------------------
           Name: some filename.mp3             
        Encoder: Gogo (after 3.0)              
        Bitrate: 131                           
-------------------
           Name: another filename.mp3          
        Encoder: iTunes                        
        Bitrate: 128                           

an alternate way:
           Name: another filename.mp3  
</code></pre>

<p>If your attraction to a regex is being terse, here is an equally incomprehensible bit of list comprehension to create a data structure:</p>

<pre><code>[(ch.tag,ch.text) for e in tree.findall('file') for ch in e.getchildren()]
</code></pre>

<p>Which creates a list of tuples of the XML children of <code>&lt;file&gt;</code> in document order:</p>

<pre><code>[('Name', 'some filename.mp3'), 
 ('Encoder', 'Gogo (after 3.0)'), 
 ('Bitrate', '131'), 
 ('Name', 'another filename.mp3'), 
 ('Encoder', 'iTunes'), 
 ('Bitrate', '128')]
</code></pre>

<p>With a few more lines and a little more thought, obviously, you can create any data structure that you want from XML with ElementTree. It is part of the Python distribution.</p>

<p><strong>Edit</strong></p>

<p>Code golf is on!</p>

<pre><code>[{item.tag: item.text for item in ch} for ch in tree.findall('file')] 
[ {'Bitrate': '131', 
   'Name': 'some filename.mp3', 
   'Encoder': 'Gogo (after 3.0)'}, 
  {'Bitrate': '128', 
   'Name': 'another filename.mp3', 
   'Encoder': 'iTunes'}]
</code></pre>

<p>If your XML only has the <code>file</code> section, you can choose your golf. If your XML has other tags, other sections, you need to account for the section the children are in and you will need to use <code>findall</code></p>

<p>There is a tutorial on ElementTree at <a href=""http://effbot.org/zone/element-index.htm"">Effbot.org</a></p>
","python"
"1910",24583036,"<p>The first line of <code>print_first_and_last()</code> is <code>words = break_words(sentence)</code>.</p>

<p>This line will create a <strong>new object</strong>! This new object will be a list containing each of the words in your sentence. This new (somewhat temporary) object, will be altered by <code>print_first_word()</code> and <code>print_last_word()</code>.</p>

<p>If we changed <code>print_first_and_last()</code> such that it printed more information, this might be clearer:</p>

<pre><code>def print_first_and_last(sentence):
    words = break_words(sentence)

    print sentence, words
    print_first_word(words)
    print sentence, words
    print_last_word(words)
    print sentence, words
</code></pre>
","python"
"1911",6577159,"<p>You forgot to <a href=""https://docs.djangoproject.com/en/dev/ref/templates/api/#rendering-a-context"">render it</a>.</p>
","python"
"1912",11089590,"<p>You can do it like this:</p>

<pre><code>&gt;&gt;&gt; from hashlib import md5
&gt;&gt;&gt; h = md5('email@example.com').digest().encode('base64')[:-1]
&gt;&gt;&gt; _
'Vlj/zO5/Dr/aKyJiOLHrbg=='
&gt;&gt;&gt; len(h)
24
</code></pre>

<p>You can ignore the last char because it's just a new line. The chance of collision is the same as the MD5 hash, you don't lose information when you encode in base64.</p>

<pre><code>&gt;&gt;&gt; original = md5('email@example.com').digest()
&gt;&gt;&gt; encoded = original.encode('base64')
&gt;&gt;&gt; original == encoded.decode('base64') 
True
</code></pre>
","python"
"1913",22338417,"<p>Or <a href=""https://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#HowdoImakeinputononeconnectionresultinoutputonanother"" rel=""nofollow"">How do I make input on one connection result in output on another?</a></p>
","python"
"1914",2966957,"<p>I am aware of the problem where pickle can't store a generated or dynamic class. I solved this by rigging in my dynamic type into the modules dict like so:</p>

<pre><code>new_class = type(name, (models.Model,), attrs)
mod = sys.modules[new_class.__module__]
mod.__dict__[new_class.__name__] = new_class
</code></pre>

<p>It's <em>FAR</em> from a clean or elegant solution, so if someone can think of a more <em>django-friendly</em> way to make this happen, I am all ears. However, the above code does work. </p>
","python"
"1915",9884958,"<pre><code>&gt;&gt;&gt; stringexample = 'mystri$ng&amp;'
&gt;&gt;&gt; '*' in stringexample
False
&gt;&gt;&gt; '$' in stringexample
True
&gt;&gt;&gt; '&amp;' in stringexample
True
&gt;&gt;&gt;
</code></pre>
","python"
"1916",29037374,"<p>I think, it's normal behavior, as your code <em>listens</em> for connections. <code>connection, client_address = sock.accept()</code> gets executed only when you try to connect to the port on which your script's listening. You need to <code>telnet localhost:9764</code> to get it to work.</p>

<p>I may have been mistaken, but you never mention that you try to connect to this port.</p>
","python"
"1917",5252834,"<pre><code>map( lambda s: s.replace(...), row )
</code></pre>

<p>or use a list comprehension</p>

<pre><code>[s.replace(...) for s in row]
</code></pre>
","python"
"1918",12714265,"<p>Unfortunately, I would probably suggest you don't use the builtin postgresql backend session as it's <a href=""https://bitbucket.org/cherrypy/cherrypy/issue/748/postgresqlsession-is-incomplete-broken-and"" rel=""nofollow"">clearly broken</a>.</p>

<p>It just doesn't work. If you can spare the time, you'd better roll out your own backend session in this case.</p>
","python"
"1919",15105202,"<p>Your model is broken, but this should sum up what you were doing in a cleaner way.</p>

<pre><code>class Status(models.Model):
    status = models.CharField(max_length=200)

class User(models.Model):
    name = models.CharField(max_length=200)
    events = models.ManyToManyField('Event')

class Event(models.Model):
    rev1 = models.ForeignKey(Status, related_name='rev1', blank=True, null=True)
    rev2 = models.ForeignKey(Status, related_name='rev2', blank=True, null=True)
    active = models.BooleanField()
</code></pre>

<p>And the query</p>

<p><code>User.objects.filter(events__active=True).exclude(Q(events__rev1=None)|Q(events__rev2=None)).annotate(num_events=Count('events')).order_by('-num_events')</code></p>

<p>This will return a list of users, sorted by the number of events in their set.</p>

<p>For more information check out <a href=""https://docs.djangoproject.com/en/dev/topics/db/examples/many_to_many/"">Many-To-Many</a> fields.</p>
","python"
"1920",4357841,"<p><code>zip</code>, as others have suggested, is good. <a href=""http://docs.python.org/library/itertools.html#itertools.izip"" rel=""nofollow""><code>izip</code></a>, I would suggest, is better for longer lists.</p>

<pre><code>&gt;&gt;&gt; from itertools import izip
&gt;&gt;&gt; list3 = [x+y for x,y in izip(list1, list2)]
&gt;&gt;&gt; list3
['Ta', 'Fb', 'Tc', 'Td']
</code></pre>

<p>See also the documentation on <a href=""http://docs.python.org/tutorial/datastructures.html#list-comprehensions"" rel=""nofollow"">list comprehensions</a>, they're an essential tool in Python programming.</p>
","python"
"1921",5869650,"<p>There is actually an important reason for Python to reject <code>(a*)*</code>, and <code>(a*|b)*</code>. Since <code>*</code> is greedy, it matches the longest string it can. The problem is that if the regex modified by  <code>*</code> is empty, then the regular expression parser tries to match as many repetitions of empty string as possible. This means that it would match any number of empty strings in between any two characters in the string you test against. Since <code>a*</code> is in a capturing group, it would have to capture all of those empty strings, which would be impossible.</p>
","python"
"1922",4315190,"<p>Indeed, you need to invert the byte order. Look:</p>

<pre><code>&gt;&gt;&gt; convert('8192323E')
-5.370402375965945e-38
&gt;&gt;&gt; convert('3E329281')
0.17438699305057526
</code></pre>
","python"
"1923",31064349,"<p>Parameters set in a launch file are stored at the <a href=""http://wiki.ros.org/Parameter%20Server"" rel=""nofollow"">ROS parameter server</a>.</p>

<p>Accessing these parameters from a python node is quite easy as is shown on <a href=""http://wiki.ros.org/rospy/Overview/Parameter%20Server"" rel=""nofollow"">this wiki page</a>. In your case the parameters are defined as <em>private parameters</em> of the node (because they are defined inside the <code>&lt;node&gt;</code> tag), so you have to prefix them with <code>~</code> when accessing them:</p>

<pre><code>altitude_max = rospy.get_param('~altitude_max')
</code></pre>
","python"
"1924",28633357,"<p>No, there is no way to externally stop a thread. A thread is under complete control of the process that spawned it, killing it externally would mean you'd have to mess with process memory, which would usually mean that you render the process dysfunctional; what you'd usually do is handling messages in some form that allows threads to terminate on some external impulse themselves.</p>
","python"
"1925",29172218,"<p>I had the same problem on Linux and solved installing pydotplus and its dependencies.</p>

<p><a href=""https://pypi.python.org/pypi/pydotplus"" rel=""nofollow"">https://pypi.python.org/pypi/pydotplus</a></p>

<p>After installing pydotplus and its dependencies:</p>

<pre><code>import pydotplus

graph = pydotplus.pydotplus.graph_from_dot_data(dot_data.getvalue())
</code></pre>
","python"
"1926",40125126,"<p>Since tuples are not mutable, we can't append/add to <code>A[0]</code>. Let's just unpack and create a new tuple within a list:</p>

<p><code>[(*A[0], *B)]</code></p>
","python"
"1927",18049532,"<p>You can pass in <code>u'\x00'</code> as a context variable to compare against, as in</p>

<pre><code>#!/usr/bin/env python2.7

from __future__ import print_function

from django.template import Template, Context
from django.conf import settings

settings.configure()

c = Context({'null': u'\x00', 'dbresult': u'\x00'})

t = Template(r""""""
{% if dbresult == null %}
result is null
{% else %}
result is {{ dbresult }}
{% endif %}
"""""")

print(t.render(c))
</code></pre>

<p>which correctly prints <code>result is null</code>.</p>
","python"
"1928",33459374,"<p>I've prepared some code with comments. Let me know if you have any doubts or further questions.</p>

<p>Here you go:</p>

<pre><code>import requests
from lxml import html


def searchRecordInSpecificPosition(url, position):
    ## Making request to the specified URL
    response = requests.get(url)

    ## Parsing the DOM to a tree
    tree = html.fromstring(response.content)

    ## Creating a dict of links.
    links_dict = dict()

    ## Format of the dictionary:
    ##
    ##  {
    ##      1: {
    ##          'href': ""http://pr4e.dr-chuck.com/tsugi/mod/python-data/data/known_by_Medina.html"",
    ##          'text': ""Medina""
    ##      },
    ##      
    ##      2: {
    ##          'href': ""http://pr4e.dr-chuck.com/tsugi/mod/python-data/data/known_by_Chiara.html"",
    ##          'text': ""Chiara""
    ##      },
    ##  
    ##      ... and so on...
    ## }

    counter = 1

    ## For each &lt;a&gt; tag found, extract its text and link (href) and insert it into links_dict
    for link in tree.xpath('//ul/li/a'):
        href = link.xpath('.//@href')[0]
        text = link.xpath('.//text()')[0]
        links_dict[counter] = dict(href=href, text=text)
        counter += 1

    return links_dict[position]['text'], links_dict[position]['href']


times_to_search = int(raw_input(""Enter the amount of times to search: ""))
position = int(raw_input('Enter position: '))

count = 0

print """"

while count &lt; times_to_search:
    if count == 0:
        name, url = searchRecordInSpecificPosition(""http://pr4e.dr-chuck.com/tsugi/mod/python-data/data/known_by_Brenae.html"", position)
    else:
        name, url = searchRecordInSpecificPosition(url, position)
    print ""[*] Name: {}"".format(name)
    print ""[*] URL: {}"".format(url)
    print """"
    count += 1
</code></pre>

<p>Sample output:</p>

<pre><code><U+279C>  python scraper.py
Enter the amount of times to search: 4
Enter position: 1

[*] Name: Medina
[*] URL: http://pr4e.dr-chuck.com/tsugi/mod/python-data/data/known_by_Medina.html

[*] Name: Darrius
[*] URL: http://pr4e.dr-chuck.com/tsugi/mod/python-data/data/known_by_Darrius.html

[*] Name: Caydence
[*] URL: http://pr4e.dr-chuck.com/tsugi/mod/python-data/data/known_by_Caydence.html

[*] Name: Peaches
[*] URL: http://pr4e.dr-chuck.com/tsugi/mod/python-data/data/known_by_Peaches.html

<U+279C> 
</code></pre>
","python"
"1929",28153620,"<p><code>re.sub(r'^Mrs?\. (\w+)\.(\d{4})-(\d{2})-(\d{2})\.(\d{4}\w+\d+_at_\d+)(\.txt)$',r'\2\3\4\1\5\6','Mr. McCONNELL.2012-07-31.2014sep19_at_182325.txt')</code></p>
","python"
"1930",34010334,"<p>The short answer that I demonstrate below is that constructing a new sparse matrix is expensive.  There's a significant overhead that is not dependent on the number of rows or the number on nonzero elements in a particular row.</p>

<hr>

<p>Data representation for sparse matrices is quite different from that for dense array.  Arrays store the data in one one contiguous buffer, and efficiently use the <code>shape</code> and <code>strides</code> to iterate over selected values.  Those values, plus the index, define exactly were in the buffer it will find the data.  Copying those <code>N</code> bytes from location to another is a relatively minor part of the whole operation.</p>

<p>A sparse matrix stores the data in several arrays (or other structures), containing the indexes and the data.  Selecting a row then requires looking up the relevant indices, and constructing a new sparse matrix with selected indices and data.  There is compiled code in the sparse package, but not nearly as much low level code as with numpy arrays.</p>

<p>To illustrate I'll make small matrix, and not so dense, so we don't have a lot of empty rows:</p>

<pre><code>In [259]: A = (sparse.rand(5,5,.4,'csr')*20).floor()
In [260]: A
Out[260]: 
&lt;5x5 sparse matrix of type '&lt;class 'numpy.float64'&gt;'
    with 10 stored elements in Compressed Sparse Row format&gt;
</code></pre>

<p>The dense equivalent, and a row copy:</p>

<pre><code>In [262]: Ad=A.A
In [263]: Ad
Out[263]: 
array([[  0.,   0.,   0.,   0.,  10.],
       [  0.,   0.,   0.,   0.,   0.],
       [ 17.,  16.,  14.,  19.,   6.],
       [  0.,   0.,   1.,   0.,   0.],
       [ 14.,   0.,   9.,   0.,   0.]])
In [264]: Ad[4,:]
Out[264]: array([ 14.,   0.,   9.,   0.,   0.])
In [265]: timeit Ad[4,:].copy()
100000 loops, best of 3: 4.58 µs per loop
</code></pre>

<p>A matrix row:</p>

<pre><code>In [266]: A[4,:]
Out[266]: 
&lt;1x5 sparse matrix of type '&lt;class 'numpy.float64'&gt;'
    with 2 stored elements in Compressed Sparse Row format&gt;
</code></pre>

<p>Look at the data representation for this <code>csr</code> matrix, 3 1d arrays:</p>

<pre><code>In [267]: A.data
Out[267]: array([  0.,  10.,  17.,  16.,  14.,  19.,   6.,   1.,  14.,   9.])  
In [268]: A.indices
Out[268]: array([3, 4, 0, 1, 2, 3, 4, 2, 0, 2], dtype=int32)
In [269]: A.indptr
Out[269]: array([ 0,  2,  2,  7,  8, 10], dtype=int32)
</code></pre>

<p>Here's how the row is selected (but in compiled code):</p>

<pre><code>In [270]: A.indices[A.indptr[4]:A.indptr[5]]
Out[270]: array([0, 2], dtype=int32)
In [271]: A.data[A.indptr[4]:A.indptr[5]]
Out[271]: array([ 14.,   9.])
</code></pre>

<p>The 'row' is another sparse matrix, with the same sort of data arrays:</p>

<pre><code>In [272]: A[4,:].indptr
Out[272]: array([0, 2])
In [273]: A[4,:].indices
Out[273]: array([0, 2])
In [274]: timeit A[4,:]
</code></pre>

<p>Yes, timing for the sparse matrix is slow.  I don't know how much of the time is spent in actually selecting the data, and how much is spent constructing the new matrix.</p>

<pre><code>10000 loops, best of 3: 145 µs per loop
In [275]: timeit Ad[4,:].copy()
100000 loops, best of 3: 4.56 µs per loop
</code></pre>

<p><code>lil</code> format may easier to understand, since the data and indices are stored in sublists, one per row.</p>

<pre><code>In [276]: Al=A.tolil()
In [277]: Al.data
Out[277]: array([[0.0, 10.0], [], [17.0, 16.0, 14.0, 19.0, 6.0], [1.0], [14.0, 9.0]], dtype=object)
In [278]: Al.rows
Out[278]: array([[3, 4], [], [0, 1, 2, 3, 4], [2], [0, 2]], dtype=object)
In [279]: Al[4,:].data
Out[279]: array([[14.0, 9.0]], dtype=object)
In [280]: Al[4,:].rows
Out[280]: array([[0, 2]], dtype=object)
</code></pre>

<p>Speed comparisons like this make some sense when dealing with tight compiled code, where movements for bytes from part of memory to another are significant time consumers.  With the mix of Python and compiled code in <code>numpy</code> and <code>scipy</code> you can't just count <code>O(n)</code> operations.  </p>

<p>=============================</p>

<p>Here's an estimate of time it takes to selected a row from <code>A</code>, and time it takes to return a new sparse matrix:</p>

<p>Just get the data:</p>

<pre><code>In [292]: %%timeit
d1=A.data[A.indptr[4]:A.indptr[5]]
i1=A.indices[A.indptr[4]:A.indptr[5]]
   .....: 
100000 loops, best of 3: 4.92 µs per loop
</code></pre>

<p>plus the time it takes to make a matrix:</p>

<pre><code>In [293]: %%timeit
d1=A.data[A.indptr[4]:A.indptr[5]]
i1=A.indices[A.indptr[4]:A.indptr[5]]
sparse.csr_matrix((d1,([0,0],i1)),shape=(1,5))
   .....: 
1000 loops, best of 3: 445 µs per loop
</code></pre>

<p>Try a simpler <code>coo</code> matrix</p>

<pre><code>In [294]: %%timeit
d1=A.data[A.indptr[4]:A.indptr[5]]
i1=A.indices[A.indptr[4]:A.indptr[5]]
sparse.coo_matrix((d1,([0,0],i1)),shape=(1,5))
   .....: 
10000 loops, best of 3: 135 µs per loop
</code></pre>
","python"
"1931",18287658,"<p>I assume you need to add new lines at the end of the file (i.e append)</p>

<pre><code>for line in fileinput.input(""test.txt""):
new_str = re.sub('[^a-zA-Z0-9\n\.]',"" "", line)
with open(""f.txt"", ""a"") as f:
f.write(new_str)
</code></pre>

<p>You can use the f.write line and repeat it until you write everything</p>
","python"
"1932",25578774,"<pre><code>numbers = ['0','1','2','3','4','5','6','7','8','9']
list(''.join(subl) for subl in itertools.chain.from_iterable(itertools.product(numbers, repeat=i) for i in range(1,5)))
</code></pre>
","python"
"1933",9531687,"<p>So, I'm answering this question rather quickly, but rather than deleting it, I'll add some text so that the next person might find it. The problem wasn't <strong>pygraphviz</strong> at all, but <strong>Textmate 2.x</strong> being a bit weird about the <code>PATH</code>. It seems that textmate uses its own path, but you can't find this variable in the variable editor. However, you can <em>append</em> to it, using the normal syntax, as shown below. This fixed <code>pygraphviz.test()</code> for me too.</p>

<p><img src=""http://i.stack.imgur.com/iuzzX.png"" alt=""What I had to do""></p>
","python"
"1934",33273197,"<p>**   Ended up using a <code>named tuple</code> for storage  **</p>

<pre><code>from bs4 import BeautifulSoup
import urllib2
from collections import namedtuple

url='http://www.xpn.org/playlists/xpn-playlist'
page = urllib2.urlopen(url)


soup = BeautifulSoup(page.read())

songs=[]
Song = namedtuple(""Song"", ""artist name album"")
for link in soup.find_all(""li"", class_=""song""):
    song = Song._make(link.text.strip()[12:].split("" - ""))
    songs.append(song)

for song in songs:
    print(song.artist, song.name, song.album)
</code></pre>
","python"
"1935",35961420,"<p>You can't run arbitrary commands while the application is being staged, i.e. when pip would be used.</p>

<p>If you can't ignore the warning, you could try the Heroku Python buildpack which is <a href=""https://github.com/heroku/heroku-buildpack-python/blob/master/bin/compile#L37"" rel=""nofollow"">updated to use 8.1.0</a> by using the <code>-b</code> option when pushing your app, but I can't comment on how they are otherwise different.</p>

<p>cf push appname -b <a href=""https://github.com/heroku/heroku-buildpack-python.git"" rel=""nofollow"">https://github.com/heroku/heroku-buildpack-python.git</a></p>

<p><strong>Update:</strong> Another way is by creating your own buildpack and update <code>manifest.yml</code> to use this buildpack (preferably by building it up from similar buildpack if it exists). <a href=""https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/We0d917403ade_46b2_8991_d1eabb8126f6/page/Building%20your%20own%20Buildpack%20%28i.e.%20for%20C%29"" rel=""nofollow"">This article</a> shows how to create a buildpack.</p>
","python"
"1936",24023115,"<p>numpy has something for this:</p>

<pre><code>numpy.zeros((3,3))
</code></pre>
","python"
"1937",36969921,"<p><code>setdefault</code> is your friend:</p>

<pre><code>d = {}
for t in l:
    d.setdefault(t[0],{})[t[1]]=t[2]
</code></pre>
","python"
"1938",8174743,"<p><strong>Check if you have a DNS problem</strong></p>

<p>Open the application with Google Chrome and when you get an error you will see the error code with the explanation on the bottom.</p>

<p><strong>Check if you have a link issue</strong></p>

<p>In a terminal type </p>

<pre><code>traceroute http://www.7bks.com/ 
</code></pre>

<p>and see what it gives</p>

<p>Anyway it is more likely to be a DNS issue.</p>
","python"
"1939",1596390,"<pre><code>&gt;&gt;&gt; bar = []
&gt;&gt;&gt; for i in foo:
    if i not in bar:
    	bar.append(i)

&gt;&gt;&gt; bar
['a', 'b', 'c', 'd']
</code></pre>

<p>this would be the most straightforward way of removing duplicates from the list and preserving the order as much as possible (even though ""order"" here is inherently wrong concept).</p>
","python"
"1940",33378759,"<p>Until the following issue (<a href=""https://github.com/pydata/pandas/issues/13719"" rel=""nofollow"">https://github.com/pydata/pandas/issues/13719</a>) is closed the following is a fix:</p>

<p><code>subset.xs((6,), level=['m'])</code></p>
","python"
"1941",5662592,"<p>If string is type <code>str</code> (not a Unicode string, type <code>unicode</code>), then it's a byte string and slicing will work as expected:</p>

<pre><code>prefixed_bits = ""extract this double:\xc2\x8eET\xfb!\t@""
pos = prefixed_bits.index("":"") + 1
print ""That looks like the value %f"" % struct.unpack(""d"", prefixed_bits[pos:pos+8])
</code></pre>

<p>This prints 3.141593, the binary representation of which is encoded in the string literal.</p>
","python"
"1942",1922261,"<p>In python, you build regular expressions by passing a string to re.compile. 
You can ""nest"" regular expression by just doing regular string manipulation:</p>

<pre><code>#!/usr/bin/env python
import re
number = 'zero | one | two | three | four | five | six | seven | eight | nine'
foo = re.compile(' quantity: \s* (%s) '%number,re.VERBOSE|re.IGNORECASE)
teststr=' quantity:    five '
print(foo.findall(teststr))
# ['five']
</code></pre>
","python"
"1943",30971165,"<p>If the indentation is correct in the question (and not some copy paste mistake, that is the issue, the <code>minimum = num</code> line needs to be indented towards the right. Also, you need to take care of maximum and minimum being <code>None</code> that would throw error when used in comparison to <code>int</code> in Python 3.x , and would not work correctly for minimum in Python 2.x since no int would be smaller than None.</p>

<pre><code>maximum = None
minimum = None
while True:
    num = raw_input(""Enter a number: "")
    if num == 'done':
        break;
    try:
        num = int(num)
        if maximum is None:
            maximum = num
            minimum = num
        if num &gt;= maximum:
            maximum = num
        if num &lt;= minimum:
            minimum = num
    except:
        print ""Please Enter A Number!""
        continue
print ""Max = "",maximum, ""Min = "",minimum  
</code></pre>
","python"
"1944",2396925,"<pre><code>Ingl\xeas
</code></pre>

<p>is not UTF-8 but (probably) Windows-1252- or latin1-encoded. So you first need to decode it. Only then you can encode it to UTF-8.</p>

<p>Therefore:</p>

<pre><code>&gt;&gt;&gt; x = 'Ingl\xeas'
&gt;&gt;&gt; print x.decode(""cp1252"")
Inglês
</code></pre>

<p>Similarly,</p>

<pre><code> &gt;&gt;&gt; x.decode(""cp1252"").encode(""UTF-8"")
 'Ingl\xc3\xaas'
</code></pre>

<p>which is the correct UTF-8 representation.</p>

<p>By the way, in Python 3, you can (at least in the interactive console under Windows) simply type </p>

<pre><code>&gt;&gt;&gt; x = 'Ingl\xeas'
&gt;&gt;&gt; print (x)
Inglês
</code></pre>

<p>since Python 3 strings are always Unicode strings (not counting <code>bytes</code> objects).</p>
","python"
"1945",37052782,"<p>One way could be using the link that i commented above, although your initial dataset is different. The procedure consist in assign numerical values to each column and change the zeroes by NaN, as follow:</p>

<pre><code>import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""testdata.txt"",parse_dates=0,index_col=0)
df = df.applymap(lambda x:x if x else pd.np.nan)
for n, col in enumerate(df.columns): df[col] = df[col]*n
df.plot(lw=10,legend=False)
plt.yticks(pd.np.arange(len(df.columns)), df.columns)
plt.tight_layout()
plt.show()
</code></pre>

<p>the result dataframe is:</p>

<pre><code>                     A   B   C    D  E
time                                  
2016-05-05 00:00:00  0 NaN NaN  NaN  4
2016-05-05 00:05:00  0 NaN NaN  3.0  4
2016-05-05 00:10:00  0 NaN NaN  3.0  4
2016-05-05 00:15:00  0 NaN NaN  3.0  4
</code></pre>

<p>and the plot:</p>

<p><a href=""http://i.stack.imgur.com/qPYnJ.png"" rel=""nofollow""><img src=""http://i.stack.imgur.com/qPYnJ.png"" alt=""enter image description here""></a></p>

<p>regards.</p>
","python"
"1946",1616767,"<p>Using numpy and PIL: </p>

<p>This loads the image into a numpy array of shape <code>(W,H,3)</code>, where <code>W</code> is the
width and <code>H</code> is the height. The third axis of the array represents the 3 color
channels, <code>R,G,B</code>.</p>

<pre><code>import Image
import numpy as np

orig_color = (255,255,255)
replacement_color = (0,0,0)
img = Image.open(filename).convert('RGB')
data = np.array(img)
data[(data == orig_color).all(axis = -1)] = replacement_color
img2 = Image.fromarray(data, mode='RGB')
img2.show()
</code></pre>

<hr>

<p>Since <code>orig_color</code> is a tuple of length 3, and <code>data</code> has
shape <code>(W,H,3)</code>, NumPy
<a href=""http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html"" rel=""nofollow"">broadcasts</a>
<code>orig_color</code> to an array of shape <code>(W,H,3)</code> to perform the comparison <code>data ==
orig_color</code>. The result in a boolean array of shape <code>(W,H,3)</code>.</p>

<p><code>(data == orig_color).all(axis = -1)</code> is a boolean array of shape <code>(W,H)</code> which
is True wherever the RGB color in <code>data</code> is <code>original_color</code>.</p>
","python"
"1947",17772876,"<p>There is no builtin Python class that raises a TypeError with <code>str</code>, but you could define a custom class:</p>

<pre><code>class Foo(object):
    def __str__(self):
        raise TypeError('Can not by stringified')


foo = Foo()
b = str(foo)
</code></pre>

<p>raises a <code>TypeError</code>.</p>
","python"
"1948",27120028,"<p>I think it is 'banner' instead of 'image'</p>

<pre><code>twitter.update_profile_background_image(banner=st)
</code></pre>
","python"
"1949",3012157,"<p>The main assumptions are about the amount of cpu/cache/ram/storage/bandwidth you can have in a single machine at an acceptable price. There are lots of answers here at stackoverflow still based on the old assumptions of a 32 bit machine with 4G ram and about a terabyte of storage and 1Gb network. With 16GB DDR-3 ram modules at 220 Eur, 512 GB ram, 48 core machines can be build at reasonable prices. The switch from hard disks to SSD is another important change.</p>
","python"
"1950",8796654,"<p>The solution is to replace code like this:</p>

<p>1) Do something.<br>
2) Wait for something to happen.<br>
3) Do something else.<br></p>

<p>With code like this:</p>

<p>1) Do something.<br>
2) Arrange it so that when something happens, something else gets done.<br>
3) Done.</p>

<p>Somewhere else, you have a few threads that do this:</p>

<p>1) Wait for anything to happen.<br>
2) Handle whatever happened.<br>
3) Go to step 1.</p>

<p>In the first case, if you're waiting for 50 things to happen, you have 50 threads sitting around waiting for 50 things to happen. In the second case, you have one thread waiting around that will do whichever of those 50 things need to get done.</p>

<p>So, don't use a thread to wait for a single thing to happen. Instead, arrange it so that when that thing happens, some other thread will do whatever needs to get done next.</p>
","python"
"1951",30433068,"<p>The problem is at this line:</p>

<pre><code>password = browser.find_element_by_xpath(""//input[@type='text'][@name='pw'][@value='Password']"").click()
</code></pre>

<p>Once you click the element, the type changes to 'password' and therefore selenium can't send commands to an the element that you saved in password. This is sometimes called a 'stale' element because it doesn't exist on the page anymore.</p>

<p>You can fix this by changing your code to this:</p>

<pre><code>browser.find_element_by_xpath(""//input[@type='text'][@name='pw'][@value='Password']"").click()
browser.find_element_by_xpath(""//input[@type='password'][@name='pw'][@value='Password']"").send_keys('mypass')
</code></pre>
","python"
"1952",1185199,"<p>You need to wrap the whole thing as a literal string. You're trying to print that out as a string I assume, correct?</p>
","python"
"1953",34381995,"<p>Try this:</p>

<pre><code>txtFile = open(""D:\folder\m.txt"", 'r')
</code></pre>

<p><code>'r'</code> for reading.</p>
","python"
"1954",36232314,"<p>This is done in one pass and without requiring any extra memory for the resulting arrays.</p>

<p>Pair up the elements at each index and iterate over them. Keep a track of which pairs have been seen so far and a counter of the index of the arrays. When a new pair has not been seen before, the index will increase by 1, effectively writing them back to their original place. However, for a duplicate pair you don't increase the index, effectively shifting every new pair one position to the left. At the end, keep the first <code>index</code>th number of elements to shorten the arrays.</p>

<pre><code>import itertools as it

def delete_duplicate_pairs(*arrays):
    unique = set()
    arrays = list(arrays)
    n = range(len(arrays))
    index = 0
    for pair in it.izip(*arrays):
        if pair not in unique:
            unique.add(pair)
            for i in n:
                arrays[i][index] = pair[i]
            index += 1
    return [a[:index] for a in arrays]
</code></pre>

<p>If you are on Python 2, <code>zip()</code> creates the list of pairs up front. If you have a lot of elements in your arrays, it'll be more efficient to use <code>itertools.izip()</code> which will create the pairs as you request them. However, <code>zip()</code> in Python 3 behaves like that by default.</p>

<p>For your case,</p>

<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([1,3,6,3,7,8,3,2,9,10,14,6])
&gt;&gt;&gt; b = np.array([2,4,15,4,7,9,2,2,0,11,4,15])
&gt;&gt;&gt; a, b = delete_duplicate_pairs(a, b)
&gt;&gt;&gt; a
array([ 1,  3,  6,  7,  8,  3,  2,  9, 10, 14])
&gt;&gt;&gt; b
array([ 2,  4, 15,  7,  9,  2,  2,  0, 11,  4])
</code></pre>

<p>Now, it all comes down to what values your arrays hold. If you have only the values 0-9, there are only 100 unique pairs and most elements will be duplicates, which saves you time. For 20 million elements for both <code>a</code> and <code>b</code> and containing values only between 0-9, the process completes in 6 seconds. For values between 0-999, it takes 12 seconds.</p>
","python"
"1955",13398697,"<p>Use <strong>bedtools</strong> intersectBed: <a href=""http://code.google.com/p/bedtools/wiki/Usage#intersectBed"" rel=""nofollow"">http://code.google.com/p/bedtools/wiki/Usage#intersectBed</a></p>

<p>(you could also ask <a href=""http://www.biostars.org/"" rel=""nofollow"">http://www.biostars.org/</a> )</p>
","python"
"1956",35431310,"<p>From looking at your sample code, the LDAP_USER_NAME is a not in the expected DN (distinguished name) format. Typically, Active Directory users have a DN in the format of cn=&lt;username&gt;,cn=users,&lt;domain&gt;. For example, user bjensen in the example.com domain typically would have this DN: cn=bjensen,cn=users,dc=example,dc=com</p>

<p>My guess is that either Active Directory or the Python LDAP library may not return invalid credentials if the DN part is incorrect.</p>
","python"
"1957",33860879,"<p>You can append the two frames and use <code>drop_duplicates</code> to get the unique rows, then as suggested by @Alexander you can use <code>iloc</code> to get the rows you want:</p>

<pre><code>df1 = pd.DataFrame({'First': {0: 'John', 1: 'Lisa', 2: 'Maria', 3: 'Seth'},
                    'Last': {0: 'Mullen', 1: 'Bush', 2: 'Murphy', 3: 'Black'},
                    'dob': {0: '12/08/1993', 1: '06/12/1990', 2: '30/03/1989', 3: '21/06/1991'}})

df2 = pd.DataFrame({'First': {0: 'John', 1: 'Lisa', 2: 'Seth', 3: 'Joe', 4: 'Debby'},
                    'Last': {0: 'Mullen', 1: 'Bush', 2: 'Black', 3: 'Maher', 4: 'White'},
                    'dob': {0: '12/08/1993', 1: '06/12/1990',  2: '21/06/1991',  3: '28/09/1990',  4: '03/01/1992'}})
&gt;&gt;&gt; df1.append(df2).drop_duplicates()
   First    Last         dob
0   John  Mullen  12/08/1993
1   Lisa    Bush  06/12/1990
2  Maria  Murphy  30/03/1989
3   Seth   Black  21/06/1991
3    Joe   Maher  28/09/1990
4  Debby   White  03/01/1992
&gt;&gt;&gt; df1.append(df2).drop_duplicates().iloc[df1.shape[0]:, :]
   First   Last         dob
3    Joe  Maher  28/09/1990
4  Debby  White  03/01/1992
</code></pre>
","python"
"1958",1116172,"<p>Here's my attempt, this is tested.  While recursive, there should be no unnecessary string duplication, although a generator might be more optimal</p>

<pre><code>def bracketed_find(s, start, end, startat=0):
    startloc=s.find(start, startat)
    if startloc==-1:
    	return []
    endloc=s.find(end, startloc+len(start))
    if endloc == -1:
    	return [s[startloc+len(start):]]
    return [s[startloc+len(start):endloc]] + bracketed_find(s, start, end, endloc+len(end))
</code></pre>

<p>and here is a generator version</p>

<pre><code>def bracketed_find(s, start, end, startat=0):
    startloc=s.find(start, startat)
    if startloc==-1:
    	return
    endloc=s.find(end, startloc+len(start))
    if endloc == -1:
    	yield s[startloc+len(start):]
    	return
    else:
    	yield s[startloc+len(start):endloc]

    for found in bracketed_find(s, start, end, endloc+len(end)):
    	yield found
</code></pre>
","python"
"1959",17074858,"<p>Try <code>p.values['fromX']</code>or <code>p.get_variable('fromX')</code></p>
","python"
"1960",3380654,"<p>How about...</p>

<pre><code># index is 0-based
def nindex(needle, haystack, index=0):
     parts = haystack.split(needle)
     if index &gt;= len(parts)-1:
         return -1
     return sum(len(x) for x in parts[:index+1])+index*len(needle)
</code></pre>
","python"
"1961",34419351,"<p>It looks like the goose has traditionally had problems with New York Times because (1) they redirect users through another page to add/check cookies (see curl below) and because (2) they don't actually load the text of articles on page load.  They do it asynchronously after first executing ad display code.</p>

<pre><code>~ curl -I ""http://www.nytimes.com/reuters/2015/12/21/world/africa/21reuters-kenya-attacks-somalia.html""
HTTP/1.1 303 See Other
Server: Varnish
Location: http://www.nytimes.com/glogin?URI=http%3A%2F%2Fwww.nytimes.com%2Freuters%2F2015%2F12%2F21%2Fworld%2Fafrica%2F21reuters-kenya-attacks-somalia.html%3F_r%3D0
Accept-Ranges: bytes
Date: Tue, 22 Dec 2015 15:46:55 GMT
X-Varnish: 1338962331
Age: 0
Via: 1.1 varnish
X-API-Version: 5-0
X-PageType: article
Connection: close
X-Frame-Options: DENY
Set-Cookie: RMID=007f01017a275679706f0004;Path=/; Domain=.nytimes.com;Expires=Wed, 21 Dec 2016 15:46:55 UTC
</code></pre>
","python"
"1962",10318248,"<p>Parentheses have <a href=""http://www.regular-expressions.info/brackets.html"">special meaning in regular expressions</a>. <a href=""http://stackoverflow.com/a/10318284/139010"">You can escape the paren</a> but <strong>you really do not need a regex at all for this problem</strong>:</p>

<pre><code>def commandType(self):
    print self.cmds[self.counter]
    if '@' in self.cmds[self.counter]):
        return Parser.A_COMMAND

    elif '(' in self.cmds[self.counter]:
        return Parser.L_COMMAND

    else:
        return Parser.C_COMMAND
</code></pre>
","python"
"1963",29567768,"<p>there are 2 problems here :</p>

<p>1st</p>

<pre><code>x=input(""Enter a Number: "")
</code></pre>

<p>will be a string, not a number, using <code>int(x)</code> should fix this</p>

<p>2nd</p>

<pre><code>if type (sqrt(x)) == int:
</code></pre>

<p><code>sqrt()</code> always return a float, you can use <code>float.is_integer()</code>, like this : <code>sqrt(x)).is_integer()</code> to check if the square root is a integer.</p>

<p>final code :</p>

<pre><code>
    from math import *
    x=<b>int(</b>input(""Enter a Number: "")<b>)</b>
    if sqrt(x)<b>.is_integer():</b>
        print (sqrt(x))
    else:
        print(""There is no integer square root"")
</code></pre>
","python"
"1964",35047646,"<p>Based on discussion with zzzeek in the comments, I ended up changing the query on the read side to only request valid data. Instead of:</p>

<pre><code>rows =  session.query(Campaign).all()
</code></pre>

<p>I'm doing</p>

<pre><code>valid_descriptions = [m.polymorphic_identity for m in 
                      Campaign.__mapper__.polymorphic_iterator()]
rows =  session.query(Campaign)\
                .filter(Campaign.description.in_(valid_descriptions))\
                .all()
</code></pre>
","python"
"1965",28504838,"<p>Couple of things I noticed:</p>

<ol>
<li><code>numberboy == randrange(7,9)</code> should be <code>numberboy = randrange(7,9)</code></li>
<li>You never define health with a value, you only try to subtract from it. That will throw a <code>NameError</code></li>
<li>You are comparing integers to strings. Should be <code>numerboy == 7</code> instead of <code>numberboy == '7'</code></li>
</ol>
","python"
"1966",29572684,"<p>The <code>connect_signals()</code> method is not introspectable because it assumes that all the callable symbols are going to be resolved via <code>dlsym()</code>, which is something that only works in C.</p>

<p>For interpreted languages, and languages that perform name mangling on the symbols, you will have to use the <code>connect_signals_full()</code> method, and pass a function that can resolve the signal handler name as used in the UI description data into a callable object.</p>

<p>For instance, you could reuse the code that the <code>Gtk</code> override inside pygobject uses to implement the same functionality: <a href=""https://git.gnome.org/browse/pygobject/tree/gi/overrides/Gtk.py#n441"" rel=""nofollow"">https://git.gnome.org/browse/pygobject/tree/gi/overrides/Gtk.py#n441</a></p>
","python"
"1967",30327153,"<p>You can do it with an axis formatter:</p>

<pre><code>from  matplotlib.ticker import FuncFormatter
</code></pre>

<p>then, after your barplot line:</p>

<pre><code>plt.gca().xaxis.set_major_formatter(FuncFormatter(lambda x, _: int(x)))
</code></pre>
","python"
"1968",17665525,"<p>I'm 90% sure it's caused by the following 2 lines in your <code>listing</code> view:</p>

<pre><code>directory_list = search
paginator = Paginator(directory_list, 10) # Show 10 business details per page
</code></pre>

<p><code>search</code> is not a defined variable. Perhaps you may have been trying to call <code>search()</code>, but even that will return an HttpResponse which is not something you can paginate with.</p>

<p>The first value you pass to <code>Paginator()</code> should be a collection of multiple objects/items. For example, <code>Paginator(Photos.objects.all(), 10)</code> would display 10 photos per page.</p>

<hr>

<p>On a side note, you are a little inconsistent with your notation in your views. For example,</p>

<pre><code>def contactus(request):
    Directory_list = Directory.objects.all()
    t=loader.get_template('crawlerapp/contactus.html')
    c = Context({'Directory_list': Directory_list,})
    return HttpResponse(t.render(c))
</code></pre>

<p>can be rewritten as </p>

<pre><code>def contactus(request):
    Directory_list = Directory.objects.all()
    return render(request, 'crawlerapp/contactus.html', {'Directory_list': Directory_list,})
</code></pre>

<p>which is similar to what you did in your <code>search</code> view.</p>

<hr>

<p>On another side note, you shouldn't publicly display your <code>SECRET_KEY</code> value, for obvious security reasons. Just trying to help!</p>
","python"
"1969",30147165,"<p>You are not comparing for equality. You are <strong>assigning</strong>.</p>

<p>Python allows you to assign to multiple targets:</p>

<pre><code>foo, bar = 1, 2
</code></pre>

<p>assigns the two values to <code>foo</code> and <code>bar</code>, respectively. All you need is a <em>sequence</em> or <em>iterable</em> on the right-hand side, and a list or tuple of names on the left.</p>

<p>When you do:</p>

<pre><code>[] = """"
</code></pre>

<p>you assigned an <em>empty</em> sequence (empty strings are sequences still) to an empty list of names.</p>

<p>It is essentially the same thing as doing:</p>

<pre><code>[foo, bar, baz] = ""abc""
</code></pre>

<p>where you end up with <code>foo = ""a""</code>, <code>bar = ""b""</code> and <code>baz = ""c""</code>, but with fewer characters.</p>

<p>You cannot, however, assign to a string, so <code>""""</code> on the left-hand side of an assignment never works and is always a syntax error.</p>

<p>See the <a href=""https://docs.python.org/3/reference/simple_stmts.html#assignment-statements""><em>Assignment statements</em> documentation</a>:</p>

<blockquote>
  <p>An assignment statement evaluates the expression list (remember that this can be a single expression or a comma-separated list, the latter yielding a tuple) and assigns the single resulting object to each of the target lists, from left to right.</p>
</blockquote>

<p>and</p>

<blockquote>
  <p>Assignment of an object to a target list, <strong>optionally enclosed in parentheses or square brackets</strong>, is recursively defined as follows.</p>
</blockquote>

<p><em>Emphasis mine</em>.</p>

<p>That Python doesn't throw a syntax error for the empty list is actually a bit of a bug! The officially documented grammar doesn't allow for an empty target list, and for the empty <code>()</code> you do get an error.  See <a href=""http://bugs.python.org/issue23275"">bug 23275</a>; it is considered a harmless bug:</p>

<blockquote>
  <p>The starting point is recognizing that this has been around for very long time and is harmless.</p>
</blockquote>

<p>Also see <a href=""http://stackoverflow.com/questions/29870019/why-is-it-valid-to-assign-to-an-empty-list-but-not-to-an-empty-tuple"">Why is it valid to assign to an empty list but not to an empty tuple?</a></p>
","python"
"1970",39965689,"<p>So what is going on, is that you have just ordinary urls, when you needed <code>i18n_patterns</code>,</p>

<p>So, change your urls to </p>

<pre><code>import os

from django.conf.urls import url, include
from django.conf.urls.i18n import i18n_patterns
from django.contrib import admin
from django.contrib.staticfiles.urls import staticfiles_urlpatterns

urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^i18n/', include('django.conf.urls.i18n')),
]

urlpatterns += i18n_patterns(
    url(r'^', include('account_management.urls')),  # put here urls that you need to translate
)

urlpatterns += staticfiles_urlpatterns()
</code></pre>

<p>The docs can be found here <a href=""https://docs.djangoproject.com/en/1.10/topics/i18n/translation/#module-django.conf.urls.i18n"" rel=""nofollow""><code>i18n_patterns</code></a></p>
","python"
"1971",28400696,"<p>The problem is that the function <code>mckay</code> is modifying the same list object, so when you call <code>list()</code> on it you actually get a list containing 4 items that actually point to the same object. So, as in the end the list object is empty all you get is list with empty lists.</p>

<pre><code>&gt;&gt;&gt; p = mckay(4)
&gt;&gt;&gt; [id(x) for x in p]
[139854369904832, 139854369904832, 139854369904832, 139854369904832, 139854369904832]

&gt;&gt;&gt; for x in mckay(4):
    print x, '--&gt;', id(x)

[4] --&gt; 140446845125552
[3, 1] --&gt; 140446845125552
[2, 2] --&gt; 140446845125552
[2, 1, 1] --&gt; 140446845125552
[1, 1, 1, 1] --&gt; 140446845125552
&gt;&gt;&gt; x # The actual list object is empty at the end of the iteration
[]
&gt;&gt;&gt; id(x)
140446845125552
</code></pre>

<p>But when you loop over it you're simply printing the returned object immediately hence the different output, a fix here is to yield a shallow copy:</p>

<pre><code>yield p[:]
</code></pre>
","python"
"1972",26716133,"<p>You never initialize <code>q2</code>. It cannot have a value. Try to define it in global scope - after the imports. Then call it iniside the function<code>position()</code>.</p>
","python"
"1973",29186436,"<p>When using <code>sm.OLS(y, X)</code>, <code>y</code> is the dependent variable, and <code>X</code> are the
independent variables.</p>

<p>In the formula <code>W ~ PTS + oppPTS</code>, <code>W</code> is the dependent variable and <code>PTS</code> and <code>oppPTS</code> are the independent variables.</p>

<p>Therefore, use </p>

<pre><code>y = NBA['W']
X = NBA[['PTS', 'oppPTS']]
</code></pre>

<p>instead of </p>

<pre><code>X = NBA['W']
y = NBA[['PTS', 'oppPTS']]
</code></pre>

<hr>

<pre><code>import pandas as pd
import statsmodels.api as sm

NBA = pd.read_csv(""NBA_train.csv"")    
y = NBA['W']
X = NBA[['PTS', 'oppPTS']]
X = sm.add_constant(X)
model11 = sm.OLS(y, X).fit()
model11.summary()
</code></pre>

<p>yields</p>

<pre><code>                            OLS Regression Results                            
==============================================================================
Dep. Variable:                      W   R-squared:                       0.942
Model:                            OLS   Adj. R-squared:                  0.942
Method:                 Least Squares   F-statistic:                     6799.
Date:                Sat, 21 Mar 2015   Prob (F-statistic):               0.00
Time:                        14:58:05   Log-Likelihood:                -2118.0
No. Observations:                 835   AIC:                             4242.
Df Residuals:                     832   BIC:                             4256.
Df Model:                           2                                         
Covariance Type:            nonrobust                                         
==============================================================================
                 coef    std err          t      P&gt;|t|      [95.0% Conf. Int.]
------------------------------------------------------------------------------
const         41.3048      1.610     25.652      0.000        38.144    44.465
PTS            0.0326      0.000    109.600      0.000         0.032     0.033
oppPTS        -0.0326      0.000   -110.951      0.000        -0.033    -0.032
==============================================================================
Omnibus:                        1.026   Durbin-Watson:                   2.238
Prob(Omnibus):                  0.599   Jarque-Bera (JB):                0.984
Skew:                           0.084   Prob(JB):                        0.612
Kurtosis:                       3.009   Cond. No.                     1.80e+05
==============================================================================

Warnings:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
[2] The condition number is large, 1.8e+05. This might indicate that there are
strong multicollinearity or other numerical problems.
</code></pre>
","python"
"1974",12119964,"<p>You can use <a href=""http://pypi.python.org/pypi/django-taggit"" rel=""nofollow"">django-taggit</a> (<a href=""http://django-taggit.readthedocs.org/en/latest/index.html"" rel=""nofollow"">docs</a>) to add tags to your models (e.g., your <code>BlogPost</code> model). Each model will have a field that stores these tags and there will also be an additional section in your Django admin for managing these tags.</p>
","python"
"1975",24956308,"<p>First of all, writing <code>123 12 123 123 123</code> is not a valid Python syntax.</p>

<p>Create a list or a tuple with your integers: <code>values = (1,2,3,4,5)</code></p>

<p>Now, we need to convert that data into a binary string that represents our values.</p>

<p>So here how we do it</p>

<pre><code>import struct

values = (1,2,3,4,5)

string = ''

for i in values:
    string += struct.pack('!B',i)

# Now send the string to the serial port
</code></pre>

<p>Depending on how many bytes you want to use per number, you need to pack them differently. See the documentation here: <a href=""https://docs.python.org/2/library/struct.html"" rel=""nofollow"">https://docs.python.org/2/library/struct.html</a></p>
","python"
"1976",37030132,"<p>I was able to get this working using <code>driver.execute_script('$( ""a.ui-datepicker-next"" ).click()')</code> since everything else was giving me <code>ElementNotVisibleException</code> and then i noticed that there was javascript involved</p>

<pre><code>&lt;a class=""ui-datepicker-next ui-corner-all"" data-handler=""next"" data-event=""click"" title=""Próximo&gt;""&gt;&lt;span class=""ui-icon ui-icon-circle-triangle-e""&gt;Próximo&amp;gt;&lt;/span&gt;&lt;/a&gt;
</code></pre>

<p>I would rather not use <code>Javascript</code> or <code>jQuery</code> directly so if anyone has better suggestions i can try them.</p>

<p>But there are still a few quirks, for example i have to manually reset the calendar each time i get the availability for a certain month.</p>

<p>here is my final code:</p>

<pre><code>def homeaway(self):
    MONTH_COUNT = 6
    display = Display(visible=0, size=(1024, 768))
    display.start()
    driver = webdriver.Firefox()
    driver.maximize_window()

    wait = WebDriverWait(driver, 10)

    url = 'https://www.homeaway.pt/arrendamento-ferias/p1418427a?uni_id=1590648'
    driver.get(url)

    count = 0
    for month in range(MONTH_COUNT):
        # pick start date
        start_date = wait.until(EC.visibility_of_element_located((
            By.CSS_SELECTOR,
            "".quotebar-container input[name=startDateInput]"")))
        start_date.click()

        for x in range(count):
            driver.execute_script('$( ""a.ui-datepicker-next"" ).click()')

        current_month = driver.find_element_by_css_selector(
            "".ui-datepicker-month"").text

        print(""current_month:"", current_month)

        first_available_date = wait.until(EC.element_to_be_clickable(
            (By.CSS_SELECTOR, ""#ui-datepicker-div td.full-changeover &gt; a"")))

        ActionChains(driver).move_to_element(first_available_date).perform()
        driver.find_element_by_css_selector(
            ""#ui-datepicker-div td.full-selected.full-changeover &gt; a"").click()

        # pick end date (TODO: violates DRY principle, refactor!)
        end_date = wait.until(EC.visibility_of_element_located(
            (By.CSS_SELECTOR,
             "".quotebar-container input[name=endDateInput]"")))

        end_date.click()

        first_available_date = wait.until(EC.element_to_be_clickable(
            (By.CSS_SELECTOR, ""#ui-datepicker-div td.full-changeover &gt; a"")))

        ActionChains(driver).move_to_element(first_available_date).perform()
        driver.find_element_by_css_selector(
            ""#ui-datepicker-div td.full-selected.full-changeover &gt; a"").click()

        # get the calculated price
        price = wait.until(EC.visibility_of_element_located(
            (By.CSS_SELECTOR, "".price-quote .price-total"")))

        print(price.text.encode('ascii', 'ignore'))

        driver.execute_script('$( ""button.ui-datepicker-clear"" ).click()')

        count += 1

    driver.close()
</code></pre>
","python"
"1977",2523236,"<p>This should work:</p>

<pre><code>def sublists(lst):
    for sublen in xrange(1,len(lst)+1):
        for idx in xrange(0,len(lst)-sublen+1):
            yield lst[idx:idx+sublen]
</code></pre>
","python"
"1978",25224397,"<p>Finally, the problem is solved.<br>
This happens because the form is unbound, because of one of my careless mistakes:  </p>

<pre><code>form = Review_Form(sentences=sents)
</code></pre>

<p>instead of what it should be:  </p>

<pre><code>form = Review_Form(request.POST, sentences=sents)
</code></pre>

<p>I answered this because I think this is probably useful for other new developers like me.<br>
Read more on unbound and bound forms, if you like, from here: <a href=""https://docs.djangoproject.com/en/dev/ref/forms/api/"" rel=""nofollow"">Django form API</a></p>
","python"
"1979",36285876,"<p>I have faced exact same issue in our Spark cluster.</p>

<p>This issue usually happens when you run a very intensive app on spark, and try to run another app after that.</p>

<p>Thing is, one of the executor becomes non-responsive after intensive running from previous run, but spark keeps poking it. Not sure why spark keeps on doing this in Standalone and Cluster mode, because this doesn't happen in yarn mode. Ideal scenario, Spark was built with robustness to keep running job even if one executor/worker fails.</p>

<p>To fix this, you need to restart the workers and executors which have gone non-responsive. Your app will start running.
If you are not able to find which executor, just restart all of them and master. It will fix this.</p>
","python"
"1980",17202364,"<p>You might want to check out the <a href=""http://www.voidspace.org.uk/python/articles/urllib2.shtml"">urllib2 missing manual</a> for more information, but basically you create a dictionary of your header labels and values and pass it to the <code>urllib2.Request</code> method. A (slightly) modified version of the code from the linked manual:</p>

<pre><code>from urllib import urlencode
from urllib2 import Request urlopen

# Define values that we'll pass to our urllib and urllib2 methods
url = 'http://www.something.com/blah'
user_host = 'example.com'
values = {'name' : 'Engineero',      # dict of keys and values for our POST data
          'location' : 'Interwebs',
          'language' : 'Python' }
headers = { 'Host' : user_host }     # dict of keys and values for our header

# Set up our request, execute, and read
data = urlencode(values)             # encode for sending URL request
req = Request(url, data, headers)    # make POST request to url with data and headers
response = urlopen(req)              # get the response from the server
the_page = response.read()           # read the response from the server

# Do other stuff with the response
</code></pre>
","python"
"1981",15461135,"<p>You could use a class decorator:</p>

<pre><code>def add_notification(cls):
    for key in NOTIFICATION_TYPES:
        setattr(cls, key, models.BooleanField(_('notify new matches'), default=True))
    return cls

@add_notification
class EmailNotification(models.Model):
    """"""
    User Email Notification Model
    Takes care of tracking the user's email notification preferences
    """"""
    user = models.OneToOneField(User, verbose_name=_('user'))

    class Meta:
        db_table = 'profile_email_notification'
</code></pre>
","python"
"1982",5300387,"<p>Just override the <code>kind()</code> method of your class:</p>

<pre><code>class MyModel(db.Model):
  @classmethod
  def kind(cls):
    return 'prefix_%s' % super(MyModel, cls).kind()
</code></pre>

<p>You can define a custom baseclass that does this for you:</p>

<pre><code>class ModuleModel(db.Model):
  @classmethod
  def kind(cls):
    return '%s_%s' % (cls.__module__, super(ModuleModel, cls).kind())
</code></pre>

<p>Any class that extends ModuleModel will have the name of the module it's defined in prefixed to the kind name.</p>
","python"
"1983",23200350,"<p>The best idea in this situation is probably to launch a dedicated process just for this stuff. Any other way and your objects are not guaranteed to be single across your deployment cluster.</p>

<p>If you are deploying using separate process workers you will have several different copies of your NLP data (one per process), and if you're deploying using cooperative threads (such as when using gunicorn gevent workers) then you have to make sure your code is thread-safe.</p>

<p>I would set up this as an external service running on a dedicated process, and have each client access this service using your choice of intra-process communication (sockets, HTTP, whatever).</p>

<p>For local development, testing purposes and ease of deployment you can always fall back to loading these objects into your projects settings.</p>
","python"
"1984",20732404,"<p>How about something like this?</p>

<pre><code>def chrToInt(c):
    if c &gt;= '0' and c &lt;= '9':
        return int(ord(c) - ord('0'))
    elif c &gt;= 'A' and c &lt;= 'F':
        return int(ord(c) - ord('A')) + 10
    else:
        # invalid hex character, throw an exception or something here
        return None

def hexToBytes(input):
    bytes = []

    for i in range(0, len(input) - 1, 2):
        val = (chrToInt(input[i]) * 16) + chrToInt(input[i + 1])

        bytes.append(val)

    return bytes

print hexToBytes(""AB02CF4AFF"")
</code></pre>

<p>You could speed it up quite a bit by making chrToInt branchless by using binary operations, and you could also modify hexToBytes to say exactly how many characters it should read if you decide you want to use something bigger than bytes (so it returns it in groups of 4 for a short or 8 for an int).</p>
","python"
"1985",21192230,"<p>You're missing a <code>return</code>:</p>

<pre><code>def is_palindrome(word):
    if len(word) &lt;= 1:
        return True
    elif first(word) == last(word):
        return is_palindrome(middle(word))  # &lt;--
    else:
        return False
</code></pre>

<p>So your current snippet is returning <code>None</code> once the <code>elif</code> block is entered, since you don't have an explicit return statement there. In other words, you <em>do</em> compute <code>is_palindrome(middle(word))</code>, but you do nothing with the result.</p>

<p>Maybe working through a simple example would help. Consider calling the <em>original</em> function with an argument of <code>'aba'</code>:</p>

<ul>
<li>function called</li>
<li><code>word</code> is now <code>'aba'</code></li>
<li><code>len(word) &lt;= 1</code> is <code>False</code>, <code>if</code>-body not entered.</li>
<li><code>first(word) == last(word)</code> is <code>True</code>, <code>elif</code>-body entered:
<ul>
<li>function called recursively:</li>
<li><code>word</code> is now <code>'b'</code></li>
<li><code>len(word) &lt;= 1</code> is <code>True</code>, <code>if</code>-body entered:
<ul>
<li><code>True</code> returned</li>
</ul></li>
</ul></li>
<li>Return value of recursive call discarded (since we have no <code>return</code> in <code>elif</code>)</li>
<li><code>None</code> returned</li>
</ul>
","python"
"1986",19508042,"<p>You could use <code>groupby</code> and <code>filter</code>:</p>

<pre><code>&gt;&gt;&gt; df.groupby(""item_id"").filter(lambda x: len(x) &gt; 1)
   item_id    measure1    measure2
0        1  someNumber  someNumber
1        1  someNumber  someNumber
2        1  someNumber  someNumber
4        3  someNumber  someNumber
5        3  someNumber  someNumber
7        5  someNumber  someNumber
8        5  someNumber  someNumber
</code></pre>

<p>In fact, this is very similar to one of the examples in <a href=""http://pandas.pydata.org/pandas-docs/dev/groupby.html#filtration"" rel=""nofollow"">the docs</a>.</p>

<hr>

<p>Note that, after some discussion in the comments, it became clear that in certain circumstances this doesn't seem to work in 0.12, but does in current trunk.  I believe this was fixed in <a href=""https://github.com/pydata/pandas/commit/e47e981f0a72b595e7bdce5e65acee125970e1e4"" rel=""nofollow"">this commit</a> by jreback, which if I'm reading right branches on the type of the filter result, and thus avoids the difficulty.</p>
","python"
"1987",18369993,"<p>Since it isn't documented, let's look at the source code. I only looked at the <a href=""http://sourceforge.net/p/pyserial/code/461/tree/trunk/pyserial/serial/serialposix.py#l479"" rel=""nofollow"">POSIX</a> and <a href=""http://sourceforge.net/p/pyserial/code/461/tree/trunk/pyserial/serial/serialwin32.py#l253"" rel=""nofollow"">Win32</a> implementations, but it's pretty obvious that on at least those two platforms:</p>

<ol>
<li>There are <em>no</em> circumstances when <code>write(data)</code> may return fewer bytes written than the length of the data, timeout or otherwise; it always either returns the full <code>len(data)</code>, or raises an exception.</li>
<li>If you use a positive <code>writeTimeout</code> and the <code>SerialTimeoutException</code> is raised, there is no way at all to tell how many bytes were sent.</li>
</ol>

<p>In particular, on POSIX, the number of bytes sent so far is only stored on a local variable that's lost as soon as the exception is raised; on Windows, it just does a single overlapped <code>WriteFile</code> and raises an exception for anything but a successful ""wrote everything"".</p>

<p>I assume that you care about at least one of those two platforms. (And if not, you're probably not writing cross-platform code, and can look at the one platform you do care about.) So, there is no direct solution to your problem.</p>

<p>If the workaround you described is acceptable, or a different one (like writing exactly one byte at a time—which is probably even less efficient, but maybe simpler), do that.</p>

<p>Alternatively, you will have to edit the <code>write</code> implementations you care about (whether you do this by forking the package and editing your fork, monkeypatching <code>Serial.write</code> at runtime, or just writing a <code>serial_write</code> function and calling <code>serial_write(port, data)</code> instead of <code>port.write(data)</code> in your script) to provide the information you want.</p>

<p>That doesn't look too hard. For example, in the POSIX version, you just have to stash <code>len(data)-t</code> somewhere before either of the <code>raise writeTimeoutError</code> lines. You could stick it in an attribute of the <code>Serial</code> object, or pass it as an extra argument to the exception constructor. (Of course if you're trying to write a cross-platform program, and you don't know all of the platforms well enough to write the appropriate implementations, that isn't likely to be a good answer.)</p>

<p>And really, given that it's not that hard to implement what you want, you might want to add a feature request (ideally with a patch) on the pyserial tracker.</p>
","python"
"1988",13715134,"<p>You need to check and make sure that len(tag) is not 0 before you ever try to mod(<strong>%</strong>) another value by it. A mod(<strong>%</strong>) is basically a divide operation, so <strong>if len(tag) equals 0, you will get the ZeroDivisionError</strong>.</p>

<p>Consider the following code which will escape the for loop if len(tag) equals 0:</p>

<pre><code>for i,j in enumerate(output.readlines()):
    if len(tag) == 0:
        continue
    elif i % len(tag) == 0:
        #Rest of your code here.. 
        if i % len(tag) == len(tag) - 1:
            outputfile.write(""something"")
</code></pre>
","python"
"1989",19664024,"<p>pick one depending on how much you know about whats in your list.</p>

<p>print first 3</p>

<pre><code>print var[:3]
</code></pre>

<p>print any name with pattern <code>renderPass</code> followed by a digit</p>

<pre><code>print [name for name in var if name.startswith('renderPass') and name[9].isdigit()]
</code></pre>

<p>print any name with a digit anywhere in it</p>

<pre><code>print [name for name in var if any(ch.isdigit() for ch in name)]
</code></pre>
","python"
"1990",36219212,"<p>A few suggestions and clarifications:</p>

<p><code>f.read()</code> reads the entire file. This is probably not a good idea for large files. Instead, use</p>

<pre><code>with open(filename, ""r"") as f:
    for line in f:
        # do something with the line
</code></pre>

<p>Using <code>with open()</code> also eliminates the need for closing the file afterwards - it's done automatically.</p>

<p><code>string.replace()</code> returns the entire string with the first argument replaced by the second. Since you make a new variable every time you use <code>replace</code>, the changes only apply to the individual variables. Changes made in <code>postgres</code> will not exist in <code>dbname</code>.
Instead, redefine the variable <code>filedata</code> for every <code>replace</code> to keep the changes and avoid needless copying:</p>

<pre><code>filedata = filedata.replace('# DBENGINE=MYSQL', 'DBENGINE=PGSQL')
filedata = filedata.replace('# DBNAME=DB1', 'DBNAME=DB1')
filedata = filedata.replace('# DBRWUSER=""user1""', 'DBRWUSER=""user1""')
# at this point, filedata contains all three changes
</code></pre>

<p>When you open a file for writing using the <code>w</code> option, the file is overwritten. This means that the file will only contain the contents written by your last write, <code>f.write(dbrwuser)</code>. Instead, make your changes and only write once or append to the file instead:</p>

<pre><code>filedata = filedata.replace('# DBENGINE=MYSQL', 'DBENGINE=PGSQL')
...
...

with open('/path/to/file', 'w') as f:
    f.write(filedata)
</code></pre>
","python"
"1991",27880302,"<p>.wav files cannot be bigger than 4GB as the wave file format specification prevents that. As explained on Wikipedia:</p>

<blockquote>
  <p>The WAV format is limited to files that are less than 4 GB, because of its use of a 32-bit unsigned integer to record the file size header.</p>
</blockquote>

<p>See also <a href=""http://bugs.python.org/issue16461"" rel=""nofollow"">issue 16461</a> in Python which increases the limit from 2GB to 4GB (but that's it).</p>
","python"
"1992",20208257,"<p>@RyanHaining is correct.  For a truly bizarre workaround, add this method to your class:</p>

<pre><code>def timetuple(self):
    return None
</code></pre>

<p>Then your program will print <code>True</code> twice.  The reasons for this are involved, having to do with an unfortunate history of comparisons in Python 2 being far too loose.  The <code>timetuple()</code> workaround is mostly explained in this part of the docs:</p>

<blockquote>
  <p>Note In order to stop comparison from falling back to the
  default scheme of comparing object addresses, datetime
  comparison normally raises TypeError if the other comparand
  isn’t also a datetime object. However, NotImplemented is
  returned instead if the other comparand has a timetuple()
  attribute. This hook gives other kinds of date objects a
  chance at implementing mixed-type comparison. If not,
  when a datetime object is compared to an object of a
  different type, TypeError is raised unless the comparison
  is == or !=. The latter cases return False or True,
  respectively.</p>
</blockquote>

<p><code>datetime</code> was one of the first types added to Python that tried to offer less surprising comparison behavior.  But, it couldn't become ""really clean"" until Python 3.</p>
","python"
"1993",3136202,"<pre><code>word = raw_input(""Your word: "")
import sys
sys.stdout.write(""\x1b[1A"" + 25*"" "" + ""\n"")
</code></pre>

<p>This will replace the last line printed with 25 spaces.</p>
","python"
"1994",25371636,"<p>Currently, you <em>can't</em> get error codes through Python's <code>sqlite3</code> module. Per <a href=""https://www.sqlite.org/c3ref/errcode.html"" rel=""nofollow"">https://www.sqlite.org/c3ref/errcode.html</a>, the C API exposes basic error codes, extended error codes, and error messages through <code>sqlite3_errcode</code>, <code>sqlite3_extended_errcode</code> and <code>sqlite3_errmsg</code> respectively. However, searching the CPython source reveals that:</p>

<ul>
<li><a href=""https://github.com/python/cpython/search?utf8=%E2%9C%93&amp;q=sqlite3_extended_errcode&amp;type=Code"" rel=""nofollow""><code>sqlite3_extended_errcode</code></a> never even gets called</li>
<li><a href=""https://github.com/python/cpython/search?utf8=%E2%9C%93&amp;q=sqlite3_errmsg&amp;type=Code"" rel=""nofollow""><code>sqlite3_errmsg</code></a> gets called and the result exposed as an Exception message</li>
<li><a href=""https://github.com/python/cpython/search?utf8=%E2%9C%93&amp;q=sqlite3_errcode&amp;type=Code"" rel=""nofollow""><code>sqlite3_errcode</code></a> gets called, but the result is never exposed directly; it's just used to decide which Exception class to raise</li>
</ul>

<p>While the feature you're asking for would be useful (indeed, I <em>need</em> it right now for debugging and am frustrated by its absence), it simply doesn't exist right now.</p>
","python"
"1995",14007664,"<p>A file with space-separated values is just a dialect of the classic <a href=""http://en.wikipedia.org/wiki/Comma-separated_values"" rel=""nofollow"">comma-separated values (CSV)</a> file where the delimiter is a space (<code></code>), followed by more spaces, which can be ignored.</p>

<p>Happily, Python comes with a <a href=""http://docs.python.org/2/library/csv.html#csv.reader"" rel=""nofollow""><strong><code>csv.reader</code></strong></a> <code>class</code> that understands <a href=""http://docs.python.org/2/library/csv.html#csv.Dialect"" rel=""nofollow"">dialect</a>s.</p>

<p>You should use this:</p>

<h2>Example:</h2>

<pre><code>#!/usr/bin/env python

import csv

csv.register_dialect('ssv', delimiter=' ', skipinitialspace=True)

data = []
with open('hyadeserr.txt', 'r') as f:
    reader = csv.reader(f, 'ssv')
    for row in reader:
        floats = [float(column) for column in row]
        data.append(floats)

print data
</code></pre>
","python"
"1996",17682201,"<p>But you can always make proposed by Brian approach better by filtering the results from previous step (which hoepfully should be smaller subset) and for each you check either they are within the radius.</p>

<p>Your user is in black point. Square approximation given by Brian return green but also orange points. The divernce in distance can be significant in worst case user have to go sqrt(2) times further than expected (extra 40% of distance). So for all orange and green points it is worth to check if their distance from black point (e.g euclidian one if this are really short distances e.g navigation in city) is not greater than assumed radius.</p>

<p><img src=""http://i.stack.imgur.com/eq7u0.png"" alt=""enter image description here""></p>

<p>UPDATE:</p>

<p>If you would like to use Haversine distance or (better) mentioned GeoDjango hava a look on this snippet comparing two django views dealing with nearby search:</p>

<p><a href=""https://gist.github.com/andilabs/4232b463e5ad2f19c155"" rel=""nofollow"">https://gist.github.com/andilabs/4232b463e5ad2f19c155</a></p>
","python"
"1997",1947176,"<p>I would only define the parent and give it a related name</p>

<pre><code>class Comment(models.Model):
  parent=models.ForeignKey('self', related_name=""children"", null=True, blank=True)
  #other fields
</code></pre>

<p>Then you could get its children</p>

<pre><code>comment=Comment.objects.get(id=1)
children=comment.children.all()

for child in children:
  morechildren=child.children.all()
</code></pre>
","python"
"1998",39763436,"<p>You can use <a href=""http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.groupby.html"" rel=""nofollow""><code>groupby</code></a> by <code>index</code> divide by <code>k=2</code>:</p>

<pre><code>k = 2
print (s.index // k)
Int64Index([0, 0, 1, 1], dtype='int64')

print (s.groupby([s.index // k]).mean())
   name
0   3.0
1   9.5
</code></pre>
","python"
"1999",30835966,"<p>As you noticed, the database name is <code>cookies.sqlite</code> not <code>cookie.sqlite</code>.</p>

<blockquote>
  <p>Why didn't I get an error? I though python would error out on. con = lite.connect('cookie.sqlite')</p>
</blockquote>

<p>Connecting to a sqlite database either opens an existing database file, or creates a new one if the database didn't exist.</p>
","python"
"2000",25735547,"<p>Clearly, the list is empty:</p>

<pre><code>h=[]
</code></pre>

<p>You'll have to add 25 elements to it before the code works (on a side note: lists' indexes start at <code>0</code>, not at <code>1</code> as seems implied in your code). Do this:</p>

<pre><code>h.append(firstValue)
h.append(secondValue)
# and so on
</code></pre>

<p>In Python lists start without elements, with no values - they're <em>not</em> like arrays in other programming languages, that initially have a fixed length. Lists in Python start with a length of zero, so even <code>h[0]</code> will fail <em>unless</em> you add elements, for instance using <code>append()</code>.</p>

<p><strong>UPDATE</strong></p>

<p>So, you want to translate some C code to Python. Your approach is wrong, you're initializing <em>numbers</em> as if they were <em>lists</em>, and the way you're accessing elements is incorrect, too. This is how the C code would look like in Python:</p>

<pre><code>sumah  = 0
sumap  = 0
sumahp = 0
sumah2 = 0

for i in xrange(1, 26):
    sumah  += h[i]
    sumap  += peso[i]
    sumahp += h[i]*peso[i]
    sumah2 += h[i]*h[i]
</code></pre>
","python"
"2001",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2002",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2003",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2004",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2005",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2006",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2007",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2008",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2009",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2010",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2011",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2012",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2013",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2014",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2015",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2016",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2017",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2018",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2019",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2020",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2021",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2022",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2023",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2024",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2025",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2026",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2027",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2028",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2029",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2030",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2031",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2032",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2033",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2034",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2035",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2036",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2037",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2038",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2039",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2040",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2041",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2042",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2043",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2044",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2045",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2046",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2047",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2048",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2049",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2050",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2051",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2052",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2053",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2054",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2055",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2056",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2057",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2058",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2059",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2060",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2061",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2062",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2063",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2064",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2065",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2066",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2067",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2068",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2069",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2070",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2071",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2072",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2073",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2074",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2075",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2076",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2077",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2078",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2079",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2080",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2081",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2082",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2083",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2084",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2085",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2086",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2087",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2088",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2089",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2090",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2091",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2092",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2093",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2094",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2095",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2096",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2097",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2098",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2099",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2100",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2101",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2102",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2103",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2104",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2105",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2106",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2107",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2108",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2109",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2110",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2111",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2112",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2113",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2114",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2115",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2116",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2117",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2118",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2119",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2120",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2121",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2122",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2123",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2124",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2125",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2126",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2127",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2128",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2129",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2130",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2131",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2132",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2133",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2134",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2135",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2136",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2137",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2138",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2139",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2140",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2141",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2142",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2143",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2144",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2145",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2146",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2147",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2148",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2149",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2150",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2151",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2152",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2153",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2154",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2155",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2156",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2157",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2158",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2159",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2160",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2161",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2162",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2163",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2164",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2165",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2166",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2167",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2168",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2169",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2170",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2171",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2172",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2173",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2174",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2175",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2176",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2177",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2178",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2179",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2180",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2181",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2182",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2183",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2184",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2185",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2186",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2187",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2188",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2189",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2190",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2191",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2192",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2193",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2194",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2195",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2196",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2197",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2198",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2199",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2200",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2201",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2202",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2203",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2204",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2205",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2206",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2207",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2208",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2209",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2210",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2211",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2212",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2213",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2214",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2215",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2216",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2217",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2218",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2219",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2220",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2221",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2222",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2223",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2224",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2225",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2226",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2227",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2228",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2229",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2230",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2231",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2232",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2233",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2234",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2235",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2236",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2237",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2238",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2239",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2240",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2241",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2242",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2243",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2244",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2245",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2246",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2247",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2248",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2249",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2250",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2251",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2252",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2253",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2254",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2255",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2256",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2257",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2258",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2259",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2260",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2261",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2262",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2263",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2264",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2265",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2266",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2267",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2268",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2269",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2270",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2271",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2272",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2273",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2274",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2275",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2276",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2277",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2278",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2279",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2280",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2281",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2282",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2283",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2284",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2285",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2286",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2287",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2288",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2289",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2290",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2291",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2292",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2293",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2294",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2295",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2296",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2297",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2298",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2299",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2300",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2301",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2302",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2303",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2304",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2305",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2306",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2307",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2308",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2309",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2310",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2311",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2312",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2313",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2314",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2315",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2316",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2317",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2318",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2319",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2320",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2321",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2322",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2323",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2324",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2325",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2326",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2327",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2328",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2329",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2330",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2331",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2332",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2333",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2334",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2335",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2336",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2337",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2338",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2339",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2340",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2341",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2342",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2343",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2344",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2345",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2346",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2347",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2348",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2349",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2350",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2351",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2352",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2353",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2354",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2355",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2356",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2357",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2358",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2359",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2360",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2361",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2362",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2363",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2364",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2365",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2366",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2367",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2368",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2369",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2370",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2371",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2372",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2373",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2374",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2375",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2376",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2377",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2378",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2379",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2380",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2381",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2382",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2383",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2384",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2385",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2386",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2387",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2388",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2389",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2390",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2391",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2392",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2393",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2394",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2395",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2396",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2397",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2398",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2399",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2400",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2401",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2402",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2403",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2404",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2405",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2406",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2407",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2408",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2409",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2410",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2411",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2412",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2413",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2414",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2415",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2416",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2417",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2418",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2419",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2420",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2421",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2422",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2423",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2424",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2425",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2426",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2427",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2428",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2429",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2430",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2431",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2432",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2433",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2434",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2435",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2436",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2437",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2438",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2439",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2440",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2441",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2442",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2443",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2444",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2445",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2446",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2447",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2448",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2449",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2450",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2451",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2452",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2453",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2454",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2455",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2456",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2457",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2458",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2459",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2460",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2461",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2462",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2463",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2464",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2465",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2466",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2467",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2468",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2469",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2470",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2471",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2472",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2473",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2474",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2475",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2476",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2477",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2478",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2479",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2480",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2481",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2482",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2483",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2484",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2485",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2486",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2487",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2488",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2489",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2490",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2491",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2492",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2493",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2494",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2495",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2496",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2497",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2498",7336694,"<p>You can <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow"">parse your big XML file incrementally</a>:</p>

<pre><code>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse(""path/to/big.xml"", events=(""start"", ""end"")))

# get the root element
event, root = next(context)
assert event == ""start""

for event, elem in context:
    if event == ""end"" and elem.tag == ""book"":
       # ... process book elements ...
       root.clear()
</code></pre>
","xml"
"2499",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
"2500",7336694,"<p>You can use <a href=""http://effbot.org/elementtree/iterparse.htm"" rel=""nofollow"">elementtree.iterparse</a> and discard each book tag after it is processed.</p>
","xml"
